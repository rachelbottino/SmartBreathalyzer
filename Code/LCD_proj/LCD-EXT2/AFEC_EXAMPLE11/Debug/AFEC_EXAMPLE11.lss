
AFEC_EXAMPLE11.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004288  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00404288  00404288  00014288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000086c  20400000  00404290  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000168  2040086c  00404afc  0002086c  2**2
                  ALLOC
  4 .stack        00002004  204009d4  00404c64  0002086c  2**0
                  ALLOC
  5 .heap         00000200  204029d8  00406c68  0002086c  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  0002086c  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  0002089a  2**0
                  CONTENTS, READONLY
  8 .debug_info   0000d364  00000000  00000000  000208f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00002168  00000000  00000000  0002dc57  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00004d40  00000000  00000000  0002fdbf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000a60  00000000  00000000  00034aff  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a48  00000000  00000000  0003555f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0001ed91  00000000  00000000  00035fa7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000b6f1  00000000  00000000  00054d38  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0008b335  00000000  00000000  00060429  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000227c  00000000  00000000  000eb760  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	204029d8 	.word	0x204029d8
  400004:	00400df9 	.word	0x00400df9
  400008:	00400df5 	.word	0x00400df5
  40000c:	00400df5 	.word	0x00400df5
  400010:	00400df5 	.word	0x00400df5
  400014:	00400df5 	.word	0x00400df5
  400018:	00400df5 	.word	0x00400df5
	...
  40002c:	00400df5 	.word	0x00400df5
  400030:	00400df5 	.word	0x00400df5
  400034:	00000000 	.word	0x00000000
  400038:	00400df5 	.word	0x00400df5
  40003c:	00400df5 	.word	0x00400df5
  400040:	00400df5 	.word	0x00400df5
  400044:	00400df5 	.word	0x00400df5
  400048:	00400df5 	.word	0x00400df5
  40004c:	00400df5 	.word	0x00400df5
  400050:	00400df5 	.word	0x00400df5
  400054:	00400df5 	.word	0x00400df5
  400058:	00400df5 	.word	0x00400df5
  40005c:	00400df5 	.word	0x00400df5
  400060:	00400df5 	.word	0x00400df5
  400064:	00000000 	.word	0x00000000
  400068:	00400ad1 	.word	0x00400ad1
  40006c:	00400ae5 	.word	0x00400ae5
  400070:	00400af9 	.word	0x00400af9
  400074:	00400df5 	.word	0x00400df5
  400078:	00400df5 	.word	0x00400df5
  40007c:	00400df5 	.word	0x00400df5
  400080:	00400b0d 	.word	0x00400b0d
  400084:	00400b21 	.word	0x00400b21
  400088:	00400df5 	.word	0x00400df5
  40008c:	00400df5 	.word	0x00400df5
  400090:	00400df5 	.word	0x00400df5
  400094:	00400df5 	.word	0x00400df5
  400098:	00400df5 	.word	0x00400df5
  40009c:	00400df5 	.word	0x00400df5
  4000a0:	00400df5 	.word	0x00400df5
  4000a4:	00400df5 	.word	0x00400df5
  4000a8:	00400df5 	.word	0x00400df5
  4000ac:	00400df5 	.word	0x00400df5
  4000b0:	00400df5 	.word	0x00400df5
  4000b4:	004009ed 	.word	0x004009ed
  4000b8:	00400df5 	.word	0x00400df5
  4000bc:	00400df5 	.word	0x00400df5
  4000c0:	00400df5 	.word	0x00400df5
  4000c4:	00400df5 	.word	0x00400df5
  4000c8:	00400df5 	.word	0x00400df5
  4000cc:	00400df5 	.word	0x00400df5
  4000d0:	00000000 	.word	0x00000000
  4000d4:	00400df5 	.word	0x00400df5
  4000d8:	00000000 	.word	0x00000000
  4000dc:	00400df5 	.word	0x00400df5
  4000e0:	00400a01 	.word	0x00400a01
  4000e4:	00400df5 	.word	0x00400df5
  4000e8:	00400df5 	.word	0x00400df5
  4000ec:	00400df5 	.word	0x00400df5
  4000f0:	00400df5 	.word	0x00400df5
  4000f4:	00400df5 	.word	0x00400df5
  4000f8:	00400df5 	.word	0x00400df5
  4000fc:	00400df5 	.word	0x00400df5
  400100:	00400df5 	.word	0x00400df5
  400104:	00400df5 	.word	0x00400df5
  400108:	00400df5 	.word	0x00400df5
  40010c:	00400df5 	.word	0x00400df5
  400110:	00400df5 	.word	0x00400df5
	...
  400120:	00400df5 	.word	0x00400df5
  400124:	00400df5 	.word	0x00400df5
  400128:	00400df5 	.word	0x00400df5
  40012c:	00400df5 	.word	0x00400df5
  400130:	00400df5 	.word	0x00400df5
  400134:	00000000 	.word	0x00000000
  400138:	00400df5 	.word	0x00400df5
  40013c:	00400df5 	.word	0x00400df5

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	2040086c 	.word	0x2040086c
  40015c:	00000000 	.word	0x00000000
  400160:	00404290 	.word	0x00404290

00400164 <frame_dummy>:
  400164:	4b08      	ldr	r3, [pc, #32]	; (400188 <frame_dummy+0x24>)
  400166:	b510      	push	{r4, lr}
  400168:	b11b      	cbz	r3, 400172 <frame_dummy+0xe>
  40016a:	4908      	ldr	r1, [pc, #32]	; (40018c <frame_dummy+0x28>)
  40016c:	4808      	ldr	r0, [pc, #32]	; (400190 <frame_dummy+0x2c>)
  40016e:	f3af 8000 	nop.w
  400172:	4808      	ldr	r0, [pc, #32]	; (400194 <frame_dummy+0x30>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b903      	cbnz	r3, 40017a <frame_dummy+0x16>
  400178:	bd10      	pop	{r4, pc}
  40017a:	4b07      	ldr	r3, [pc, #28]	; (400198 <frame_dummy+0x34>)
  40017c:	2b00      	cmp	r3, #0
  40017e:	d0fb      	beq.n	400178 <frame_dummy+0x14>
  400180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400184:	4718      	bx	r3
  400186:	bf00      	nop
  400188:	00000000 	.word	0x00000000
  40018c:	20400870 	.word	0x20400870
  400190:	00404290 	.word	0x00404290
  400194:	00404290 	.word	0x00404290
  400198:	00000000 	.word	0x00000000

0040019c <afec_temp_sensor_end_conversion>:
static inline uint32_t afec_channel_get_value(Afec *const afec,
		enum afec_channel_num afec_ch)
{
	afec_ch_sanity_check(afec, afec_ch);

	afec->AFEC_CSELR = afec_ch;
  40019c:	4b04      	ldr	r3, [pc, #16]	; (4001b0 <afec_temp_sensor_end_conversion+0x14>)
  40019e:	220b      	movs	r2, #11
  4001a0:	665a      	str	r2, [r3, #100]	; 0x64
	return afec->AFEC_CDR;
  4001a2:	6e9a      	ldr	r2, [r3, #104]	; 0x68
/**
 * \brief AFEC interrupt callback function.
 */
static void afec_temp_sensor_end_conversion(void)
{
	g_ul_value = afec_channel_get_value(AFEC0, AFEC_TEMPERATURE_SENSOR);
  4001a4:	4b03      	ldr	r3, [pc, #12]	; (4001b4 <afec_temp_sensor_end_conversion+0x18>)
  4001a6:	601a      	str	r2, [r3, #0]
	is_conversion_done = true;
  4001a8:	2201      	movs	r2, #1
  4001aa:	4b03      	ldr	r3, [pc, #12]	; (4001b8 <afec_temp_sensor_end_conversion+0x1c>)
  4001ac:	701a      	strb	r2, [r3, #0]
  4001ae:	4770      	bx	lr
  4001b0:	4003c000 	.word	0x4003c000
  4001b4:	2040088c 	.word	0x2040088c
  4001b8:	20400888 	.word	0x20400888

004001bc <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  4001bc:	b5f0      	push	{r4, r5, r6, r7, lr}
  4001be:	b083      	sub	sp, #12
  4001c0:	4605      	mov	r5, r0
  4001c2:	460c      	mov	r4, r1
	uint32_t val = 0;
  4001c4:	2300      	movs	r3, #0
  4001c6:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  4001c8:	4b29      	ldr	r3, [pc, #164]	; (400270 <usart_serial_getchar+0xb4>)
  4001ca:	4298      	cmp	r0, r3
  4001cc:	d107      	bne.n	4001de <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
  4001ce:	461f      	mov	r7, r3
  4001d0:	4e28      	ldr	r6, [pc, #160]	; (400274 <usart_serial_getchar+0xb8>)
  4001d2:	4621      	mov	r1, r4
  4001d4:	4638      	mov	r0, r7
  4001d6:	47b0      	blx	r6
  4001d8:	2800      	cmp	r0, #0
  4001da:	d1fa      	bne.n	4001d2 <usart_serial_getchar+0x16>
  4001dc:	e015      	b.n	40020a <usart_serial_getchar+0x4e>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  4001de:	4b26      	ldr	r3, [pc, #152]	; (400278 <usart_serial_getchar+0xbc>)
  4001e0:	4298      	cmp	r0, r3
  4001e2:	d107      	bne.n	4001f4 <usart_serial_getchar+0x38>
		while (uart_read((Uart*)p_usart, data));
  4001e4:	461f      	mov	r7, r3
  4001e6:	4e23      	ldr	r6, [pc, #140]	; (400274 <usart_serial_getchar+0xb8>)
  4001e8:	4621      	mov	r1, r4
  4001ea:	4638      	mov	r0, r7
  4001ec:	47b0      	blx	r6
  4001ee:	2800      	cmp	r0, #0
  4001f0:	d1fa      	bne.n	4001e8 <usart_serial_getchar+0x2c>
  4001f2:	e015      	b.n	400220 <usart_serial_getchar+0x64>
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  4001f4:	4b21      	ldr	r3, [pc, #132]	; (40027c <usart_serial_getchar+0xc0>)
  4001f6:	4298      	cmp	r0, r3
  4001f8:	d107      	bne.n	40020a <usart_serial_getchar+0x4e>
		while (uart_read((Uart*)p_usart, data));
  4001fa:	461f      	mov	r7, r3
  4001fc:	4e1d      	ldr	r6, [pc, #116]	; (400274 <usart_serial_getchar+0xb8>)
  4001fe:	4621      	mov	r1, r4
  400200:	4638      	mov	r0, r7
  400202:	47b0      	blx	r6
  400204:	2800      	cmp	r0, #0
  400206:	d1fa      	bne.n	4001fe <usart_serial_getchar+0x42>
  400208:	e017      	b.n	40023a <usart_serial_getchar+0x7e>
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  40020a:	4b1d      	ldr	r3, [pc, #116]	; (400280 <usart_serial_getchar+0xc4>)
  40020c:	429d      	cmp	r5, r3
  40020e:	d107      	bne.n	400220 <usart_serial_getchar+0x64>
		while (uart_read((Uart*)p_usart, data));
  400210:	461f      	mov	r7, r3
  400212:	4e18      	ldr	r6, [pc, #96]	; (400274 <usart_serial_getchar+0xb8>)
  400214:	4621      	mov	r1, r4
  400216:	4638      	mov	r0, r7
  400218:	47b0      	blx	r6
  40021a:	2800      	cmp	r0, #0
  40021c:	d1fa      	bne.n	400214 <usart_serial_getchar+0x58>
  40021e:	e019      	b.n	400254 <usart_serial_getchar+0x98>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  400220:	4b18      	ldr	r3, [pc, #96]	; (400284 <usart_serial_getchar+0xc8>)
  400222:	429d      	cmp	r5, r3
  400224:	d109      	bne.n	40023a <usart_serial_getchar+0x7e>
		while (usart_read(p_usart, &val));
  400226:	461e      	mov	r6, r3
  400228:	4d17      	ldr	r5, [pc, #92]	; (400288 <usart_serial_getchar+0xcc>)
  40022a:	a901      	add	r1, sp, #4
  40022c:	4630      	mov	r0, r6
  40022e:	47a8      	blx	r5
  400230:	2800      	cmp	r0, #0
  400232:	d1fa      	bne.n	40022a <usart_serial_getchar+0x6e>
		*data = (uint8_t)(val & 0xFF);
  400234:	9b01      	ldr	r3, [sp, #4]
  400236:	7023      	strb	r3, [r4, #0]
  400238:	e018      	b.n	40026c <usart_serial_getchar+0xb0>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  40023a:	4b14      	ldr	r3, [pc, #80]	; (40028c <usart_serial_getchar+0xd0>)
  40023c:	429d      	cmp	r5, r3
  40023e:	d109      	bne.n	400254 <usart_serial_getchar+0x98>
		while (usart_read(p_usart, &val));
  400240:	461e      	mov	r6, r3
  400242:	4d11      	ldr	r5, [pc, #68]	; (400288 <usart_serial_getchar+0xcc>)
  400244:	a901      	add	r1, sp, #4
  400246:	4630      	mov	r0, r6
  400248:	47a8      	blx	r5
  40024a:	2800      	cmp	r0, #0
  40024c:	d1fa      	bne.n	400244 <usart_serial_getchar+0x88>
		*data = (uint8_t)(val & 0xFF);
  40024e:	9b01      	ldr	r3, [sp, #4]
  400250:	7023      	strb	r3, [r4, #0]
  400252:	e00b      	b.n	40026c <usart_serial_getchar+0xb0>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  400254:	4b0e      	ldr	r3, [pc, #56]	; (400290 <usart_serial_getchar+0xd4>)
  400256:	429d      	cmp	r5, r3
  400258:	d108      	bne.n	40026c <usart_serial_getchar+0xb0>
		while (usart_read(p_usart, &val));
  40025a:	461e      	mov	r6, r3
  40025c:	4d0a      	ldr	r5, [pc, #40]	; (400288 <usart_serial_getchar+0xcc>)
  40025e:	a901      	add	r1, sp, #4
  400260:	4630      	mov	r0, r6
  400262:	47a8      	blx	r5
  400264:	2800      	cmp	r0, #0
  400266:	d1fa      	bne.n	40025e <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
  400268:	9b01      	ldr	r3, [sp, #4]
  40026a:	7023      	strb	r3, [r4, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  40026c:	b003      	add	sp, #12
  40026e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400270:	400e0800 	.word	0x400e0800
  400274:	00400cc5 	.word	0x00400cc5
  400278:	400e0a00 	.word	0x400e0a00
  40027c:	400e1a00 	.word	0x400e1a00
  400280:	400e1c00 	.word	0x400e1c00
  400284:	40024000 	.word	0x40024000
  400288:	00400ddd 	.word	0x00400ddd
  40028c:	40028000 	.word	0x40028000
  400290:	4002c000 	.word	0x4002c000

00400294 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  400294:	b570      	push	{r4, r5, r6, lr}
  400296:	460c      	mov	r4, r1
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  400298:	4b2a      	ldr	r3, [pc, #168]	; (400344 <usart_serial_putchar+0xb0>)
  40029a:	4298      	cmp	r0, r3
  40029c:	d108      	bne.n	4002b0 <usart_serial_putchar+0x1c>
		while (uart_write((Uart*)p_usart, c)!=0);
  40029e:	461e      	mov	r6, r3
  4002a0:	4d29      	ldr	r5, [pc, #164]	; (400348 <usart_serial_putchar+0xb4>)
  4002a2:	4621      	mov	r1, r4
  4002a4:	4630      	mov	r0, r6
  4002a6:	47a8      	blx	r5
  4002a8:	2800      	cmp	r0, #0
  4002aa:	d1fa      	bne.n	4002a2 <usart_serial_putchar+0xe>
		return 1;
  4002ac:	2001      	movs	r0, #1
  4002ae:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  4002b0:	4b26      	ldr	r3, [pc, #152]	; (40034c <usart_serial_putchar+0xb8>)
  4002b2:	4298      	cmp	r0, r3
  4002b4:	d108      	bne.n	4002c8 <usart_serial_putchar+0x34>
		while (uart_write((Uart*)p_usart, c)!=0);
  4002b6:	461e      	mov	r6, r3
  4002b8:	4d23      	ldr	r5, [pc, #140]	; (400348 <usart_serial_putchar+0xb4>)
  4002ba:	4621      	mov	r1, r4
  4002bc:	4630      	mov	r0, r6
  4002be:	47a8      	blx	r5
  4002c0:	2800      	cmp	r0, #0
  4002c2:	d1fa      	bne.n	4002ba <usart_serial_putchar+0x26>
		return 1;
  4002c4:	2001      	movs	r0, #1
  4002c6:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  4002c8:	4b21      	ldr	r3, [pc, #132]	; (400350 <usart_serial_putchar+0xbc>)
  4002ca:	4298      	cmp	r0, r3
  4002cc:	d108      	bne.n	4002e0 <usart_serial_putchar+0x4c>
		while (uart_write((Uart*)p_usart, c)!=0);
  4002ce:	461e      	mov	r6, r3
  4002d0:	4d1d      	ldr	r5, [pc, #116]	; (400348 <usart_serial_putchar+0xb4>)
  4002d2:	4621      	mov	r1, r4
  4002d4:	4630      	mov	r0, r6
  4002d6:	47a8      	blx	r5
  4002d8:	2800      	cmp	r0, #0
  4002da:	d1fa      	bne.n	4002d2 <usart_serial_putchar+0x3e>
		return 1;
  4002dc:	2001      	movs	r0, #1
  4002de:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  4002e0:	4b1c      	ldr	r3, [pc, #112]	; (400354 <usart_serial_putchar+0xc0>)
  4002e2:	4298      	cmp	r0, r3
  4002e4:	d108      	bne.n	4002f8 <usart_serial_putchar+0x64>
		while (uart_write((Uart*)p_usart, c)!=0);
  4002e6:	461e      	mov	r6, r3
  4002e8:	4d17      	ldr	r5, [pc, #92]	; (400348 <usart_serial_putchar+0xb4>)
  4002ea:	4621      	mov	r1, r4
  4002ec:	4630      	mov	r0, r6
  4002ee:	47a8      	blx	r5
  4002f0:	2800      	cmp	r0, #0
  4002f2:	d1fa      	bne.n	4002ea <usart_serial_putchar+0x56>
		return 1;
  4002f4:	2001      	movs	r0, #1
  4002f6:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4002f8:	4b17      	ldr	r3, [pc, #92]	; (400358 <usart_serial_putchar+0xc4>)
  4002fa:	4298      	cmp	r0, r3
  4002fc:	d108      	bne.n	400310 <usart_serial_putchar+0x7c>
		while (usart_write(p_usart, c)!=0);
  4002fe:	461e      	mov	r6, r3
  400300:	4d16      	ldr	r5, [pc, #88]	; (40035c <usart_serial_putchar+0xc8>)
  400302:	4621      	mov	r1, r4
  400304:	4630      	mov	r0, r6
  400306:	47a8      	blx	r5
  400308:	2800      	cmp	r0, #0
  40030a:	d1fa      	bne.n	400302 <usart_serial_putchar+0x6e>
		return 1;
  40030c:	2001      	movs	r0, #1
  40030e:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  400310:	4b13      	ldr	r3, [pc, #76]	; (400360 <usart_serial_putchar+0xcc>)
  400312:	4298      	cmp	r0, r3
  400314:	d108      	bne.n	400328 <usart_serial_putchar+0x94>
		while (usart_write(p_usart, c)!=0);
  400316:	461e      	mov	r6, r3
  400318:	4d10      	ldr	r5, [pc, #64]	; (40035c <usart_serial_putchar+0xc8>)
  40031a:	4621      	mov	r1, r4
  40031c:	4630      	mov	r0, r6
  40031e:	47a8      	blx	r5
  400320:	2800      	cmp	r0, #0
  400322:	d1fa      	bne.n	40031a <usart_serial_putchar+0x86>
		return 1;
  400324:	2001      	movs	r0, #1
  400326:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  400328:	4b0e      	ldr	r3, [pc, #56]	; (400364 <usart_serial_putchar+0xd0>)
  40032a:	4298      	cmp	r0, r3
  40032c:	d108      	bne.n	400340 <usart_serial_putchar+0xac>
		while (usart_write(p_usart, c)!=0);
  40032e:	461e      	mov	r6, r3
  400330:	4d0a      	ldr	r5, [pc, #40]	; (40035c <usart_serial_putchar+0xc8>)
  400332:	4621      	mov	r1, r4
  400334:	4630      	mov	r0, r6
  400336:	47a8      	blx	r5
  400338:	2800      	cmp	r0, #0
  40033a:	d1fa      	bne.n	400332 <usart_serial_putchar+0x9e>
		return 1;
  40033c:	2001      	movs	r0, #1
  40033e:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  400340:	2000      	movs	r0, #0
}
  400342:	bd70      	pop	{r4, r5, r6, pc}
  400344:	400e0800 	.word	0x400e0800
  400348:	00400cb1 	.word	0x00400cb1
  40034c:	400e0a00 	.word	0x400e0a00
  400350:	400e1a00 	.word	0x400e1a00
  400354:	400e1c00 	.word	0x400e1c00
  400358:	40024000 	.word	0x40024000
  40035c:	00400dc5 	.word	0x00400dc5
  400360:	40028000 	.word	0x40028000
  400364:	4002c000 	.word	0x4002c000

00400368 <main>:
 * \brief Application entry point.
 *
 * \return Unused (ANSI-C compatibility).
 */
int main(void)
{
  400368:	b570      	push	{r4, r5, r6, lr}
  40036a:	b090      	sub	sp, #64	; 0x40
	int32_t ul_vol;
	int32_t ul_temp;

	/* Initialize the SAM system. */
	sysclk_init();
  40036c:	4b43      	ldr	r3, [pc, #268]	; (40047c <main+0x114>)
  40036e:	4798      	blx	r3
	board_init();
  400370:	4b43      	ldr	r3, [pc, #268]	; (400480 <main+0x118>)
  400372:	4798      	blx	r3
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400374:	200e      	movs	r0, #14
  400376:	4e43      	ldr	r6, [pc, #268]	; (400484 <main+0x11c>)
  400378:	47b0      	blx	r6
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  40037a:	4c43      	ldr	r4, [pc, #268]	; (400488 <main+0x120>)
  40037c:	4b43      	ldr	r3, [pc, #268]	; (40048c <main+0x124>)
  40037e:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  400380:	4a43      	ldr	r2, [pc, #268]	; (400490 <main+0x128>)
  400382:	4b44      	ldr	r3, [pc, #272]	; (400494 <main+0x12c>)
  400384:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  400386:	4a44      	ldr	r2, [pc, #272]	; (400498 <main+0x130>)
  400388:	4b44      	ldr	r3, [pc, #272]	; (40049c <main+0x134>)
  40038a:	601a      	str	r2, [r3, #0]
	uart_settings.ul_baudrate = opt->baudrate;
	uart_settings.ul_mode = opt->paritytype;
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
  40038c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  400390:	9301      	str	r3, [sp, #4]
	usart_settings.char_length = opt->charlength;
  400392:	23c0      	movs	r3, #192	; 0xc0
  400394:	9302      	str	r3, [sp, #8]
	usart_settings.parity_type = opt->paritytype;
  400396:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40039a:	9303      	str	r3, [sp, #12]
	usart_settings.stop_bits= opt->stopbits;
  40039c:	2500      	movs	r5, #0
  40039e:	9504      	str	r5, [sp, #16]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  4003a0:	9505      	str	r5, [sp, #20]
  4003a2:	200e      	movs	r0, #14
  4003a4:	47b0      	blx	r6
		flexcom_set_opmode(FLEXCOM1, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART1);
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  4003a6:	4a3e      	ldr	r2, [pc, #248]	; (4004a0 <main+0x138>)
  4003a8:	a901      	add	r1, sp, #4
  4003aa:	4620      	mov	r0, r4
  4003ac:	4b3d      	ldr	r3, [pc, #244]	; (4004a4 <main+0x13c>)
  4003ae:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  4003b0:	4620      	mov	r0, r4
  4003b2:	4b3d      	ldr	r3, [pc, #244]	; (4004a8 <main+0x140>)
  4003b4:	4798      	blx	r3
		usart_enable_rx(p_usart);
  4003b6:	4620      	mov	r0, r4
  4003b8:	4b3c      	ldr	r3, [pc, #240]	; (4004ac <main+0x144>)
  4003ba:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  4003bc:	4e3c      	ldr	r6, [pc, #240]	; (4004b0 <main+0x148>)
  4003be:	6833      	ldr	r3, [r6, #0]
  4003c0:	4629      	mov	r1, r5
  4003c2:	6898      	ldr	r0, [r3, #8]
  4003c4:	4c3b      	ldr	r4, [pc, #236]	; (4004b4 <main+0x14c>)
  4003c6:	47a0      	blx	r4
	setbuf(stdin, NULL);
  4003c8:	6833      	ldr	r3, [r6, #0]
  4003ca:	4629      	mov	r1, r5
  4003cc:	6858      	ldr	r0, [r3, #4]
  4003ce:	47a0      	blx	r4

	configure_console();

	/* Output example information. */
	puts(STRING_HEADER);
  4003d0:	4839      	ldr	r0, [pc, #228]	; (4004b8 <main+0x150>)
  4003d2:	4b3a      	ldr	r3, [pc, #232]	; (4004bc <main+0x154>)
  4003d4:	4798      	blx	r3

	afec_enable(AFEC0);
  4003d6:	4c3a      	ldr	r4, [pc, #232]	; (4004c0 <main+0x158>)
  4003d8:	4620      	mov	r0, r4
  4003da:	4b3a      	ldr	r3, [pc, #232]	; (4004c4 <main+0x15c>)
  4003dc:	4798      	blx	r3

	struct afec_config afec_cfg;

	afec_get_config_defaults(&afec_cfg);
  4003de:	a80a      	add	r0, sp, #40	; 0x28
  4003e0:	4b39      	ldr	r3, [pc, #228]	; (4004c8 <main+0x160>)
  4003e2:	4798      	blx	r3

	afec_init(AFEC0, &afec_cfg);
  4003e4:	a90a      	add	r1, sp, #40	; 0x28
  4003e6:	4620      	mov	r0, r4
  4003e8:	4b38      	ldr	r3, [pc, #224]	; (4004cc <main+0x164>)
  4003ea:	4798      	blx	r3
static inline void afec_set_trigger(Afec *const afec,
		const enum afec_trigger trigger)
{
	uint32_t reg;

	reg = afec->AFEC_MR;
  4003ec:	6863      	ldr	r3, [r4, #4]

	if (trigger == AFEC_TRIG_FREERUN) {
		reg |= AFEC_MR_FREERUN_ON;
	} else {
		reg &= ~(AFEC_MR_TRGSEL_Msk | AFEC_MR_TRGEN | AFEC_MR_FREERUN_ON);
  4003ee:	f023 038f 	bic.w	r3, r3, #143	; 0x8f
		reg |= trigger;
	}

	afec->AFEC_MR = reg;
  4003f2:	6063      	str	r3, [r4, #4]

	afec_set_trigger(AFEC0, AFEC_TRIG_SW);

	struct afec_ch_config afec_ch_cfg;
	afec_ch_get_config_defaults(&afec_ch_cfg);
  4003f4:	a809      	add	r0, sp, #36	; 0x24
  4003f6:	4b36      	ldr	r3, [pc, #216]	; (4004d0 <main+0x168>)
  4003f8:	4798      	blx	r3
#if (SAMV71 || SAMV70 || SAME70 || SAMS70)
	afec_ch_cfg.gain = AFEC_GAINVALUE_0;
  4003fa:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
#endif
	afec_ch_set_config(AFEC0, AFEC_TEMPERATURE_SENSOR, &afec_ch_cfg);
  4003fe:	aa09      	add	r2, sp, #36	; 0x24
  400400:	210b      	movs	r1, #11
  400402:	4620      	mov	r0, r4
  400404:	4b33      	ldr	r3, [pc, #204]	; (4004d4 <main+0x16c>)
  400406:	4798      	blx	r3
static inline void afec_channel_set_analog_offset(Afec *const afec,
		enum afec_channel_num afec_ch, uint16_t aoffset)
{
	afec_ch_sanity_check(afec, afec_ch);

	afec->AFEC_CSELR = afec_ch;
  400408:	250b      	movs	r5, #11
  40040a:	6665      	str	r5, [r4, #100]	; 0x64
	afec->AFEC_COCR = (aoffset & AFEC_COCR_AOFF_Msk);
  40040c:	f44f 7300 	mov.w	r3, #512	; 0x200
  400410:	66e3      	str	r3, [r4, #108]	; 0x6c
	afec_channel_set_analog_offset(AFEC0, AFEC_TEMPERATURE_SENSOR, 0x800);
#endif

	struct afec_temp_sensor_config afec_temp_sensor_cfg;

	afec_temp_sensor_get_config_defaults(&afec_temp_sensor_cfg);
  400412:	a807      	add	r0, sp, #28
  400414:	4b30      	ldr	r3, [pc, #192]	; (4004d8 <main+0x170>)
  400416:	4798      	blx	r3
	afec_temp_sensor_cfg.rctc = true;
  400418:	2601      	movs	r6, #1
  40041a:	f88d 601c 	strb.w	r6, [sp, #28]
	afec_temp_sensor_set_config(AFEC0, &afec_temp_sensor_cfg);
  40041e:	a907      	add	r1, sp, #28
  400420:	4620      	mov	r0, r4
  400422:	4b2e      	ldr	r3, [pc, #184]	; (4004dc <main+0x174>)
  400424:	4798      	blx	r3

#if (SAMV71 || SAMV70 || SAME70 || SAMS70)
	afec_set_callback(AFEC0, AFEC_INTERRUPT_EOC_11,
  400426:	4633      	mov	r3, r6
  400428:	4a2d      	ldr	r2, [pc, #180]	; (4004e0 <main+0x178>)
  40042a:	4629      	mov	r1, r5
  40042c:	4620      	mov	r0, r4
  40042e:	4c2d      	ldr	r4, [pc, #180]	; (4004e4 <main+0x17c>)
  400430:	47a0      	blx	r4
			afec_temp_sensor_end_conversion, 1);
#endif

	while (1) {

		if(is_conversion_done == true) {
  400432:	4c2d      	ldr	r4, [pc, #180]	; (4004e8 <main+0x180>)
			 * and the temperature slope dVT/dT = 4.7 mV/C
			 */
			ul_temp = (ul_vol - 1440)  * 100 / 470 + 27;
#endif

			printf("Temperature is: %4d\r", (int)ul_temp);
  400434:	4d2d      	ldr	r5, [pc, #180]	; (4004ec <main+0x184>)
			afec_temp_sensor_end_conversion, 1);
#endif

	while (1) {

		if(is_conversion_done == true) {
  400436:	7823      	ldrb	r3, [r4, #0]
  400438:	f013 0fff 	tst.w	r3, #255	; 0xff
  40043c:	d0fb      	beq.n	400436 <main+0xce>

			ul_vol = g_ul_value * VOLT_REF / MAX_DIGITAL;
  40043e:	4b2c      	ldr	r3, [pc, #176]	; (4004f0 <main+0x188>)
  400440:	681a      	ldr	r2, [r3, #0]
			 * and the temperature slope dVT/dT = 4.7 mV/C
			 */
			ul_temp = (ul_vol - 1440)  * 100 / 470 + 27;
#endif

			printf("Temperature is: %4d\r", (int)ul_temp);
  400442:	f640 43e4 	movw	r3, #3300	; 0xce4
  400446:	fb03 f202 	mul.w	r2, r3, r2
  40044a:	4b2a      	ldr	r3, [pc, #168]	; (4004f4 <main+0x18c>)
  40044c:	fba3 1302 	umull	r1, r3, r3, r2
  400450:	1ad2      	subs	r2, r2, r3
  400452:	eb03 0352 	add.w	r3, r3, r2, lsr #1
  400456:	0adb      	lsrs	r3, r3, #11
  400458:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
  40045c:	2164      	movs	r1, #100	; 0x64
  40045e:	fb01 f303 	mul.w	r3, r1, r3
  400462:	fb85 2103 	smull	r2, r1, r5, r3
  400466:	4419      	add	r1, r3
  400468:	17db      	asrs	r3, r3, #31
  40046a:	ebc3 11e1 	rsb	r1, r3, r1, asr #7
  40046e:	311b      	adds	r1, #27
  400470:	4821      	ldr	r0, [pc, #132]	; (4004f8 <main+0x190>)
  400472:	4b22      	ldr	r3, [pc, #136]	; (4004fc <main+0x194>)
  400474:	4798      	blx	r3
			is_conversion_done = false;
  400476:	2300      	movs	r3, #0
  400478:	7023      	strb	r3, [r4, #0]
  40047a:	e7dc      	b.n	400436 <main+0xce>
  40047c:	00400501 	.word	0x00400501
  400480:	004005fd 	.word	0x004005fd
  400484:	00400c5d 	.word	0x00400c5d
  400488:	40028000 	.word	0x40028000
  40048c:	2040094c 	.word	0x2040094c
  400490:	00400295 	.word	0x00400295
  400494:	20400948 	.word	0x20400948
  400498:	004001bd 	.word	0x004001bd
  40049c:	20400944 	.word	0x20400944
  4004a0:	08f0d180 	.word	0x08f0d180
  4004a4:	00400d61 	.word	0x00400d61
  4004a8:	00400db5 	.word	0x00400db5
  4004ac:	00400dbd 	.word	0x00400dbd
  4004b0:	20400430 	.word	0x20400430
  4004b4:	00401235 	.word	0x00401235
  4004b8:	00404190 	.word	0x00404190
  4004bc:	00401225 	.word	0x00401225
  4004c0:	4003c000 	.word	0x4003c000
  4004c4:	00400a15 	.word	0x00400a15
  4004c8:	00400845 	.word	0x00400845
  4004cc:	00400895 	.word	0x00400895
  4004d0:	00400875 	.word	0x00400875
  4004d4:	00400801 	.word	0x00400801
  4004d8:	00400881 	.word	0x00400881
  4004dc:	00400831 	.word	0x00400831
  4004e0:	0040019d 	.word	0x0040019d
  4004e4:	00400995 	.word	0x00400995
  4004e8:	20400888 	.word	0x20400888
  4004ec:	8ca29c05 	.word	0x8ca29c05
  4004f0:	2040088c 	.word	0x2040088c
  4004f4:	00100101 	.word	0x00100101
  4004f8:	004041f0 	.word	0x004041f0
  4004fc:	004010f9 	.word	0x004010f9

00400500 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400500:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  400502:	4810      	ldr	r0, [pc, #64]	; (400544 <sysclk_init+0x44>)
  400504:	4b10      	ldr	r3, [pc, #64]	; (400548 <sysclk_init+0x48>)
  400506:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400508:	213e      	movs	r1, #62	; 0x3e
  40050a:	2000      	movs	r0, #0
  40050c:	4b0f      	ldr	r3, [pc, #60]	; (40054c <sysclk_init+0x4c>)
  40050e:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400510:	4c0f      	ldr	r4, [pc, #60]	; (400550 <sysclk_init+0x50>)
  400512:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  400514:	2800      	cmp	r0, #0
  400516:	d0fc      	beq.n	400512 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400518:	4b0e      	ldr	r3, [pc, #56]	; (400554 <sysclk_init+0x54>)
  40051a:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  40051c:	4a0e      	ldr	r2, [pc, #56]	; (400558 <sysclk_init+0x58>)
  40051e:	4b0f      	ldr	r3, [pc, #60]	; (40055c <sysclk_init+0x5c>)
  400520:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  400522:	4c0f      	ldr	r4, [pc, #60]	; (400560 <sysclk_init+0x60>)
  400524:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400526:	2800      	cmp	r0, #0
  400528:	d0fc      	beq.n	400524 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  40052a:	2002      	movs	r0, #2
  40052c:	4b0d      	ldr	r3, [pc, #52]	; (400564 <sysclk_init+0x64>)
  40052e:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400530:	2000      	movs	r0, #0
  400532:	4b0d      	ldr	r3, [pc, #52]	; (400568 <sysclk_init+0x68>)
  400534:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400536:	4b0d      	ldr	r3, [pc, #52]	; (40056c <sysclk_init+0x6c>)
  400538:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  40053a:	4802      	ldr	r0, [pc, #8]	; (400544 <sysclk_init+0x44>)
  40053c:	4b02      	ldr	r3, [pc, #8]	; (400548 <sysclk_init+0x48>)
  40053e:	4798      	blx	r3
  400540:	bd10      	pop	{r4, pc}
  400542:	bf00      	nop
  400544:	11e1a300 	.word	0x11e1a300
  400548:	00400fe5 	.word	0x00400fe5
  40054c:	00400bd9 	.word	0x00400bd9
  400550:	00400c2d 	.word	0x00400c2d
  400554:	00400c3d 	.word	0x00400c3d
  400558:	20183f01 	.word	0x20183f01
  40055c:	400e0600 	.word	0x400e0600
  400560:	00400c4d 	.word	0x00400c4d
  400564:	00400b35 	.word	0x00400b35
  400568:	00400b71 	.word	0x00400b71
  40056c:	00400ed5 	.word	0x00400ed5

00400570 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
  400570:	b990      	cbnz	r0, 400598 <_read+0x28>
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  400572:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400576:	460c      	mov	r4, r1
  400578:	4690      	mov	r8, r2

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  40057a:	2a00      	cmp	r2, #0
  40057c:	dd0f      	ble.n	40059e <_read+0x2e>
  40057e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  400580:	4e08      	ldr	r6, [pc, #32]	; (4005a4 <_read+0x34>)
  400582:	4d09      	ldr	r5, [pc, #36]	; (4005a8 <_read+0x38>)
  400584:	6830      	ldr	r0, [r6, #0]
  400586:	4621      	mov	r1, r4
  400588:	682b      	ldr	r3, [r5, #0]
  40058a:	4798      	blx	r3
		ptr++;
  40058c:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  40058e:	42a7      	cmp	r7, r4
  400590:	d1f8      	bne.n	400584 <_read+0x14>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
  400592:	4640      	mov	r0, r8
  400594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
  400598:	f04f 30ff 	mov.w	r0, #4294967295
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
  40059c:	4770      	bx	lr

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  40059e:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
  4005a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4005a4:	2040094c 	.word	0x2040094c
  4005a8:	20400944 	.word	0x20400944

004005ac <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  4005ac:	3801      	subs	r0, #1
  4005ae:	2802      	cmp	r0, #2
  4005b0:	d815      	bhi.n	4005de <_write+0x32>
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  4005b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4005b6:	460e      	mov	r6, r1
  4005b8:	4614      	mov	r4, r2

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4005ba:	b19a      	cbz	r2, 4005e4 <_write+0x38>
  4005bc:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  4005be:	f8df 8038 	ldr.w	r8, [pc, #56]	; 4005f8 <_write+0x4c>
  4005c2:	4f0c      	ldr	r7, [pc, #48]	; (4005f4 <_write+0x48>)
  4005c4:	f8d8 0000 	ldr.w	r0, [r8]
  4005c8:	f815 1b01 	ldrb.w	r1, [r5], #1
  4005cc:	683b      	ldr	r3, [r7, #0]
  4005ce:	4798      	blx	r3
  4005d0:	2800      	cmp	r0, #0
  4005d2:	db0a      	blt.n	4005ea <_write+0x3e>
  4005d4:	1ba8      	subs	r0, r5, r6

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4005d6:	3c01      	subs	r4, #1
  4005d8:	d1f4      	bne.n	4005c4 <_write+0x18>
  4005da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
  4005de:	f04f 30ff 	mov.w	r0, #4294967295
			return -1;
		}
		++nChars;
	}
	return nChars;
}
  4005e2:	4770      	bx	lr

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4005e4:	2000      	movs	r0, #0
  4005e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
  4005ea:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  4005ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4005f2:	bf00      	nop
  4005f4:	20400948 	.word	0x20400948
  4005f8:	2040094c 	.word	0x2040094c

004005fc <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  4005fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  4005fe:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400602:	4b57      	ldr	r3, [pc, #348]	; (400760 <board_init+0x164>)
  400604:	605a      	str	r2, [r3, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  400606:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  40060a:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  40060e:	4b55      	ldr	r3, [pc, #340]	; (400764 <board_init+0x168>)
  400610:	2200      	movs	r2, #0
  400612:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  400616:	695a      	ldr	r2, [r3, #20]
  400618:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  40061c:	615a      	str	r2, [r3, #20]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  40061e:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  400622:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  400626:	f8d3 6080 	ldr.w	r6, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  40062a:	f3c6 354e 	ubfx	r5, r6, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  40062e:	f006 0707 	and.w	r7, r6, #7
  400632:	3704      	adds	r7, #4
    ways    = CCSIDR_WAYS(ccsidr);
  400634:	f3c6 06c9 	ubfx	r6, r6, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  400638:	fab6 f086 	clz	r0, r6
    wshift  = __CLZ(ways) & 0x1f;
  40063c:	f000 001f 	and.w	r0, r0, #31
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  400640:	f3bf 8f4f 	dsb	sy

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  400644:	461c      	mov	r4, r3
    wshift  = __CLZ(ways) & 0x1f;

    __DSB();

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
  400646:	4633      	mov	r3, r6
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
  400648:	fa05 f107 	lsl.w	r1, r5, r7
  40064c:	fa03 f200 	lsl.w	r2, r3, r0
  400650:	430a      	orrs	r2, r1
              SCB->DCISW = sw;
  400652:	f8c4 2260 	str.w	r2, [r4, #608]	; 0x260
            } while(tmpways--);
  400656:	3b01      	subs	r3, #1
  400658:	f1b3 3fff 	cmp.w	r3, #4294967295
  40065c:	d1f6      	bne.n	40064c <board_init+0x50>
        } while(sets--);
  40065e:	3d01      	subs	r5, #1
  400660:	f1b5 3fff 	cmp.w	r5, #4294967295
  400664:	d1ef      	bne.n	400646 <board_init+0x4a>
  400666:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  40066a:	4b3e      	ldr	r3, [pc, #248]	; (400764 <board_init+0x168>)
  40066c:	695a      	ldr	r2, [r3, #20]
  40066e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  400672:	615a      	str	r2, [r3, #20]
  400674:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  400678:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  40067c:	4a3a      	ldr	r2, [pc, #232]	; (400768 <board_init+0x16c>)
  40067e:	493b      	ldr	r1, [pc, #236]	; (40076c <board_init+0x170>)
  400680:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400682:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  400686:	6051      	str	r1, [r2, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  400688:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  40068c:	f3bf 8f6f 	isb	sy
static inline void tcm_disable(void) 
{

	__DSB();
	__ISB();
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  400690:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  400694:	f022 0201 	bic.w	r2, r2, #1
  400698:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  40069c:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  4006a0:	f022 0201 	bic.w	r2, r2, #1
  4006a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  4006a8:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  4006ac:	f3bf 8f6f 	isb	sy
  4006b0:	200a      	movs	r0, #10
  4006b2:	4c2f      	ldr	r4, [pc, #188]	; (400770 <board_init+0x174>)
  4006b4:	47a0      	blx	r4
  4006b6:	200b      	movs	r0, #11
  4006b8:	47a0      	blx	r4
  4006ba:	200c      	movs	r0, #12
  4006bc:	47a0      	blx	r4
  4006be:	2010      	movs	r0, #16
  4006c0:	47a0      	blx	r4
  4006c2:	2011      	movs	r0, #17
  4006c4:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4006c6:	4b2b      	ldr	r3, [pc, #172]	; (400774 <board_init+0x178>)
  4006c8:	f44f 7280 	mov.w	r2, #256	; 0x100
  4006cc:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4006ce:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4006d2:	631a      	str	r2, [r3, #48]	; 0x30
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4006d4:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  4006d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4006dc:	615a      	str	r2, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4006de:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
  4006e2:	665a      	str	r2, [r3, #100]	; 0x64

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  4006e4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  4006e8:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
  4006ea:	621a      	str	r2, [r3, #32]

	if (mode & IOPORT_MODE_DEBOUNCE) {
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
#else
		base->PIO_IFSCER = mask;
  4006ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  4006f0:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4006f2:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  4006f6:	6719      	str	r1, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  4006f8:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4006fa:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  4006fe:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  400700:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  400704:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  400708:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  40070c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400710:	661a      	str	r2, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  400712:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  400716:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  400718:	625a      	str	r2, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  40071a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  40071e:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400720:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  400724:	6719      	str	r1, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  400726:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400728:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  40072c:	6759      	str	r1, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40072e:	605a      	str	r2, [r3, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  400730:	4a11      	ldr	r2, [pc, #68]	; (400778 <board_init+0x17c>)
  400732:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  400736:	f043 0310 	orr.w	r3, r3, #16
  40073a:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  40073e:	4b0f      	ldr	r3, [pc, #60]	; (40077c <board_init+0x180>)
  400740:	2210      	movs	r2, #16
  400742:	661a      	str	r2, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  400744:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  400748:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  40074a:	625a      	str	r2, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  40074c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
  400750:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400752:	4311      	orrs	r1, r2
  400754:	6719      	str	r1, [r3, #112]	; 0x70
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
  400756:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400758:	4311      	orrs	r1, r2
  40075a:	6759      	str	r1, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40075c:	605a      	str	r2, [r3, #4]
  40075e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400760:	400e1850 	.word	0x400e1850
  400764:	e000ed00 	.word	0xe000ed00
  400768:	400e0c00 	.word	0x400e0c00
  40076c:	5a00080c 	.word	0x5a00080c
  400770:	00400c5d 	.word	0x00400c5d
  400774:	400e1200 	.word	0x400e1200
  400778:	40088000 	.word	0x40088000
  40077c:	400e1000 	.word	0x400e1000

00400780 <afec_process_callback>:
 * \brief Call the callback function if the corresponding interrupt is asserted
 *
 * \param afec  Base address of the AFEC.
 */
static void afec_process_callback(Afec *const afec)
{
  400780:	b570      	push	{r4, r5, r6, lr}
  400782:	b082      	sub	sp, #8
 *
 * \return The interrupt status value.
 */
static inline uint32_t afec_get_interrupt_status(Afec *const afec)
{
	return afec->AFEC_ISR;
  400784:	6b02      	ldr	r2, [r0, #48]	; 0x30
 *
 * \return The interrupt mask value.
 */
static inline uint32_t afec_get_interrupt_mask(Afec *const afec)
{
	return afec->AFEC_IMR;
  400786:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	volatile uint32_t status;
	uint32_t cnt, inst_num;

	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
  400788:	4013      	ands	r3, r2
  40078a:	9301      	str	r3, [sp, #4]
	inst_num = afec_find_inst_num(afec);

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  40078c:	2400      	movs	r4, #0
 * \param source   Interrupt source number
 */
static void afec_interrupt(uint8_t inst_num,
		enum afec_interrupt_source source)
{
	if (afec_callback_pointer[inst_num][source]) {
  40078e:	4e1a      	ldr	r6, [pc, #104]	; (4007f8 <afec_process_callback+0x78>)
  400790:	4d1a      	ldr	r5, [pc, #104]	; (4007fc <afec_process_callback+0x7c>)
  400792:	42a8      	cmp	r0, r5
  400794:	bf14      	ite	ne
  400796:	2000      	movne	r0, #0
  400798:	2001      	moveq	r0, #1
  40079a:	0105      	lsls	r5, r0, #4

	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
	inst_num = afec_find_inst_num(afec);

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
		if (cnt < AFEC_INTERRUPT_DATA_READY) {
  40079c:	2c0b      	cmp	r4, #11
  40079e:	d80a      	bhi.n	4007b6 <afec_process_callback+0x36>
				if (status & (1 << cnt)) {
					afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
				}
			}
		#elif defined __SAM4E8E__  || defined __SAM4E16E__ || SAMV71 || SAMV70 || SAMS70 || SAME70
			if (status & (1 << cnt)) {
  4007a0:	9a01      	ldr	r2, [sp, #4]
  4007a2:	2301      	movs	r3, #1
  4007a4:	40a3      	lsls	r3, r4
  4007a6:	4213      	tst	r3, r2
  4007a8:	d020      	beq.n	4007ec <afec_process_callback+0x6c>
 * \param source   Interrupt source number
 */
static void afec_interrupt(uint8_t inst_num,
		enum afec_interrupt_source source)
{
	if (afec_callback_pointer[inst_num][source]) {
  4007aa:	192b      	adds	r3, r5, r4
  4007ac:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  4007b0:	b1e3      	cbz	r3, 4007ec <afec_process_callback+0x6c>
		afec_callback_pointer[inst_num][source]();
  4007b2:	4798      	blx	r3
  4007b4:	e01a      	b.n	4007ec <afec_process_callback+0x6c>
		#elif defined __SAM4E8E__  || defined __SAM4E16E__ || SAMV71 || SAMV70 || SAMS70 || SAME70
			if (status & (1 << cnt)) {
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		#endif
		} else if (cnt < AFEC_INTERRUPT_TEMP_CHANGE) {
  4007b6:	2c0e      	cmp	r4, #14
  4007b8:	d80c      	bhi.n	4007d4 <afec_process_callback+0x54>
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1))) {
  4007ba:	9a01      	ldr	r2, [sp, #4]
  4007bc:	f104 010c 	add.w	r1, r4, #12
  4007c0:	2301      	movs	r3, #1
  4007c2:	408b      	lsls	r3, r1
  4007c4:	4213      	tst	r3, r2
  4007c6:	d011      	beq.n	4007ec <afec_process_callback+0x6c>
 * \param source   Interrupt source number
 */
static void afec_interrupt(uint8_t inst_num,
		enum afec_interrupt_source source)
{
	if (afec_callback_pointer[inst_num][source]) {
  4007c8:	192b      	adds	r3, r5, r4
  4007ca:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  4007ce:	b16b      	cbz	r3, 4007ec <afec_process_callback+0x6c>
		afec_callback_pointer[inst_num][source]();
  4007d0:	4798      	blx	r3
  4007d2:	e00b      	b.n	4007ec <afec_process_callback+0x6c>
		} else if (cnt < AFEC_INTERRUPT_TEMP_CHANGE) {
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1))) {
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		} else {
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1 + AFEC_INTERRUPT_GAP2))) {
  4007d4:	9a01      	ldr	r2, [sp, #4]
  4007d6:	f104 010f 	add.w	r1, r4, #15
  4007da:	2301      	movs	r3, #1
  4007dc:	408b      	lsls	r3, r1
  4007de:	4213      	tst	r3, r2
  4007e0:	d004      	beq.n	4007ec <afec_process_callback+0x6c>
 * \param source   Interrupt source number
 */
static void afec_interrupt(uint8_t inst_num,
		enum afec_interrupt_source source)
{
	if (afec_callback_pointer[inst_num][source]) {
  4007e2:	192b      	adds	r3, r5, r4
  4007e4:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  4007e8:	b103      	cbz	r3, 4007ec <afec_process_callback+0x6c>
		afec_callback_pointer[inst_num][source]();
  4007ea:	4798      	blx	r3
	uint32_t cnt, inst_num;

	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
	inst_num = afec_find_inst_num(afec);

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  4007ec:	3401      	adds	r4, #1
  4007ee:	2c10      	cmp	r4, #16
  4007f0:	d1d4      	bne.n	40079c <afec_process_callback+0x1c>
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1 + AFEC_INTERRUPT_GAP2))) {
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		}
	}
}
  4007f2:	b002      	add	sp, #8
  4007f4:	bd70      	pop	{r4, r5, r6, pc}
  4007f6:	bf00      	nop
  4007f8:	20400950 	.word	0x20400950
  4007fc:	40064000 	.word	0x40064000

00400800 <afec_ch_set_config>:
 * \param channel The channel number
 * \param config   Configuration for the AFEC channel
 */
void afec_ch_set_config(Afec *const afec, const enum afec_channel_num channel,
		struct afec_ch_config *config)
{
  400800:	b430      	push	{r4, r5}
	afec_ch_sanity_check(afec, channel);
	uint32_t reg = 0;

	reg = afec->AFEC_DIFFR;
  400802:	6e04      	ldr	r4, [r0, #96]	; 0x60
	reg &= ~(0x1u << channel);
  400804:	2301      	movs	r3, #1
  400806:	408b      	lsls	r3, r1
  400808:	ea24 0403 	bic.w	r4, r4, r3
	reg |= (config->diff) ? (0x1u << channel) : 0;
  40080c:	7815      	ldrb	r5, [r2, #0]
  40080e:	2d00      	cmp	r5, #0
  400810:	bf08      	it	eq
  400812:	2300      	moveq	r3, #0
  400814:	4323      	orrs	r3, r4
	afec->AFEC_DIFFR = reg;
  400816:	6603      	str	r3, [r0, #96]	; 0x60

	reg = afec->AFEC_CGR;
  400818:	6d44      	ldr	r4, [r0, #84]	; 0x54
	reg &= ~(0x03u << (2 * channel));
  40081a:	004d      	lsls	r5, r1, #1
  40081c:	2103      	movs	r1, #3
  40081e:	40a9      	lsls	r1, r5
  400820:	ea24 0301 	bic.w	r3, r4, r1
	reg |= (config->gain) << (2 * channel);
  400824:	7851      	ldrb	r1, [r2, #1]
  400826:	40a9      	lsls	r1, r5
  400828:	4319      	orrs	r1, r3
	afec->AFEC_CGR = reg;
  40082a:	6541      	str	r1, [r0, #84]	; 0x54
}
  40082c:	bc30      	pop	{r4, r5}
  40082e:	4770      	bx	lr

00400830 <afec_temp_sensor_set_config>:
{
	Assert(afec == AFEC0);

	uint32_t reg = 0;

	reg = ((config->rctc) ? AFEC_TEMPMR_RTCT : 0) | (config->mode);
  400830:	784a      	ldrb	r2, [r1, #1]
  400832:	780b      	ldrb	r3, [r1, #0]
  400834:	4313      	orrs	r3, r2
	afec->AFEC_TEMPMR = reg;
  400836:	6703      	str	r3, [r0, #112]	; 0x70

	afec->AFEC_TEMPCWR = AFEC_TEMPCWR_TLOWTHRES(config->low_threshold) |
  400838:	888a      	ldrh	r2, [r1, #4]
  40083a:	884b      	ldrh	r3, [r1, #2]
  40083c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  400840:	6743      	str	r3, [r0, #116]	; 0x74
  400842:	4770      	bx	lr

00400844 <afec_get_config_defaults>:
void afec_get_config_defaults(struct afec_config *const cfg)
{
	/* Sanity check argument. */
	Assert(cfg);

	cfg->resolution = AFEC_12_BITS;
  400844:	2200      	movs	r2, #0
  400846:	6002      	str	r2, [r0, #0]
	cfg->mck = sysclk_get_cpu_hz();
  400848:	4b08      	ldr	r3, [pc, #32]	; (40086c <afec_get_config_defaults+0x28>)
  40084a:	6043      	str	r3, [r0, #4]
		cfg->afec_clock = 6000000UL;
  40084c:	4b08      	ldr	r3, [pc, #32]	; (400870 <afec_get_config_defaults+0x2c>)
  40084e:	6083      	str	r3, [r0, #8]
		cfg->startup_time = AFEC_STARTUP_TIME_4;
  400850:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  400854:	60c3      	str	r3, [r0, #12]
	#if !(SAMV71 || SAMV70 || SAME70 || SAMS70)
		cfg->settling_time = AFEC_SETTLING_TIME_0;
	#endif	
		cfg->tracktim = 2;
  400856:	2302      	movs	r3, #2
  400858:	7403      	strb	r3, [r0, #16]
		cfg->transfer = 1;
  40085a:	2301      	movs	r3, #1
  40085c:	7443      	strb	r3, [r0, #17]
		cfg->anach = true;
  40085e:	7483      	strb	r3, [r0, #18]
		cfg->useq = false;
  400860:	74c2      	strb	r2, [r0, #19]
		cfg->tag = true;
  400862:	7503      	strb	r3, [r0, #20]
		cfg->stm = true;
  400864:	7543      	strb	r3, [r0, #21]
		cfg->ibctl = 1;
  400866:	7583      	strb	r3, [r0, #22]
  400868:	4770      	bx	lr
  40086a:	bf00      	nop
  40086c:	11e1a300 	.word	0x11e1a300
  400870:	005b8d80 	.word	0x005b8d80

00400874 <afec_ch_get_config_defaults>:
void afec_ch_get_config_defaults(struct afec_ch_config *const cfg)
{
	/*Sanity check argument. */
	Assert(cfg);

	cfg->diff = false;
  400874:	2300      	movs	r3, #0
  400876:	7003      	strb	r3, [r0, #0]
   	cfg->gain = AFEC_GAINVALUE_1;
  400878:	2301      	movs	r3, #1
  40087a:	7043      	strb	r3, [r0, #1]
  40087c:	4770      	bx	lr
  40087e:	bf00      	nop

00400880 <afec_temp_sensor_get_config_defaults>:
		struct afec_temp_sensor_config *const cfg)
{
	/*Sanity check argument. */
	Assert(cfg);

	cfg->rctc = false;
  400880:	2300      	movs	r3, #0
  400882:	7003      	strb	r3, [r0, #0]
	cfg->mode= AFEC_TEMP_CMP_MODE_2;
  400884:	2320      	movs	r3, #32
  400886:	7043      	strb	r3, [r0, #1]
	cfg->low_threshold= 0xFF;
  400888:	23ff      	movs	r3, #255	; 0xff
  40088a:	8043      	strh	r3, [r0, #2]
	cfg->high_threshold= 0xFFF;
  40088c:	f640 73ff 	movw	r3, #4095	; 0xfff
  400890:	8083      	strh	r3, [r0, #4]
  400892:	4770      	bx	lr

00400894 <afec_init>:
 *
 * \return The interrupt status value.
 */
static inline uint32_t afec_get_interrupt_status(Afec *const afec)
{
	return afec->AFEC_ISR;
  400894:	6b03      	ldr	r3, [r0, #48]	; 0x30
enum status_code afec_init(Afec *const afec, struct afec_config *config)
{
	Assert(afec);
	Assert(config);

	if ((afec_get_interrupt_status(afec) & AFEC_ISR_DRDY) == AFEC_ISR_DRDY) {
  400896:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
  40089a:	d150      	bne.n	40093e <afec_init+0xaa>
 *
 * \retval STATUS_OK  Initialization is finished.
 * \retval STATUS_ERR_BUSY  Initialization failed.
 */
enum status_code afec_init(Afec *const afec, struct afec_config *config)
{
  40089c:	b410      	push	{r4}
	if ((afec_get_interrupt_status(afec) & AFEC_ISR_DRDY) == AFEC_ISR_DRDY) {
		return STATUS_ERR_BUSY;
	}

	/* Reset and configure the AFEC module */
	afec->AFEC_CR = AFEC_CR_SWRST;
  40089e:	2201      	movs	r2, #1
  4008a0:	6002      	str	r2, [r0, #0]
 */
static void afec_set_config(Afec *const afec, struct afec_config *config)
{
	uint32_t reg = 0;

	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  4008a2:	7cca      	ldrb	r2, [r1, #19]
  4008a4:	2a00      	cmp	r2, #0
  4008a6:	bf18      	it	ne
  4008a8:	f04f 4300 	movne.w	r3, #2147483648	; 0x80000000
  4008ac:	684a      	ldr	r2, [r1, #4]
  4008ae:	688c      	ldr	r4, [r1, #8]
  4008b0:	fbb2 f2f4 	udiv	r2, r2, r4
  4008b4:	3a01      	subs	r2, #1
  4008b6:	0212      	lsls	r2, r2, #8
  4008b8:	b292      	uxth	r2, r2
  4008ba:	68cc      	ldr	r4, [r1, #12]
  4008bc:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
  4008c0:	4322      	orrs	r2, r4
  4008c2:	7c0c      	ldrb	r4, [r1, #16]
  4008c4:	0624      	lsls	r4, r4, #24
  4008c6:	f004 6470 	and.w	r4, r4, #251658240	; 0xf000000
  4008ca:	4322      	orrs	r2, r4
  4008cc:	7c4c      	ldrb	r4, [r1, #17]
  4008ce:	0724      	lsls	r4, r4, #28
  4008d0:	f004 5440 	and.w	r4, r4, #805306368	; 0x30000000
  4008d4:	4322      	orrs	r2, r4
  4008d6:	4313      	orrs	r3, r2
		#endif
			AFEC_MR_TRACKTIM(config->tracktim) |
			AFEC_MR_TRANSFER(config->transfer) |
			(config->startup_time);

	afec->AFEC_MR = reg;
  4008d8:	6043      	str	r3, [r0, #4]

	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  4008da:	7d0b      	ldrb	r3, [r1, #20]
  4008dc:	2b00      	cmp	r3, #0
  4008de:	bf14      	ite	ne
  4008e0:	f04f 7280 	movne.w	r2, #16777216	; 0x1000000
  4008e4:	2200      	moveq	r2, #0
  4008e6:	680b      	ldr	r3, [r1, #0]
  4008e8:	431a      	orrs	r2, r3
			(config->resolution) |
			(config->stm ? AFEC_EMR_STM : 0);
  4008ea:	7d4b      	ldrb	r3, [r1, #21]
  4008ec:	2b00      	cmp	r3, #0
  4008ee:	bf14      	ite	ne
  4008f0:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
  4008f4:	2300      	moveq	r3, #0
			(config->startup_time);

	afec->AFEC_MR = reg;

	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
			(config->resolution) |
  4008f6:	4313      	orrs	r3, r2
			AFEC_MR_TRANSFER(config->transfer) |
			(config->startup_time);

	afec->AFEC_MR = reg;

	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  4008f8:	6083      	str	r3, [r0, #8]
			(config->resolution) |
			(config->stm ? AFEC_EMR_STM : 0);
  #if (SAMV71 || SAMV70 || SAME70 || SAMS70)
	afec->AFEC_ACR = AFEC_ACR_IBCTL(config->ibctl) | AFEC_ACR_PGA0EN | AFEC_ACR_PGA1EN;
  4008fa:	7d8b      	ldrb	r3, [r1, #22]
  4008fc:	021b      	lsls	r3, r3, #8
  4008fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
  400902:	f043 030c 	orr.w	r3, r3, #12
  400906:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
	/* Reset and configure the AFEC module */
	afec->AFEC_CR = AFEC_CR_SWRST;
	afec_set_config(afec, config);

	uint32_t i;
	if(afec == AFEC0) {
  40090a:	4b10      	ldr	r3, [pc, #64]	; (40094c <afec_init+0xb8>)
  40090c:	4298      	cmp	r0, r3
  40090e:	d109      	bne.n	400924 <afec_init+0x90>
  400910:	4b0f      	ldr	r3, [pc, #60]	; (400950 <afec_init+0xbc>)
  400912:	f103 0140 	add.w	r1, r3, #64	; 0x40
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
			afec_callback_pointer[0][i] = 0;
  400916:	2200      	movs	r2, #0
  400918:	f843 2f04 	str.w	r2, [r3, #4]!
	afec->AFEC_CR = AFEC_CR_SWRST;
	afec_set_config(afec, config);

	uint32_t i;
	if(afec == AFEC0) {
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  40091c:	428b      	cmp	r3, r1
  40091e:	d1fb      	bne.n	400918 <afec_init+0x84>
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
			afec_callback_pointer[1][i] = 0;
		}
	}

	return STATUS_OK;
  400920:	2000      	movs	r0, #0
  400922:	e00f      	b.n	400944 <afec_init+0xb0>
	if(afec == AFEC0) {
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
			afec_callback_pointer[0][i] = 0;
		}
	}
	if(afec == AFEC1) {
  400924:	4b0b      	ldr	r3, [pc, #44]	; (400954 <afec_init+0xc0>)
  400926:	4298      	cmp	r0, r3
  400928:	d10b      	bne.n	400942 <afec_init+0xae>
  40092a:	4b0b      	ldr	r3, [pc, #44]	; (400958 <afec_init+0xc4>)
  40092c:	f103 0140 	add.w	r1, r3, #64	; 0x40
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
			afec_callback_pointer[1][i] = 0;
  400930:	2200      	movs	r2, #0
  400932:	f843 2f04 	str.w	r2, [r3, #4]!
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
			afec_callback_pointer[0][i] = 0;
		}
	}
	if(afec == AFEC1) {
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  400936:	428b      	cmp	r3, r1
  400938:	d1fb      	bne.n	400932 <afec_init+0x9e>
			afec_callback_pointer[1][i] = 0;
		}
	}

	return STATUS_OK;
  40093a:	2000      	movs	r0, #0
  40093c:	e002      	b.n	400944 <afec_init+0xb0>
{
	Assert(afec);
	Assert(config);

	if ((afec_get_interrupt_status(afec) & AFEC_ISR_DRDY) == AFEC_ISR_DRDY) {
		return STATUS_ERR_BUSY;
  40093e:	2019      	movs	r0, #25
			afec_callback_pointer[1][i] = 0;
		}
	}

	return STATUS_OK;
}
  400940:	4770      	bx	lr
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
			afec_callback_pointer[1][i] = 0;
		}
	}

	return STATUS_OK;
  400942:	2000      	movs	r0, #0
}
  400944:	f85d 4b04 	ldr.w	r4, [sp], #4
  400948:	4770      	bx	lr
  40094a:	bf00      	nop
  40094c:	4003c000 	.word	0x4003c000
  400950:	2040094c 	.word	0x2040094c
  400954:	40064000 	.word	0x40064000
  400958:	2040098c 	.word	0x2040098c

0040095c <afec_enable_interrupt>:
 * \param interrupt_source Interrupts to be enabled.
 */
void afec_enable_interrupt(Afec *const afec,
		enum afec_interrupt_source interrupt_source)
{
	if (interrupt_source == AFEC_INTERRUPT_ALL) {
  40095c:	4b0c      	ldr	r3, [pc, #48]	; (400990 <afec_enable_interrupt+0x34>)
  40095e:	4299      	cmp	r1, r3
  400960:	d101      	bne.n	400966 <afec_enable_interrupt+0xa>
		afec->AFEC_IER = AFEC_INTERRUPT_ALL;
  400962:	6243      	str	r3, [r0, #36]	; 0x24
		return;
  400964:	4770      	bx	lr
	}

	if (interrupt_source < AFEC_INTERRUPT_DATA_READY) {
  400966:	290b      	cmp	r1, #11
  400968:	d809      	bhi.n	40097e <afec_enable_interrupt+0x22>
	  #if (SAMV71 || SAMV70 || SAME70 || SAMS70)
		if (interrupt_source == AFEC_INTERRUPT_EOC_11) {
  40096a:	d103      	bne.n	400974 <afec_enable_interrupt+0x18>
			afec->AFEC_IER = 1 << AFEC_TEMP_INT_SOURCE_NUM;
  40096c:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400970:	6243      	str	r3, [r0, #36]	; 0x24
  400972:	4770      	bx	lr
	  #else
		if (interrupt_source == AFEC_INTERRUPT_EOC_15) {
			afec->AFEC_IER = 1 << AFEC_TEMP_INT_SOURCE_NUM;	  
	  #endif 
		} else {
			afec->AFEC_IER = 1 << interrupt_source;
  400974:	2301      	movs	r3, #1
  400976:	fa03 f101 	lsl.w	r1, r3, r1
  40097a:	6241      	str	r1, [r0, #36]	; 0x24
  40097c:	4770      	bx	lr
		}
	} else if (interrupt_source < AFEC_INTERRUPT_TEMP_CHANGE) {
  40097e:	290e      	cmp	r1, #14
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1);
  400980:	bf94      	ite	ls
  400982:	310c      	addls	r1, #12
	} else {
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1
  400984:	310f      	addhi	r1, #15
  400986:	2301      	movs	r3, #1
  400988:	fa03 f101 	lsl.w	r1, r3, r1
  40098c:	6241      	str	r1, [r0, #36]	; 0x24
  40098e:	4770      	bx	lr
  400990:	47000fff 	.word	0x47000fff

00400994 <afec_set_callback>:
 * \param callback  Callback function pointer
 * \param irq_level Interrupt level
 */
void afec_set_callback(Afec *const afec, enum afec_interrupt_source source,
		afec_callback_t callback, uint8_t irq_level)
{
  400994:	b538      	push	{r3, r4, r5, lr}
	Assert(afec);
	Assert(callback);

	uint32_t i = afec_find_inst_num(afec);
	afec_callback_pointer[i][source] = callback;
  400996:	4c11      	ldr	r4, [pc, #68]	; (4009dc <afec_set_callback+0x48>)
  400998:	42a0      	cmp	r0, r4
  40099a:	bf0c      	ite	eq
  40099c:	2410      	moveq	r4, #16
  40099e:	2400      	movne	r4, #0
  4009a0:	440c      	add	r4, r1
  4009a2:	4d0f      	ldr	r5, [pc, #60]	; (4009e0 <afec_set_callback+0x4c>)
  4009a4:	f845 2024 	str.w	r2, [r5, r4, lsl #2]
	if (!i) {
  4009a8:	d00a      	beq.n	4009c0 <afec_set_callback+0x2c>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4009aa:	4a0e      	ldr	r2, [pc, #56]	; (4009e4 <afec_set_callback+0x50>)
  4009ac:	f04f 5400 	mov.w	r4, #536870912	; 0x20000000
  4009b0:	f8c2 4180 	str.w	r4, [r2, #384]	; 0x180
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4009b4:	015b      	lsls	r3, r3, #5
  4009b6:	b2db      	uxtb	r3, r3
  4009b8:	f882 331d 	strb.w	r3, [r2, #797]	; 0x31d
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4009bc:	6014      	str	r4, [r2, #0]
  4009be:	e009      	b.n	4009d4 <afec_set_callback+0x40>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4009c0:	4a08      	ldr	r2, [pc, #32]	; (4009e4 <afec_set_callback+0x50>)
  4009c2:	f44f 7480 	mov.w	r4, #256	; 0x100
  4009c6:	f8c2 4184 	str.w	r4, [r2, #388]	; 0x184
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4009ca:	015b      	lsls	r3, r3, #5
  4009cc:	b2db      	uxtb	r3, r3
  4009ce:	f882 3328 	strb.w	r3, [r2, #808]	; 0x328
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4009d2:	6054      	str	r4, [r2, #4]
		irq_register_handler(AFEC0_IRQn, irq_level);
	} else if (i == 1) {
		irq_register_handler(AFEC1_IRQn, irq_level);
	}
	/* Enable the specified interrupt source */
	afec_enable_interrupt(afec, source);
  4009d4:	4b04      	ldr	r3, [pc, #16]	; (4009e8 <afec_set_callback+0x54>)
  4009d6:	4798      	blx	r3
  4009d8:	bd38      	pop	{r3, r4, r5, pc}
  4009da:	bf00      	nop
  4009dc:	40064000 	.word	0x40064000
  4009e0:	20400950 	.word	0x20400950
  4009e4:	e000e100 	.word	0xe000e100
  4009e8:	0040095d 	.word	0x0040095d

004009ec <AFEC0_Handler>:

/**
 * \brief Interrupt handler for AFEC0.
 */
void AFEC0_Handler(void)
{
  4009ec:	b508      	push	{r3, lr}
	afec_process_callback(AFEC0);
  4009ee:	4802      	ldr	r0, [pc, #8]	; (4009f8 <AFEC0_Handler+0xc>)
  4009f0:	4b02      	ldr	r3, [pc, #8]	; (4009fc <AFEC0_Handler+0x10>)
  4009f2:	4798      	blx	r3
  4009f4:	bd08      	pop	{r3, pc}
  4009f6:	bf00      	nop
  4009f8:	4003c000 	.word	0x4003c000
  4009fc:	00400781 	.word	0x00400781

00400a00 <AFEC1_Handler>:

/**
 * \brief Interrupt handler for AFEC1.
 */
void AFEC1_Handler(void)
{
  400a00:	b508      	push	{r3, lr}
	afec_process_callback(AFEC1);
  400a02:	4802      	ldr	r0, [pc, #8]	; (400a0c <AFEC1_Handler+0xc>)
  400a04:	4b02      	ldr	r3, [pc, #8]	; (400a10 <AFEC1_Handler+0x10>)
  400a06:	4798      	blx	r3
  400a08:	bd08      	pop	{r3, pc}
  400a0a:	bf00      	nop
  400a0c:	40064000 	.word	0x40064000
  400a10:	00400781 	.word	0x00400781

00400a14 <afec_enable>:
 * \brief Enable AFEC Module.
 *
 * \param afec  Base address of the AFEC
 */
void afec_enable(Afec *const afec)
{
  400a14:	b500      	push	{lr}
  400a16:	b083      	sub	sp, #12
	Assert(afec);
	uint32_t pid;

	pid = afec_find_pid(afec);
	/* Enable peripheral clock. */
	pmc_enable_periph_clk(pid);
  400a18:	4b13      	ldr	r3, [pc, #76]	; (400a68 <afec_enable+0x54>)
  400a1a:	4298      	cmp	r0, r3
  400a1c:	bf0c      	ite	eq
  400a1e:	2028      	moveq	r0, #40	; 0x28
  400a20:	201d      	movne	r0, #29
  400a22:	4b12      	ldr	r3, [pc, #72]	; (400a6c <afec_enable+0x58>)
  400a24:	4798      	blx	r3
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  400a26:	4b12      	ldr	r3, [pc, #72]	; (400a70 <afec_enable+0x5c>)
  400a28:	789b      	ldrb	r3, [r3, #2]
  400a2a:	2bff      	cmp	r3, #255	; 0xff
  400a2c:	d100      	bne.n	400a30 <afec_enable+0x1c>
  400a2e:	e7fe      	b.n	400a2e <afec_enable+0x1a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400a30:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400a34:	fab3 f383 	clz	r3, r3
  400a38:	095b      	lsrs	r3, r3, #5
  400a3a:	9301      	str	r3, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  400a3c:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  400a3e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400a42:	2200      	movs	r2, #0
  400a44:	4b0b      	ldr	r3, [pc, #44]	; (400a74 <afec_enable+0x60>)
  400a46:	701a      	strb	r2, [r3, #0]
	return flags;
  400a48:	9901      	ldr	r1, [sp, #4]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
  400a4a:	4a09      	ldr	r2, [pc, #36]	; (400a70 <afec_enable+0x5c>)
  400a4c:	7893      	ldrb	r3, [r2, #2]
  400a4e:	3301      	adds	r3, #1
  400a50:	7093      	strb	r3, [r2, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  400a52:	b129      	cbz	r1, 400a60 <afec_enable+0x4c>
		cpu_irq_enable();
  400a54:	2201      	movs	r2, #1
  400a56:	4b07      	ldr	r3, [pc, #28]	; (400a74 <afec_enable+0x60>)
  400a58:	701a      	strb	r2, [r3, #0]
  400a5a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  400a5e:	b662      	cpsie	i
	sleepmgr_lock_mode(SLEEPMGR_SLEEP_WFI);
}
  400a60:	b003      	add	sp, #12
  400a62:	f85d fb04 	ldr.w	pc, [sp], #4
  400a66:	bf00      	nop
  400a68:	40064000 	.word	0x40064000
  400a6c:	00400c5d 	.word	0x00400c5d
  400a70:	2040093c 	.word	0x2040093c
  400a74:	20400000 	.word	0x20400000

00400a78 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  400a78:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  400a7a:	4770      	bx	lr

00400a7c <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400a7c:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  400a7e:	4770      	bx	lr

00400a80 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400a80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400a84:	4604      	mov	r4, r0
  400a86:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400a88:	4b0e      	ldr	r3, [pc, #56]	; (400ac4 <pio_handler_process+0x44>)
  400a8a:	4798      	blx	r3
  400a8c:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  400a8e:	4620      	mov	r0, r4
  400a90:	4b0d      	ldr	r3, [pc, #52]	; (400ac8 <pio_handler_process+0x48>)
  400a92:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400a94:	4005      	ands	r5, r0
  400a96:	d013      	beq.n	400ac0 <pio_handler_process+0x40>
  400a98:	4c0c      	ldr	r4, [pc, #48]	; (400acc <pio_handler_process+0x4c>)
  400a9a:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  400a9e:	6823      	ldr	r3, [r4, #0]
  400aa0:	4543      	cmp	r3, r8
  400aa2:	d108      	bne.n	400ab6 <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400aa4:	6861      	ldr	r1, [r4, #4]
  400aa6:	4229      	tst	r1, r5
  400aa8:	d005      	beq.n	400ab6 <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400aaa:	68e3      	ldr	r3, [r4, #12]
  400aac:	4640      	mov	r0, r8
  400aae:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  400ab0:	6863      	ldr	r3, [r4, #4]
  400ab2:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400ab6:	42b4      	cmp	r4, r6
  400ab8:	d002      	beq.n	400ac0 <pio_handler_process+0x40>
  400aba:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  400abc:	2d00      	cmp	r5, #0
  400abe:	d1ee      	bne.n	400a9e <pio_handler_process+0x1e>
  400ac0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400ac4:	00400a79 	.word	0x00400a79
  400ac8:	00400a7d 	.word	0x00400a7d
  400acc:	20400890 	.word	0x20400890

00400ad0 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400ad0:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  400ad2:	210a      	movs	r1, #10
  400ad4:	4801      	ldr	r0, [pc, #4]	; (400adc <PIOA_Handler+0xc>)
  400ad6:	4b02      	ldr	r3, [pc, #8]	; (400ae0 <PIOA_Handler+0x10>)
  400ad8:	4798      	blx	r3
  400ada:	bd08      	pop	{r3, pc}
  400adc:	400e0e00 	.word	0x400e0e00
  400ae0:	00400a81 	.word	0x00400a81

00400ae4 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400ae4:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  400ae6:	210b      	movs	r1, #11
  400ae8:	4801      	ldr	r0, [pc, #4]	; (400af0 <PIOB_Handler+0xc>)
  400aea:	4b02      	ldr	r3, [pc, #8]	; (400af4 <PIOB_Handler+0x10>)
  400aec:	4798      	blx	r3
  400aee:	bd08      	pop	{r3, pc}
  400af0:	400e1000 	.word	0x400e1000
  400af4:	00400a81 	.word	0x00400a81

00400af8 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400af8:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  400afa:	210c      	movs	r1, #12
  400afc:	4801      	ldr	r0, [pc, #4]	; (400b04 <PIOC_Handler+0xc>)
  400afe:	4b02      	ldr	r3, [pc, #8]	; (400b08 <PIOC_Handler+0x10>)
  400b00:	4798      	blx	r3
  400b02:	bd08      	pop	{r3, pc}
  400b04:	400e1200 	.word	0x400e1200
  400b08:	00400a81 	.word	0x00400a81

00400b0c <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  400b0c:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  400b0e:	2110      	movs	r1, #16
  400b10:	4801      	ldr	r0, [pc, #4]	; (400b18 <PIOD_Handler+0xc>)
  400b12:	4b02      	ldr	r3, [pc, #8]	; (400b1c <PIOD_Handler+0x10>)
  400b14:	4798      	blx	r3
  400b16:	bd08      	pop	{r3, pc}
  400b18:	400e1400 	.word	0x400e1400
  400b1c:	00400a81 	.word	0x00400a81

00400b20 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  400b20:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  400b22:	2111      	movs	r1, #17
  400b24:	4801      	ldr	r0, [pc, #4]	; (400b2c <PIOE_Handler+0xc>)
  400b26:	4b02      	ldr	r3, [pc, #8]	; (400b30 <PIOE_Handler+0x10>)
  400b28:	4798      	blx	r3
  400b2a:	bd08      	pop	{r3, pc}
  400b2c:	400e1600 	.word	0x400e1600
  400b30:	00400a81 	.word	0x00400a81

00400b34 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  400b34:	2803      	cmp	r0, #3
  400b36:	d007      	beq.n	400b48 <pmc_mck_set_division+0x14>
  400b38:	2804      	cmp	r0, #4
  400b3a:	d008      	beq.n	400b4e <pmc_mck_set_division+0x1a>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  400b3c:	2802      	cmp	r0, #2
  400b3e:	bf0c      	ite	eq
  400b40:	f44f 7280 	moveq.w	r2, #256	; 0x100
  400b44:	2200      	movne	r2, #0
  400b46:	e004      	b.n	400b52 <pmc_mck_set_division+0x1e>
			break;
		case 2:
			ul_div = PMC_MCKR_MDIV_PCK_DIV2;
			break;
		case 3:
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  400b48:	f44f 7240 	mov.w	r2, #768	; 0x300
			break;
  400b4c:	e001      	b.n	400b52 <pmc_mck_set_division+0x1e>
		case 4:
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  400b4e:	f44f 7200 	mov.w	r2, #512	; 0x200
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  400b52:	4906      	ldr	r1, [pc, #24]	; (400b6c <pmc_mck_set_division+0x38>)
  400b54:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  400b56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  400b5a:	4313      	orrs	r3, r2
			break;
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
  400b5c:	630b      	str	r3, [r1, #48]	; 0x30
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400b5e:	460a      	mov	r2, r1
  400b60:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400b62:	f013 0f08 	tst.w	r3, #8
  400b66:	d0fb      	beq.n	400b60 <pmc_mck_set_division+0x2c>
}
  400b68:	4770      	bx	lr
  400b6a:	bf00      	nop
  400b6c:	400e0600 	.word	0x400e0600

00400b70 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400b70:	4a18      	ldr	r2, [pc, #96]	; (400bd4 <pmc_switch_mck_to_pllack+0x64>)
  400b72:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400b74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400b78:	4318      	orrs	r0, r3
  400b7a:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400b7c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400b7e:	f013 0f08 	tst.w	r3, #8
  400b82:	d003      	beq.n	400b8c <pmc_switch_mck_to_pllack+0x1c>
  400b84:	e009      	b.n	400b9a <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400b86:	3b01      	subs	r3, #1
  400b88:	d103      	bne.n	400b92 <pmc_switch_mck_to_pllack+0x22>
  400b8a:	e01e      	b.n	400bca <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400b8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400b90:	4910      	ldr	r1, [pc, #64]	; (400bd4 <pmc_switch_mck_to_pllack+0x64>)
  400b92:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400b94:	f012 0f08 	tst.w	r2, #8
  400b98:	d0f5      	beq.n	400b86 <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400b9a:	4a0e      	ldr	r2, [pc, #56]	; (400bd4 <pmc_switch_mck_to_pllack+0x64>)
  400b9c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400b9e:	f023 0303 	bic.w	r3, r3, #3
  400ba2:	f043 0302 	orr.w	r3, r3, #2
  400ba6:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400ba8:	6e90      	ldr	r0, [r2, #104]	; 0x68
  400baa:	f010 0008 	ands.w	r0, r0, #8
  400bae:	d004      	beq.n	400bba <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  400bb0:	2000      	movs	r0, #0
  400bb2:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
  400bb4:	3b01      	subs	r3, #1
  400bb6:	d103      	bne.n	400bc0 <pmc_switch_mck_to_pllack+0x50>
  400bb8:	e009      	b.n	400bce <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400bba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400bbe:	4905      	ldr	r1, [pc, #20]	; (400bd4 <pmc_switch_mck_to_pllack+0x64>)
  400bc0:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400bc2:	f012 0f08 	tst.w	r2, #8
  400bc6:	d0f5      	beq.n	400bb4 <pmc_switch_mck_to_pllack+0x44>
  400bc8:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  400bca:	2001      	movs	r0, #1
  400bcc:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  400bce:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400bd0:	4770      	bx	lr
  400bd2:	bf00      	nop
  400bd4:	400e0600 	.word	0x400e0600

00400bd8 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400bd8:	b138      	cbz	r0, 400bea <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400bda:	490e      	ldr	r1, [pc, #56]	; (400c14 <pmc_switch_mainck_to_xtal+0x3c>)
  400bdc:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400bde:	4a0e      	ldr	r2, [pc, #56]	; (400c18 <pmc_switch_mainck_to_xtal+0x40>)
  400be0:	401a      	ands	r2, r3
  400be2:	4b0e      	ldr	r3, [pc, #56]	; (400c1c <pmc_switch_mainck_to_xtal+0x44>)
  400be4:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400be6:	620b      	str	r3, [r1, #32]
  400be8:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400bea:	480a      	ldr	r0, [pc, #40]	; (400c14 <pmc_switch_mainck_to_xtal+0x3c>)
  400bec:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400bee:	0209      	lsls	r1, r1, #8
  400bf0:	b289      	uxth	r1, r1
  400bf2:	4a0b      	ldr	r2, [pc, #44]	; (400c20 <pmc_switch_mainck_to_xtal+0x48>)
  400bf4:	401a      	ands	r2, r3
  400bf6:	4b0b      	ldr	r3, [pc, #44]	; (400c24 <pmc_switch_mainck_to_xtal+0x4c>)
  400bf8:	4313      	orrs	r3, r2
  400bfa:	4319      	orrs	r1, r3
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400bfc:	6201      	str	r1, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400bfe:	4602      	mov	r2, r0
  400c00:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400c02:	f013 0f01 	tst.w	r3, #1
  400c06:	d0fb      	beq.n	400c00 <pmc_switch_mainck_to_xtal+0x28>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400c08:	4a02      	ldr	r2, [pc, #8]	; (400c14 <pmc_switch_mainck_to_xtal+0x3c>)
  400c0a:	6a11      	ldr	r1, [r2, #32]
  400c0c:	4b06      	ldr	r3, [pc, #24]	; (400c28 <pmc_switch_mainck_to_xtal+0x50>)
  400c0e:	430b      	orrs	r3, r1
  400c10:	6213      	str	r3, [r2, #32]
  400c12:	4770      	bx	lr
  400c14:	400e0600 	.word	0x400e0600
  400c18:	fec8fffc 	.word	0xfec8fffc
  400c1c:	01370002 	.word	0x01370002
  400c20:	ffc8fffc 	.word	0xffc8fffc
  400c24:	00370001 	.word	0x00370001
  400c28:	01370000 	.word	0x01370000

00400c2c <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400c2c:	4b02      	ldr	r3, [pc, #8]	; (400c38 <pmc_osc_is_ready_mainck+0xc>)
  400c2e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400c30:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400c34:	4770      	bx	lr
  400c36:	bf00      	nop
  400c38:	400e0600 	.word	0x400e0600

00400c3c <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400c3c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400c40:	4b01      	ldr	r3, [pc, #4]	; (400c48 <pmc_disable_pllack+0xc>)
  400c42:	629a      	str	r2, [r3, #40]	; 0x28
  400c44:	4770      	bx	lr
  400c46:	bf00      	nop
  400c48:	400e0600 	.word	0x400e0600

00400c4c <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400c4c:	4b02      	ldr	r3, [pc, #8]	; (400c58 <pmc_is_locked_pllack+0xc>)
  400c4e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400c50:	f000 0002 	and.w	r0, r0, #2
  400c54:	4770      	bx	lr
  400c56:	bf00      	nop
  400c58:	400e0600 	.word	0x400e0600

00400c5c <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  400c5c:	283f      	cmp	r0, #63	; 0x3f
  400c5e:	d81e      	bhi.n	400c9e <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  400c60:	281f      	cmp	r0, #31
  400c62:	d80c      	bhi.n	400c7e <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400c64:	4b11      	ldr	r3, [pc, #68]	; (400cac <pmc_enable_periph_clk+0x50>)
  400c66:	699a      	ldr	r2, [r3, #24]
  400c68:	2301      	movs	r3, #1
  400c6a:	4083      	lsls	r3, r0
  400c6c:	4393      	bics	r3, r2
  400c6e:	d018      	beq.n	400ca2 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  400c70:	2301      	movs	r3, #1
  400c72:	fa03 f000 	lsl.w	r0, r3, r0
  400c76:	4b0d      	ldr	r3, [pc, #52]	; (400cac <pmc_enable_periph_clk+0x50>)
  400c78:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  400c7a:	2000      	movs	r0, #0
  400c7c:	4770      	bx	lr
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  400c7e:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400c80:	4b0a      	ldr	r3, [pc, #40]	; (400cac <pmc_enable_periph_clk+0x50>)
  400c82:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  400c86:	2301      	movs	r3, #1
  400c88:	4083      	lsls	r3, r0
  400c8a:	4393      	bics	r3, r2
  400c8c:	d00b      	beq.n	400ca6 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  400c8e:	2301      	movs	r3, #1
  400c90:	fa03 f000 	lsl.w	r0, r3, r0
  400c94:	4b05      	ldr	r3, [pc, #20]	; (400cac <pmc_enable_periph_clk+0x50>)
  400c96:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
  400c9a:	2000      	movs	r0, #0
  400c9c:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  400c9e:	2001      	movs	r0, #1
  400ca0:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  400ca2:	2000      	movs	r0, #0
  400ca4:	4770      	bx	lr
  400ca6:	2000      	movs	r0, #0
}
  400ca8:	4770      	bx	lr
  400caa:	bf00      	nop
  400cac:	400e0600 	.word	0x400e0600

00400cb0 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  400cb0:	6943      	ldr	r3, [r0, #20]
  400cb2:	f013 0f02 	tst.w	r3, #2
  400cb6:	d002      	beq.n	400cbe <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  400cb8:	61c1      	str	r1, [r0, #28]
	return 0;
  400cba:	2000      	movs	r0, #0
  400cbc:	4770      	bx	lr
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
  400cbe:	2001      	movs	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
  400cc0:	4770      	bx	lr
  400cc2:	bf00      	nop

00400cc4 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  400cc4:	6943      	ldr	r3, [r0, #20]
  400cc6:	f013 0f01 	tst.w	r3, #1
  400cca:	d003      	beq.n	400cd4 <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  400ccc:	6983      	ldr	r3, [r0, #24]
  400cce:	700b      	strb	r3, [r1, #0]
	return 0;
  400cd0:	2000      	movs	r0, #0
  400cd2:	4770      	bx	lr
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
  400cd4:	2001      	movs	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
  400cd6:	4770      	bx	lr

00400cd8 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  400cd8:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  400cda:	010c      	lsls	r4, r1, #4
  400cdc:	4294      	cmp	r4, r2
  400cde:	d90f      	bls.n	400d00 <usart_set_async_baudrate+0x28>
  400ce0:	e01a      	b.n	400d18 <usart_set_async_baudrate+0x40>
		return 1;
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  400ce2:	6841      	ldr	r1, [r0, #4]
  400ce4:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  400ce8:	6041      	str	r1, [r0, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  400cea:	0412      	lsls	r2, r2, #16
  400cec:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  400cf0:	431a      	orrs	r2, r3
  400cf2:	6202      	str	r2, [r0, #32]

	return 0;
  400cf4:	2000      	movs	r0, #0
  400cf6:	e01c      	b.n	400d32 <usart_set_async_baudrate+0x5a>
	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
	cd = cd_fp >> 3;
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
		return 1;
  400cf8:	2001      	movs	r0, #1
  400cfa:	e01a      	b.n	400d32 <usart_set_async_baudrate+0x5a>
  400cfc:	2001      	movs	r0, #1
  400cfe:	e018      	b.n	400d32 <usart_set_async_baudrate+0x5a>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400d00:	0863      	lsrs	r3, r4, #1
  400d02:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  400d06:	fbb2 f2f4 	udiv	r2, r2, r4
	cd = cd_fp >> 3;
  400d0a:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400d0c:	1e5c      	subs	r4, r3, #1
  400d0e:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  400d12:	428c      	cmp	r4, r1
  400d14:	d9e9      	bls.n	400cea <usart_set_async_baudrate+0x12>
  400d16:	e7ef      	b.n	400cf8 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400d18:	00c9      	lsls	r1, r1, #3
  400d1a:	084b      	lsrs	r3, r1, #1
  400d1c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  400d20:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  400d24:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400d26:	1e5c      	subs	r4, r3, #1
  400d28:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  400d2c:	428c      	cmp	r4, r1
  400d2e:	d8e5      	bhi.n	400cfc <usart_set_async_baudrate+0x24>
  400d30:	e7d7      	b.n	400ce2 <usart_set_async_baudrate+0xa>

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);

	return 0;
}
  400d32:	f85d 4b04 	ldr.w	r4, [sp], #4
  400d36:	4770      	bx	lr

00400d38 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  400d38:	4b08      	ldr	r3, [pc, #32]	; (400d5c <usart_reset+0x24>)
  400d3a:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
{
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  400d3e:	2300      	movs	r3, #0
  400d40:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  400d42:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  400d44:	6283      	str	r3, [r0, #40]	; 0x28
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  400d46:	2388      	movs	r3, #136	; 0x88
  400d48:	6003      	str	r3, [r0, #0]
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  400d4a:	2324      	movs	r3, #36	; 0x24
  400d4c:	6003      	str	r3, [r0, #0]
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RSTSTA;
  400d4e:	f44f 7380 	mov.w	r3, #256	; 0x100
  400d52:	6003      	str	r3, [r0, #0]
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RTSDIS;
  400d54:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  400d58:	6003      	str	r3, [r0, #0]
  400d5a:	4770      	bx	lr
  400d5c:	55534100 	.word	0x55534100

00400d60 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  400d60:	b570      	push	{r4, r5, r6, lr}
  400d62:	4605      	mov	r5, r0
  400d64:	460c      	mov	r4, r1
  400d66:	4616      	mov	r6, r2
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  400d68:	4b0f      	ldr	r3, [pc, #60]	; (400da8 <usart_init_rs232+0x48>)
  400d6a:	4798      	blx	r3

	ul_reg_val = 0;
  400d6c:	2200      	movs	r2, #0
  400d6e:	4b0f      	ldr	r3, [pc, #60]	; (400dac <usart_init_rs232+0x4c>)
  400d70:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  400d72:	b19c      	cbz	r4, 400d9c <usart_init_rs232+0x3c>
  400d74:	4632      	mov	r2, r6
  400d76:	6821      	ldr	r1, [r4, #0]
  400d78:	4628      	mov	r0, r5
  400d7a:	4b0d      	ldr	r3, [pc, #52]	; (400db0 <usart_init_rs232+0x50>)
  400d7c:	4798      	blx	r3
  400d7e:	4602      	mov	r2, r0
  400d80:	b970      	cbnz	r0, 400da0 <usart_init_rs232+0x40>
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  400d82:	6861      	ldr	r1, [r4, #4]
  400d84:	68a3      	ldr	r3, [r4, #8]
  400d86:	4319      	orrs	r1, r3
  400d88:	6923      	ldr	r3, [r4, #16]
  400d8a:	4319      	orrs	r1, r3
  400d8c:	68e3      	ldr	r3, [r4, #12]
  400d8e:	430b      	orrs	r3, r1
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400d90:	4906      	ldr	r1, [pc, #24]	; (400dac <usart_init_rs232+0x4c>)
  400d92:	600b      	str	r3, [r1, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;

	p_usart->US_MR |= ul_reg_val;
  400d94:	6869      	ldr	r1, [r5, #4]
  400d96:	430b      	orrs	r3, r1
  400d98:	606b      	str	r3, [r5, #4]

	return 0;
  400d9a:	e002      	b.n	400da2 <usart_init_rs232+0x42>

	ul_reg_val = 0;
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  400d9c:	2201      	movs	r2, #1
  400d9e:	e000      	b.n	400da2 <usart_init_rs232+0x42>
  400da0:	2201      	movs	r2, #1
	ul_reg_val |= US_MR_USART_MODE_NORMAL;

	p_usart->US_MR |= ul_reg_val;

	return 0;
}
  400da2:	4610      	mov	r0, r2
  400da4:	bd70      	pop	{r4, r5, r6, pc}
  400da6:	bf00      	nop
  400da8:	00400d39 	.word	0x00400d39
  400dac:	20400900 	.word	0x20400900
  400db0:	00400cd9 	.word	0x00400cd9

00400db4 <usart_enable_tx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_TXEN;
  400db4:	2340      	movs	r3, #64	; 0x40
  400db6:	6003      	str	r3, [r0, #0]
  400db8:	4770      	bx	lr
  400dba:	bf00      	nop

00400dbc <usart_enable_rx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RXEN;
  400dbc:	2310      	movs	r3, #16
  400dbe:	6003      	str	r3, [r0, #0]
  400dc0:	4770      	bx	lr
  400dc2:	bf00      	nop

00400dc4 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  400dc4:	6943      	ldr	r3, [r0, #20]
  400dc6:	f013 0f02 	tst.w	r3, #2
  400dca:	d004      	beq.n	400dd6 <usart_write+0x12>
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  400dcc:	f3c1 0108 	ubfx	r1, r1, #0, #9
  400dd0:	61c1      	str	r1, [r0, #28]
	return 0;
  400dd2:	2000      	movs	r0, #0
  400dd4:	4770      	bx	lr
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
  400dd6:	2001      	movs	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
  400dd8:	4770      	bx	lr
  400dda:	bf00      	nop

00400ddc <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  400ddc:	6943      	ldr	r3, [r0, #20]
  400dde:	f013 0f01 	tst.w	r3, #1
  400de2:	d005      	beq.n	400df0 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  400de4:	6983      	ldr	r3, [r0, #24]
  400de6:	f3c3 0308 	ubfx	r3, r3, #0, #9
  400dea:	600b      	str	r3, [r1, #0]

	return 0;
  400dec:	2000      	movs	r0, #0
  400dee:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
  400df0:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
  400df2:	4770      	bx	lr

00400df4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400df4:	e7fe      	b.n	400df4 <Dummy_Handler>
  400df6:	bf00      	nop

00400df8 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  400df8:	b500      	push	{lr}
  400dfa:	b083      	sub	sp, #12

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
  400dfc:	4b27      	ldr	r3, [pc, #156]	; (400e9c <Reset_Handler+0xa4>)
  400dfe:	4a28      	ldr	r2, [pc, #160]	; (400ea0 <Reset_Handler+0xa8>)
  400e00:	429a      	cmp	r2, r3
  400e02:	d003      	beq.n	400e0c <Reset_Handler+0x14>
                for (; pDest < &_erelocate;) {
  400e04:	4b27      	ldr	r3, [pc, #156]	; (400ea4 <Reset_Handler+0xac>)
  400e06:	4a25      	ldr	r2, [pc, #148]	; (400e9c <Reset_Handler+0xa4>)
  400e08:	429a      	cmp	r2, r3
  400e0a:	d304      	bcc.n	400e16 <Reset_Handler+0x1e>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  400e0c:	4b26      	ldr	r3, [pc, #152]	; (400ea8 <Reset_Handler+0xb0>)
  400e0e:	4a27      	ldr	r2, [pc, #156]	; (400eac <Reset_Handler+0xb4>)
  400e10:	429a      	cmp	r2, r3
  400e12:	d30f      	bcc.n	400e34 <Reset_Handler+0x3c>
  400e14:	e01a      	b.n	400e4c <Reset_Handler+0x54>
  400e16:	4921      	ldr	r1, [pc, #132]	; (400e9c <Reset_Handler+0xa4>)
  400e18:	4b25      	ldr	r3, [pc, #148]	; (400eb0 <Reset_Handler+0xb8>)
  400e1a:	1a5b      	subs	r3, r3, r1
  400e1c:	f023 0303 	bic.w	r3, r3, #3
  400e20:	3304      	adds	r3, #4
  400e22:	4a1f      	ldr	r2, [pc, #124]	; (400ea0 <Reset_Handler+0xa8>)
  400e24:	4413      	add	r3, r2
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
                        *pDest++ = *pSrc++;
  400e26:	f852 0b04 	ldr.w	r0, [r2], #4
  400e2a:	f841 0b04 	str.w	r0, [r1], #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
  400e2e:	429a      	cmp	r2, r3
  400e30:	d1f9      	bne.n	400e26 <Reset_Handler+0x2e>
  400e32:	e7eb      	b.n	400e0c <Reset_Handler+0x14>
  400e34:	4b1f      	ldr	r3, [pc, #124]	; (400eb4 <Reset_Handler+0xbc>)
  400e36:	4a20      	ldr	r2, [pc, #128]	; (400eb8 <Reset_Handler+0xc0>)
  400e38:	1ad2      	subs	r2, r2, r3
  400e3a:	f022 0203 	bic.w	r2, r2, #3
  400e3e:	441a      	add	r2, r3
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  400e40:	3b04      	subs	r3, #4
                *pDest++ = 0;
  400e42:	2100      	movs	r1, #0
  400e44:	f843 1b04 	str.w	r1, [r3], #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  400e48:	4293      	cmp	r3, r2
  400e4a:	d1fb      	bne.n	400e44 <Reset_Handler+0x4c>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  400e4c:	4a1b      	ldr	r2, [pc, #108]	; (400ebc <Reset_Handler+0xc4>)
  400e4e:	4b1c      	ldr	r3, [pc, #112]	; (400ec0 <Reset_Handler+0xc8>)
  400e50:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400e54:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400e56:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400e5a:	fab3 f383 	clz	r3, r3
  400e5e:	095b      	lsrs	r3, r3, #5
  400e60:	9301      	str	r3, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  400e62:	b672      	cpsid	i
  400e64:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400e68:	2200      	movs	r2, #0
  400e6a:	4b16      	ldr	r3, [pc, #88]	; (400ec4 <Reset_Handler+0xcc>)
  400e6c:	701a      	strb	r2, [r3, #0]
	return flags;
  400e6e:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  400e70:	4a15      	ldr	r2, [pc, #84]	; (400ec8 <Reset_Handler+0xd0>)
  400e72:	6813      	ldr	r3, [r2, #0]
  400e74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  400e78:	6013      	str	r3, [r2, #0]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  400e7a:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  400e7e:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  400e82:	b129      	cbz	r1, 400e90 <Reset_Handler+0x98>
		cpu_irq_enable();
  400e84:	2201      	movs	r2, #1
  400e86:	4b0f      	ldr	r3, [pc, #60]	; (400ec4 <Reset_Handler+0xcc>)
  400e88:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  400e8a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  400e8e:	b662      	cpsie	i
#if __FPU_USED
	fpu_enable();
#endif

        /* Initialize the C library */
        __libc_init_array();
  400e90:	4b0e      	ldr	r3, [pc, #56]	; (400ecc <Reset_Handler+0xd4>)
  400e92:	4798      	blx	r3

        /* Branch to main function */
        main();
  400e94:	4b0e      	ldr	r3, [pc, #56]	; (400ed0 <Reset_Handler+0xd8>)
  400e96:	4798      	blx	r3
  400e98:	e7fe      	b.n	400e98 <Reset_Handler+0xa0>
  400e9a:	bf00      	nop
  400e9c:	20400000 	.word	0x20400000
  400ea0:	00404290 	.word	0x00404290
  400ea4:	2040086c 	.word	0x2040086c
  400ea8:	204009d4 	.word	0x204009d4
  400eac:	2040086c 	.word	0x2040086c
  400eb0:	2040086b 	.word	0x2040086b
  400eb4:	20400870 	.word	0x20400870
  400eb8:	204009d7 	.word	0x204009d7
  400ebc:	e000ed00 	.word	0xe000ed00
  400ec0:	00400000 	.word	0x00400000
  400ec4:	20400000 	.word	0x20400000
  400ec8:	e000ed88 	.word	0xe000ed88
  400ecc:	004010a9 	.word	0x004010a9
  400ed0:	00400369 	.word	0x00400369

00400ed4 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  400ed4:	4b3c      	ldr	r3, [pc, #240]	; (400fc8 <SystemCoreClockUpdate+0xf4>)
  400ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400ed8:	f003 0303 	and.w	r3, r3, #3
  400edc:	2b01      	cmp	r3, #1
  400ede:	d00f      	beq.n	400f00 <SystemCoreClockUpdate+0x2c>
  400ee0:	b113      	cbz	r3, 400ee8 <SystemCoreClockUpdate+0x14>
  400ee2:	2b02      	cmp	r3, #2
  400ee4:	d029      	beq.n	400f3a <SystemCoreClockUpdate+0x66>
  400ee6:	e057      	b.n	400f98 <SystemCoreClockUpdate+0xc4>
  {
    case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  400ee8:	4b38      	ldr	r3, [pc, #224]	; (400fcc <SystemCoreClockUpdate+0xf8>)
  400eea:	695b      	ldr	r3, [r3, #20]
  400eec:	f013 0f80 	tst.w	r3, #128	; 0x80
      {
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400ef0:	bf14      	ite	ne
  400ef2:	f44f 4200 	movne.w	r2, #32768	; 0x8000
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  400ef6:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  400efa:	4b35      	ldr	r3, [pc, #212]	; (400fd0 <SystemCoreClockUpdate+0xfc>)
  400efc:	601a      	str	r2, [r3, #0]
  400efe:	e04b      	b.n	400f98 <SystemCoreClockUpdate+0xc4>
      }
    break;

    case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400f00:	4b31      	ldr	r3, [pc, #196]	; (400fc8 <SystemCoreClockUpdate+0xf4>)
  400f02:	6a1b      	ldr	r3, [r3, #32]
  400f04:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400f08:	d003      	beq.n	400f12 <SystemCoreClockUpdate+0x3e>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  400f0a:	4a32      	ldr	r2, [pc, #200]	; (400fd4 <SystemCoreClockUpdate+0x100>)
  400f0c:	4b30      	ldr	r3, [pc, #192]	; (400fd0 <SystemCoreClockUpdate+0xfc>)
  400f0e:	601a      	str	r2, [r3, #0]
  400f10:	e042      	b.n	400f98 <SystemCoreClockUpdate+0xc4>
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400f12:	4a31      	ldr	r2, [pc, #196]	; (400fd8 <SystemCoreClockUpdate+0x104>)
  400f14:	4b2e      	ldr	r3, [pc, #184]	; (400fd0 <SystemCoreClockUpdate+0xfc>)
  400f16:	601a      	str	r2, [r3, #0]

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  400f18:	4b2b      	ldr	r3, [pc, #172]	; (400fc8 <SystemCoreClockUpdate+0xf4>)
  400f1a:	6a1b      	ldr	r3, [r3, #32]
  400f1c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400f20:	2b10      	cmp	r3, #16
  400f22:	d002      	beq.n	400f2a <SystemCoreClockUpdate+0x56>
  400f24:	2b20      	cmp	r3, #32
  400f26:	d004      	beq.n	400f32 <SystemCoreClockUpdate+0x5e>
  400f28:	e036      	b.n	400f98 <SystemCoreClockUpdate+0xc4>
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;

          case CKGR_MOR_MOSCRCF_8_MHz:
            SystemCoreClock *= 2U;
  400f2a:	4a2c      	ldr	r2, [pc, #176]	; (400fdc <SystemCoreClockUpdate+0x108>)
  400f2c:	4b28      	ldr	r3, [pc, #160]	; (400fd0 <SystemCoreClockUpdate+0xfc>)
  400f2e:	601a      	str	r2, [r3, #0]
          break;
  400f30:	e032      	b.n	400f98 <SystemCoreClockUpdate+0xc4>

          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
  400f32:	4a28      	ldr	r2, [pc, #160]	; (400fd4 <SystemCoreClockUpdate+0x100>)
  400f34:	4b26      	ldr	r3, [pc, #152]	; (400fd0 <SystemCoreClockUpdate+0xfc>)
  400f36:	601a      	str	r2, [r3, #0]
          break;
  400f38:	e02e      	b.n	400f98 <SystemCoreClockUpdate+0xc4>
        }
      }
    break;

    case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400f3a:	4b23      	ldr	r3, [pc, #140]	; (400fc8 <SystemCoreClockUpdate+0xf4>)
  400f3c:	6a1b      	ldr	r3, [r3, #32]
  400f3e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400f42:	d003      	beq.n	400f4c <SystemCoreClockUpdate+0x78>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  400f44:	4a23      	ldr	r2, [pc, #140]	; (400fd4 <SystemCoreClockUpdate+0x100>)
  400f46:	4b22      	ldr	r3, [pc, #136]	; (400fd0 <SystemCoreClockUpdate+0xfc>)
  400f48:	601a      	str	r2, [r3, #0]
  400f4a:	e012      	b.n	400f72 <SystemCoreClockUpdate+0x9e>
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400f4c:	4a22      	ldr	r2, [pc, #136]	; (400fd8 <SystemCoreClockUpdate+0x104>)
  400f4e:	4b20      	ldr	r3, [pc, #128]	; (400fd0 <SystemCoreClockUpdate+0xfc>)
  400f50:	601a      	str	r2, [r3, #0]

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  400f52:	4b1d      	ldr	r3, [pc, #116]	; (400fc8 <SystemCoreClockUpdate+0xf4>)
  400f54:	6a1b      	ldr	r3, [r3, #32]
  400f56:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400f5a:	2b10      	cmp	r3, #16
  400f5c:	d002      	beq.n	400f64 <SystemCoreClockUpdate+0x90>
  400f5e:	2b20      	cmp	r3, #32
  400f60:	d004      	beq.n	400f6c <SystemCoreClockUpdate+0x98>
  400f62:	e006      	b.n	400f72 <SystemCoreClockUpdate+0x9e>
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;

          case CKGR_MOR_MOSCRCF_8_MHz:
            SystemCoreClock *= 2U;
  400f64:	4a1d      	ldr	r2, [pc, #116]	; (400fdc <SystemCoreClockUpdate+0x108>)
  400f66:	4b1a      	ldr	r3, [pc, #104]	; (400fd0 <SystemCoreClockUpdate+0xfc>)
  400f68:	601a      	str	r2, [r3, #0]
          break;
  400f6a:	e002      	b.n	400f72 <SystemCoreClockUpdate+0x9e>

          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
  400f6c:	4a19      	ldr	r2, [pc, #100]	; (400fd4 <SystemCoreClockUpdate+0x100>)
  400f6e:	4b18      	ldr	r3, [pc, #96]	; (400fd0 <SystemCoreClockUpdate+0xfc>)
  400f70:	601a      	str	r2, [r3, #0]
          default:
          break;
        }
      }

      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  400f72:	4b15      	ldr	r3, [pc, #84]	; (400fc8 <SystemCoreClockUpdate+0xf4>)
  400f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400f76:	f003 0303 	and.w	r3, r3, #3
  400f7a:	2b02      	cmp	r3, #2
  400f7c:	d10c      	bne.n	400f98 <SystemCoreClockUpdate+0xc4>
      {
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400f7e:	4a12      	ldr	r2, [pc, #72]	; (400fc8 <SystemCoreClockUpdate+0xf4>)
  400f80:	6a93      	ldr	r3, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400f82:	6a92      	ldr	r2, [r2, #40]	; 0x28
  400f84:	4812      	ldr	r0, [pc, #72]	; (400fd0 <SystemCoreClockUpdate+0xfc>)
  400f86:	f3c3 410a 	ubfx	r1, r3, #16, #11
  400f8a:	6803      	ldr	r3, [r0, #0]
  400f8c:	fb01 3303 	mla	r3, r1, r3, r3
  400f90:	b2d2      	uxtb	r2, r2
  400f92:	fbb3 f3f2 	udiv	r3, r3, r2
  400f96:	6003      	str	r3, [r0, #0]

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  400f98:	4b0b      	ldr	r3, [pc, #44]	; (400fc8 <SystemCoreClockUpdate+0xf4>)
  400f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400f9c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400fa0:	2b70      	cmp	r3, #112	; 0x70
  400fa2:	d107      	bne.n	400fb4 <SystemCoreClockUpdate+0xe0>
  {
    SystemCoreClock /= 3U;
  400fa4:	4a0a      	ldr	r2, [pc, #40]	; (400fd0 <SystemCoreClockUpdate+0xfc>)
  400fa6:	6813      	ldr	r3, [r2, #0]
  400fa8:	490d      	ldr	r1, [pc, #52]	; (400fe0 <SystemCoreClockUpdate+0x10c>)
  400faa:	fba1 1303 	umull	r1, r3, r1, r3
  400fae:	085b      	lsrs	r3, r3, #1
  400fb0:	6013      	str	r3, [r2, #0]
  400fb2:	4770      	bx	lr
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  400fb4:	4b04      	ldr	r3, [pc, #16]	; (400fc8 <SystemCoreClockUpdate+0xf4>)
  400fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400fb8:	4905      	ldr	r1, [pc, #20]	; (400fd0 <SystemCoreClockUpdate+0xfc>)
  400fba:	f3c3 1202 	ubfx	r2, r3, #4, #3
  400fbe:	680b      	ldr	r3, [r1, #0]
  400fc0:	40d3      	lsrs	r3, r2
  400fc2:	600b      	str	r3, [r1, #0]
  400fc4:	4770      	bx	lr
  400fc6:	bf00      	nop
  400fc8:	400e0600 	.word	0x400e0600
  400fcc:	400e1810 	.word	0x400e1810
  400fd0:	20400004 	.word	0x20400004
  400fd4:	00b71b00 	.word	0x00b71b00
  400fd8:	003d0900 	.word	0x003d0900
  400fdc:	007a1200 	.word	0x007a1200
  400fe0:	aaaaaaab 	.word	0xaaaaaaab

00400fe4 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  400fe4:	4b12      	ldr	r3, [pc, #72]	; (401030 <system_init_flash+0x4c>)
  400fe6:	4298      	cmp	r0, r3
  400fe8:	d804      	bhi.n	400ff4 <system_init_flash+0x10>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400fea:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400fee:	4b11      	ldr	r3, [pc, #68]	; (401034 <system_init_flash+0x50>)
  400ff0:	601a      	str	r2, [r3, #0]
  400ff2:	4770      	bx	lr
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  400ff4:	4b10      	ldr	r3, [pc, #64]	; (401038 <system_init_flash+0x54>)
  400ff6:	4298      	cmp	r0, r3
  400ff8:	d803      	bhi.n	401002 <system_init_flash+0x1e>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400ffa:	4a10      	ldr	r2, [pc, #64]	; (40103c <system_init_flash+0x58>)
  400ffc:	4b0d      	ldr	r3, [pc, #52]	; (401034 <system_init_flash+0x50>)
  400ffe:	601a      	str	r2, [r3, #0]
  401000:	4770      	bx	lr
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  401002:	4b0f      	ldr	r3, [pc, #60]	; (401040 <system_init_flash+0x5c>)
  401004:	4298      	cmp	r0, r3
  401006:	d803      	bhi.n	401010 <system_init_flash+0x2c>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  401008:	4a0e      	ldr	r2, [pc, #56]	; (401044 <system_init_flash+0x60>)
  40100a:	4b0a      	ldr	r3, [pc, #40]	; (401034 <system_init_flash+0x50>)
  40100c:	601a      	str	r2, [r3, #0]
  40100e:	4770      	bx	lr
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  401010:	4b0d      	ldr	r3, [pc, #52]	; (401048 <system_init_flash+0x64>)
  401012:	4298      	cmp	r0, r3
  401014:	d803      	bhi.n	40101e <system_init_flash+0x3a>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  401016:	4a0d      	ldr	r2, [pc, #52]	; (40104c <system_init_flash+0x68>)
  401018:	4b06      	ldr	r3, [pc, #24]	; (401034 <system_init_flash+0x50>)
  40101a:	601a      	str	r2, [r3, #0]
  40101c:	4770      	bx	lr
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  40101e:	4b0c      	ldr	r3, [pc, #48]	; (401050 <system_init_flash+0x6c>)
  401020:	4298      	cmp	r0, r3
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  401022:	bf94      	ite	ls
  401024:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
          }
          else
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  401028:	4a0a      	ldrhi	r2, [pc, #40]	; (401054 <system_init_flash+0x70>)
  40102a:	4b02      	ldr	r3, [pc, #8]	; (401034 <system_init_flash+0x50>)
  40102c:	601a      	str	r2, [r3, #0]
  40102e:	4770      	bx	lr
  401030:	01312cff 	.word	0x01312cff
  401034:	400e0c00 	.word	0x400e0c00
  401038:	026259ff 	.word	0x026259ff
  40103c:	04000100 	.word	0x04000100
  401040:	039386ff 	.word	0x039386ff
  401044:	04000200 	.word	0x04000200
  401048:	04c4b3ff 	.word	0x04c4b3ff
  40104c:	04000300 	.word	0x04000300
  401050:	05f5e0ff 	.word	0x05f5e0ff
  401054:	04000500 	.word	0x04000500

00401058 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  401058:	4b09      	ldr	r3, [pc, #36]	; (401080 <_sbrk+0x28>)
  40105a:	681b      	ldr	r3, [r3, #0]
  40105c:	b913      	cbnz	r3, 401064 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
  40105e:	4a09      	ldr	r2, [pc, #36]	; (401084 <_sbrk+0x2c>)
  401060:	4b07      	ldr	r3, [pc, #28]	; (401080 <_sbrk+0x28>)
  401062:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  401064:	4b06      	ldr	r3, [pc, #24]	; (401080 <_sbrk+0x28>)
  401066:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  401068:	181a      	adds	r2, r3, r0
  40106a:	4907      	ldr	r1, [pc, #28]	; (401088 <_sbrk+0x30>)
  40106c:	4291      	cmp	r1, r2
  40106e:	db04      	blt.n	40107a <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
  401070:	4610      	mov	r0, r2
  401072:	4a03      	ldr	r2, [pc, #12]	; (401080 <_sbrk+0x28>)
  401074:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  401076:	4618      	mov	r0, r3
  401078:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
  40107a:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
  40107e:	4770      	bx	lr
  401080:	20400904 	.word	0x20400904
  401084:	20402bd8 	.word	0x20402bd8
  401088:	2045fffc 	.word	0x2045fffc

0040108c <_close>:
}

extern int _close(int file)
{
	return -1;
}
  40108c:	f04f 30ff 	mov.w	r0, #4294967295
  401090:	4770      	bx	lr
  401092:	bf00      	nop

00401094 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  401094:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  401098:	604b      	str	r3, [r1, #4]

	return 0;
}
  40109a:	2000      	movs	r0, #0
  40109c:	4770      	bx	lr
  40109e:	bf00      	nop

004010a0 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  4010a0:	2001      	movs	r0, #1
  4010a2:	4770      	bx	lr

004010a4 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  4010a4:	2000      	movs	r0, #0
  4010a6:	4770      	bx	lr

004010a8 <__libc_init_array>:
  4010a8:	b570      	push	{r4, r5, r6, lr}
  4010aa:	4e0f      	ldr	r6, [pc, #60]	; (4010e8 <__libc_init_array+0x40>)
  4010ac:	4d0f      	ldr	r5, [pc, #60]	; (4010ec <__libc_init_array+0x44>)
  4010ae:	1b76      	subs	r6, r6, r5
  4010b0:	10b6      	asrs	r6, r6, #2
  4010b2:	bf18      	it	ne
  4010b4:	2400      	movne	r4, #0
  4010b6:	d005      	beq.n	4010c4 <__libc_init_array+0x1c>
  4010b8:	3401      	adds	r4, #1
  4010ba:	f855 3b04 	ldr.w	r3, [r5], #4
  4010be:	4798      	blx	r3
  4010c0:	42a6      	cmp	r6, r4
  4010c2:	d1f9      	bne.n	4010b8 <__libc_init_array+0x10>
  4010c4:	4e0a      	ldr	r6, [pc, #40]	; (4010f0 <__libc_init_array+0x48>)
  4010c6:	4d0b      	ldr	r5, [pc, #44]	; (4010f4 <__libc_init_array+0x4c>)
  4010c8:	1b76      	subs	r6, r6, r5
  4010ca:	f003 f8cb 	bl	404264 <_init>
  4010ce:	10b6      	asrs	r6, r6, #2
  4010d0:	bf18      	it	ne
  4010d2:	2400      	movne	r4, #0
  4010d4:	d006      	beq.n	4010e4 <__libc_init_array+0x3c>
  4010d6:	3401      	adds	r4, #1
  4010d8:	f855 3b04 	ldr.w	r3, [r5], #4
  4010dc:	4798      	blx	r3
  4010de:	42a6      	cmp	r6, r4
  4010e0:	d1f9      	bne.n	4010d6 <__libc_init_array+0x2e>
  4010e2:	bd70      	pop	{r4, r5, r6, pc}
  4010e4:	bd70      	pop	{r4, r5, r6, pc}
  4010e6:	bf00      	nop
  4010e8:	00404270 	.word	0x00404270
  4010ec:	00404270 	.word	0x00404270
  4010f0:	00404278 	.word	0x00404278
  4010f4:	00404270 	.word	0x00404270

004010f8 <iprintf>:
  4010f8:	b40f      	push	{r0, r1, r2, r3}
  4010fa:	b500      	push	{lr}
  4010fc:	4907      	ldr	r1, [pc, #28]	; (40111c <iprintf+0x24>)
  4010fe:	b083      	sub	sp, #12
  401100:	ab04      	add	r3, sp, #16
  401102:	6808      	ldr	r0, [r1, #0]
  401104:	f853 2b04 	ldr.w	r2, [r3], #4
  401108:	6881      	ldr	r1, [r0, #8]
  40110a:	9301      	str	r3, [sp, #4]
  40110c:	f000 fa02 	bl	401514 <_vfiprintf_r>
  401110:	b003      	add	sp, #12
  401112:	f85d eb04 	ldr.w	lr, [sp], #4
  401116:	b004      	add	sp, #16
  401118:	4770      	bx	lr
  40111a:	bf00      	nop
  40111c:	20400430 	.word	0x20400430

00401120 <memset>:
  401120:	b470      	push	{r4, r5, r6}
  401122:	0784      	lsls	r4, r0, #30
  401124:	d046      	beq.n	4011b4 <memset+0x94>
  401126:	1e54      	subs	r4, r2, #1
  401128:	2a00      	cmp	r2, #0
  40112a:	d041      	beq.n	4011b0 <memset+0x90>
  40112c:	b2cd      	uxtb	r5, r1
  40112e:	4603      	mov	r3, r0
  401130:	e002      	b.n	401138 <memset+0x18>
  401132:	1e62      	subs	r2, r4, #1
  401134:	b3e4      	cbz	r4, 4011b0 <memset+0x90>
  401136:	4614      	mov	r4, r2
  401138:	f803 5b01 	strb.w	r5, [r3], #1
  40113c:	079a      	lsls	r2, r3, #30
  40113e:	d1f8      	bne.n	401132 <memset+0x12>
  401140:	2c03      	cmp	r4, #3
  401142:	d92e      	bls.n	4011a2 <memset+0x82>
  401144:	b2cd      	uxtb	r5, r1
  401146:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  40114a:	2c0f      	cmp	r4, #15
  40114c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  401150:	d919      	bls.n	401186 <memset+0x66>
  401152:	f103 0210 	add.w	r2, r3, #16
  401156:	4626      	mov	r6, r4
  401158:	3e10      	subs	r6, #16
  40115a:	2e0f      	cmp	r6, #15
  40115c:	f842 5c10 	str.w	r5, [r2, #-16]
  401160:	f842 5c0c 	str.w	r5, [r2, #-12]
  401164:	f842 5c08 	str.w	r5, [r2, #-8]
  401168:	f842 5c04 	str.w	r5, [r2, #-4]
  40116c:	f102 0210 	add.w	r2, r2, #16
  401170:	d8f2      	bhi.n	401158 <memset+0x38>
  401172:	f1a4 0210 	sub.w	r2, r4, #16
  401176:	f022 020f 	bic.w	r2, r2, #15
  40117a:	f004 040f 	and.w	r4, r4, #15
  40117e:	3210      	adds	r2, #16
  401180:	2c03      	cmp	r4, #3
  401182:	4413      	add	r3, r2
  401184:	d90d      	bls.n	4011a2 <memset+0x82>
  401186:	461e      	mov	r6, r3
  401188:	4622      	mov	r2, r4
  40118a:	3a04      	subs	r2, #4
  40118c:	2a03      	cmp	r2, #3
  40118e:	f846 5b04 	str.w	r5, [r6], #4
  401192:	d8fa      	bhi.n	40118a <memset+0x6a>
  401194:	1f22      	subs	r2, r4, #4
  401196:	f022 0203 	bic.w	r2, r2, #3
  40119a:	3204      	adds	r2, #4
  40119c:	4413      	add	r3, r2
  40119e:	f004 0403 	and.w	r4, r4, #3
  4011a2:	b12c      	cbz	r4, 4011b0 <memset+0x90>
  4011a4:	b2c9      	uxtb	r1, r1
  4011a6:	441c      	add	r4, r3
  4011a8:	f803 1b01 	strb.w	r1, [r3], #1
  4011ac:	42a3      	cmp	r3, r4
  4011ae:	d1fb      	bne.n	4011a8 <memset+0x88>
  4011b0:	bc70      	pop	{r4, r5, r6}
  4011b2:	4770      	bx	lr
  4011b4:	4614      	mov	r4, r2
  4011b6:	4603      	mov	r3, r0
  4011b8:	e7c2      	b.n	401140 <memset+0x20>
  4011ba:	bf00      	nop

004011bc <_puts_r>:
  4011bc:	b5f0      	push	{r4, r5, r6, r7, lr}
  4011be:	4605      	mov	r5, r0
  4011c0:	b089      	sub	sp, #36	; 0x24
  4011c2:	4608      	mov	r0, r1
  4011c4:	460c      	mov	r4, r1
  4011c6:	f000 f8fb 	bl	4013c0 <strlen>
  4011ca:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4011cc:	4f14      	ldr	r7, [pc, #80]	; (401220 <_puts_r+0x64>)
  4011ce:	9404      	str	r4, [sp, #16]
  4011d0:	2601      	movs	r6, #1
  4011d2:	1c44      	adds	r4, r0, #1
  4011d4:	a904      	add	r1, sp, #16
  4011d6:	2202      	movs	r2, #2
  4011d8:	9403      	str	r4, [sp, #12]
  4011da:	9005      	str	r0, [sp, #20]
  4011dc:	68ac      	ldr	r4, [r5, #8]
  4011de:	9706      	str	r7, [sp, #24]
  4011e0:	9607      	str	r6, [sp, #28]
  4011e2:	9101      	str	r1, [sp, #4]
  4011e4:	9202      	str	r2, [sp, #8]
  4011e6:	b1b3      	cbz	r3, 401216 <_puts_r+0x5a>
  4011e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4011ec:	049a      	lsls	r2, r3, #18
  4011ee:	d406      	bmi.n	4011fe <_puts_r+0x42>
  4011f0:	6e62      	ldr	r2, [r4, #100]	; 0x64
  4011f2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  4011f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  4011fa:	81a3      	strh	r3, [r4, #12]
  4011fc:	6662      	str	r2, [r4, #100]	; 0x64
  4011fe:	4621      	mov	r1, r4
  401200:	4628      	mov	r0, r5
  401202:	aa01      	add	r2, sp, #4
  401204:	f001 fc18 	bl	402a38 <__sfvwrite_r>
  401208:	2800      	cmp	r0, #0
  40120a:	bf14      	ite	ne
  40120c:	f04f 30ff 	movne.w	r0, #4294967295
  401210:	200a      	moveq	r0, #10
  401212:	b009      	add	sp, #36	; 0x24
  401214:	bdf0      	pop	{r4, r5, r6, r7, pc}
  401216:	4628      	mov	r0, r5
  401218:	f001 fa5c 	bl	4026d4 <__sinit>
  40121c:	e7e4      	b.n	4011e8 <_puts_r+0x2c>
  40121e:	bf00      	nop
  401220:	00404210 	.word	0x00404210

00401224 <puts>:
  401224:	4b02      	ldr	r3, [pc, #8]	; (401230 <puts+0xc>)
  401226:	4601      	mov	r1, r0
  401228:	6818      	ldr	r0, [r3, #0]
  40122a:	f7ff bfc7 	b.w	4011bc <_puts_r>
  40122e:	bf00      	nop
  401230:	20400430 	.word	0x20400430

00401234 <setbuf>:
  401234:	2900      	cmp	r1, #0
  401236:	bf0c      	ite	eq
  401238:	2202      	moveq	r2, #2
  40123a:	2200      	movne	r2, #0
  40123c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  401240:	f000 b800 	b.w	401244 <setvbuf>

00401244 <setvbuf>:
  401244:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  401248:	4c51      	ldr	r4, [pc, #324]	; (401390 <setvbuf+0x14c>)
  40124a:	6825      	ldr	r5, [r4, #0]
  40124c:	b083      	sub	sp, #12
  40124e:	4604      	mov	r4, r0
  401250:	460f      	mov	r7, r1
  401252:	4690      	mov	r8, r2
  401254:	461e      	mov	r6, r3
  401256:	b115      	cbz	r5, 40125e <setvbuf+0x1a>
  401258:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40125a:	2b00      	cmp	r3, #0
  40125c:	d079      	beq.n	401352 <setvbuf+0x10e>
  40125e:	f1b8 0f02 	cmp.w	r8, #2
  401262:	d004      	beq.n	40126e <setvbuf+0x2a>
  401264:	f1b8 0f01 	cmp.w	r8, #1
  401268:	d87f      	bhi.n	40136a <setvbuf+0x126>
  40126a:	2e00      	cmp	r6, #0
  40126c:	db7d      	blt.n	40136a <setvbuf+0x126>
  40126e:	4621      	mov	r1, r4
  401270:	4628      	mov	r0, r5
  401272:	f001 f99b 	bl	4025ac <_fflush_r>
  401276:	6b21      	ldr	r1, [r4, #48]	; 0x30
  401278:	b141      	cbz	r1, 40128c <setvbuf+0x48>
  40127a:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40127e:	4299      	cmp	r1, r3
  401280:	d002      	beq.n	401288 <setvbuf+0x44>
  401282:	4628      	mov	r0, r5
  401284:	f001 faf0 	bl	402868 <_free_r>
  401288:	2300      	movs	r3, #0
  40128a:	6323      	str	r3, [r4, #48]	; 0x30
  40128c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401290:	2200      	movs	r2, #0
  401292:	61a2      	str	r2, [r4, #24]
  401294:	6062      	str	r2, [r4, #4]
  401296:	061a      	lsls	r2, r3, #24
  401298:	d454      	bmi.n	401344 <setvbuf+0x100>
  40129a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  40129e:	f023 0303 	bic.w	r3, r3, #3
  4012a2:	f1b8 0f02 	cmp.w	r8, #2
  4012a6:	81a3      	strh	r3, [r4, #12]
  4012a8:	d039      	beq.n	40131e <setvbuf+0xda>
  4012aa:	ab01      	add	r3, sp, #4
  4012ac:	466a      	mov	r2, sp
  4012ae:	4621      	mov	r1, r4
  4012b0:	4628      	mov	r0, r5
  4012b2:	f001 fd77 	bl	402da4 <__swhatbuf_r>
  4012b6:	89a3      	ldrh	r3, [r4, #12]
  4012b8:	4318      	orrs	r0, r3
  4012ba:	81a0      	strh	r0, [r4, #12]
  4012bc:	b326      	cbz	r6, 401308 <setvbuf+0xc4>
  4012be:	b327      	cbz	r7, 40130a <setvbuf+0xc6>
  4012c0:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4012c2:	2b00      	cmp	r3, #0
  4012c4:	d04d      	beq.n	401362 <setvbuf+0x11e>
  4012c6:	9b00      	ldr	r3, [sp, #0]
  4012c8:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
  4012cc:	6027      	str	r7, [r4, #0]
  4012ce:	429e      	cmp	r6, r3
  4012d0:	bf1c      	itt	ne
  4012d2:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
  4012d6:	81a0      	strhne	r0, [r4, #12]
  4012d8:	f1b8 0f01 	cmp.w	r8, #1
  4012dc:	bf08      	it	eq
  4012de:	f040 0001 	orreq.w	r0, r0, #1
  4012e2:	b283      	uxth	r3, r0
  4012e4:	bf08      	it	eq
  4012e6:	81a0      	strheq	r0, [r4, #12]
  4012e8:	f003 0008 	and.w	r0, r3, #8
  4012ec:	b280      	uxth	r0, r0
  4012ee:	6127      	str	r7, [r4, #16]
  4012f0:	6166      	str	r6, [r4, #20]
  4012f2:	b318      	cbz	r0, 40133c <setvbuf+0xf8>
  4012f4:	f013 0001 	ands.w	r0, r3, #1
  4012f8:	d02f      	beq.n	40135a <setvbuf+0x116>
  4012fa:	2000      	movs	r0, #0
  4012fc:	4276      	negs	r6, r6
  4012fe:	61a6      	str	r6, [r4, #24]
  401300:	60a0      	str	r0, [r4, #8]
  401302:	b003      	add	sp, #12
  401304:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401308:	9e00      	ldr	r6, [sp, #0]
  40130a:	4630      	mov	r0, r6
  40130c:	f001 fdbe 	bl	402e8c <malloc>
  401310:	4607      	mov	r7, r0
  401312:	b368      	cbz	r0, 401370 <setvbuf+0x12c>
  401314:	89a3      	ldrh	r3, [r4, #12]
  401316:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40131a:	81a3      	strh	r3, [r4, #12]
  40131c:	e7d0      	b.n	4012c0 <setvbuf+0x7c>
  40131e:	2000      	movs	r0, #0
  401320:	f104 0243 	add.w	r2, r4, #67	; 0x43
  401324:	f043 0302 	orr.w	r3, r3, #2
  401328:	2500      	movs	r5, #0
  40132a:	2101      	movs	r1, #1
  40132c:	81a3      	strh	r3, [r4, #12]
  40132e:	60a5      	str	r5, [r4, #8]
  401330:	6022      	str	r2, [r4, #0]
  401332:	6122      	str	r2, [r4, #16]
  401334:	6161      	str	r1, [r4, #20]
  401336:	b003      	add	sp, #12
  401338:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40133c:	60a0      	str	r0, [r4, #8]
  40133e:	b003      	add	sp, #12
  401340:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401344:	6921      	ldr	r1, [r4, #16]
  401346:	4628      	mov	r0, r5
  401348:	f001 fa8e 	bl	402868 <_free_r>
  40134c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401350:	e7a3      	b.n	40129a <setvbuf+0x56>
  401352:	4628      	mov	r0, r5
  401354:	f001 f9be 	bl	4026d4 <__sinit>
  401358:	e781      	b.n	40125e <setvbuf+0x1a>
  40135a:	60a6      	str	r6, [r4, #8]
  40135c:	b003      	add	sp, #12
  40135e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401362:	4628      	mov	r0, r5
  401364:	f001 f9b6 	bl	4026d4 <__sinit>
  401368:	e7ad      	b.n	4012c6 <setvbuf+0x82>
  40136a:	f04f 30ff 	mov.w	r0, #4294967295
  40136e:	e7e2      	b.n	401336 <setvbuf+0xf2>
  401370:	f8dd 9000 	ldr.w	r9, [sp]
  401374:	45b1      	cmp	r9, r6
  401376:	d006      	beq.n	401386 <setvbuf+0x142>
  401378:	4648      	mov	r0, r9
  40137a:	f001 fd87 	bl	402e8c <malloc>
  40137e:	4607      	mov	r7, r0
  401380:	b108      	cbz	r0, 401386 <setvbuf+0x142>
  401382:	464e      	mov	r6, r9
  401384:	e7c6      	b.n	401314 <setvbuf+0xd0>
  401386:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40138a:	f04f 30ff 	mov.w	r0, #4294967295
  40138e:	e7c7      	b.n	401320 <setvbuf+0xdc>
  401390:	20400430 	.word	0x20400430
	...

004013c0 <strlen>:
  4013c0:	f890 f000 	pld	[r0]
  4013c4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  4013c8:	f020 0107 	bic.w	r1, r0, #7
  4013cc:	f06f 0c00 	mvn.w	ip, #0
  4013d0:	f010 0407 	ands.w	r4, r0, #7
  4013d4:	f891 f020 	pld	[r1, #32]
  4013d8:	f040 8049 	bne.w	40146e <strlen+0xae>
  4013dc:	f04f 0400 	mov.w	r4, #0
  4013e0:	f06f 0007 	mvn.w	r0, #7
  4013e4:	e9d1 2300 	ldrd	r2, r3, [r1]
  4013e8:	f891 f040 	pld	[r1, #64]	; 0x40
  4013ec:	f100 0008 	add.w	r0, r0, #8
  4013f0:	fa82 f24c 	uadd8	r2, r2, ip
  4013f4:	faa4 f28c 	sel	r2, r4, ip
  4013f8:	fa83 f34c 	uadd8	r3, r3, ip
  4013fc:	faa2 f38c 	sel	r3, r2, ip
  401400:	bb4b      	cbnz	r3, 401456 <strlen+0x96>
  401402:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  401406:	fa82 f24c 	uadd8	r2, r2, ip
  40140a:	f100 0008 	add.w	r0, r0, #8
  40140e:	faa4 f28c 	sel	r2, r4, ip
  401412:	fa83 f34c 	uadd8	r3, r3, ip
  401416:	faa2 f38c 	sel	r3, r2, ip
  40141a:	b9e3      	cbnz	r3, 401456 <strlen+0x96>
  40141c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  401420:	fa82 f24c 	uadd8	r2, r2, ip
  401424:	f100 0008 	add.w	r0, r0, #8
  401428:	faa4 f28c 	sel	r2, r4, ip
  40142c:	fa83 f34c 	uadd8	r3, r3, ip
  401430:	faa2 f38c 	sel	r3, r2, ip
  401434:	b97b      	cbnz	r3, 401456 <strlen+0x96>
  401436:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  40143a:	f101 0120 	add.w	r1, r1, #32
  40143e:	fa82 f24c 	uadd8	r2, r2, ip
  401442:	f100 0008 	add.w	r0, r0, #8
  401446:	faa4 f28c 	sel	r2, r4, ip
  40144a:	fa83 f34c 	uadd8	r3, r3, ip
  40144e:	faa2 f38c 	sel	r3, r2, ip
  401452:	2b00      	cmp	r3, #0
  401454:	d0c6      	beq.n	4013e4 <strlen+0x24>
  401456:	2a00      	cmp	r2, #0
  401458:	bf04      	itt	eq
  40145a:	3004      	addeq	r0, #4
  40145c:	461a      	moveq	r2, r3
  40145e:	ba12      	rev	r2, r2
  401460:	fab2 f282 	clz	r2, r2
  401464:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  401468:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40146c:	4770      	bx	lr
  40146e:	e9d1 2300 	ldrd	r2, r3, [r1]
  401472:	f004 0503 	and.w	r5, r4, #3
  401476:	f1c4 0000 	rsb	r0, r4, #0
  40147a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40147e:	f014 0f04 	tst.w	r4, #4
  401482:	f891 f040 	pld	[r1, #64]	; 0x40
  401486:	fa0c f505 	lsl.w	r5, ip, r5
  40148a:	ea62 0205 	orn	r2, r2, r5
  40148e:	bf1c      	itt	ne
  401490:	ea63 0305 	ornne	r3, r3, r5
  401494:	4662      	movne	r2, ip
  401496:	f04f 0400 	mov.w	r4, #0
  40149a:	e7a9      	b.n	4013f0 <strlen+0x30>

0040149c <__sprint_r.part.0>:
  40149c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  40149e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4014a2:	049c      	lsls	r4, r3, #18
  4014a4:	4692      	mov	sl, r2
  4014a6:	d52c      	bpl.n	401502 <__sprint_r.part.0+0x66>
  4014a8:	6893      	ldr	r3, [r2, #8]
  4014aa:	6812      	ldr	r2, [r2, #0]
  4014ac:	b33b      	cbz	r3, 4014fe <__sprint_r.part.0+0x62>
  4014ae:	460f      	mov	r7, r1
  4014b0:	4680      	mov	r8, r0
  4014b2:	f102 0908 	add.w	r9, r2, #8
  4014b6:	e919 0060 	ldmdb	r9, {r5, r6}
  4014ba:	08b6      	lsrs	r6, r6, #2
  4014bc:	d017      	beq.n	4014ee <__sprint_r.part.0+0x52>
  4014be:	3d04      	subs	r5, #4
  4014c0:	2400      	movs	r4, #0
  4014c2:	e001      	b.n	4014c8 <__sprint_r.part.0+0x2c>
  4014c4:	42a6      	cmp	r6, r4
  4014c6:	d010      	beq.n	4014ea <__sprint_r.part.0+0x4e>
  4014c8:	463a      	mov	r2, r7
  4014ca:	f855 1f04 	ldr.w	r1, [r5, #4]!
  4014ce:	4640      	mov	r0, r8
  4014d0:	f001 f96a 	bl	4027a8 <_fputwc_r>
  4014d4:	1c43      	adds	r3, r0, #1
  4014d6:	f104 0401 	add.w	r4, r4, #1
  4014da:	d1f3      	bne.n	4014c4 <__sprint_r.part.0+0x28>
  4014dc:	2300      	movs	r3, #0
  4014de:	f8ca 3008 	str.w	r3, [sl, #8]
  4014e2:	f8ca 3004 	str.w	r3, [sl, #4]
  4014e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4014ea:	f8da 3008 	ldr.w	r3, [sl, #8]
  4014ee:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
  4014f2:	f8ca 3008 	str.w	r3, [sl, #8]
  4014f6:	f109 0908 	add.w	r9, r9, #8
  4014fa:	2b00      	cmp	r3, #0
  4014fc:	d1db      	bne.n	4014b6 <__sprint_r.part.0+0x1a>
  4014fe:	2000      	movs	r0, #0
  401500:	e7ec      	b.n	4014dc <__sprint_r.part.0+0x40>
  401502:	f001 fa99 	bl	402a38 <__sfvwrite_r>
  401506:	2300      	movs	r3, #0
  401508:	f8ca 3008 	str.w	r3, [sl, #8]
  40150c:	f8ca 3004 	str.w	r3, [sl, #4]
  401510:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00401514 <_vfiprintf_r>:
  401514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401518:	b0ab      	sub	sp, #172	; 0xac
  40151a:	461c      	mov	r4, r3
  40151c:	9100      	str	r1, [sp, #0]
  40151e:	4690      	mov	r8, r2
  401520:	9304      	str	r3, [sp, #16]
  401522:	9005      	str	r0, [sp, #20]
  401524:	b118      	cbz	r0, 40152e <_vfiprintf_r+0x1a>
  401526:	6b83      	ldr	r3, [r0, #56]	; 0x38
  401528:	2b00      	cmp	r3, #0
  40152a:	f000 80de 	beq.w	4016ea <_vfiprintf_r+0x1d6>
  40152e:	9800      	ldr	r0, [sp, #0]
  401530:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
  401534:	b28a      	uxth	r2, r1
  401536:	0495      	lsls	r5, r2, #18
  401538:	d407      	bmi.n	40154a <_vfiprintf_r+0x36>
  40153a:	6e43      	ldr	r3, [r0, #100]	; 0x64
  40153c:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
  401540:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  401544:	8182      	strh	r2, [r0, #12]
  401546:	6643      	str	r3, [r0, #100]	; 0x64
  401548:	b292      	uxth	r2, r2
  40154a:	0711      	lsls	r1, r2, #28
  40154c:	f140 80b1 	bpl.w	4016b2 <_vfiprintf_r+0x19e>
  401550:	9b00      	ldr	r3, [sp, #0]
  401552:	691b      	ldr	r3, [r3, #16]
  401554:	2b00      	cmp	r3, #0
  401556:	f000 80ac 	beq.w	4016b2 <_vfiprintf_r+0x19e>
  40155a:	f002 021a 	and.w	r2, r2, #26
  40155e:	2a0a      	cmp	r2, #10
  401560:	f000 80b5 	beq.w	4016ce <_vfiprintf_r+0x1ba>
  401564:	2300      	movs	r3, #0
  401566:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
  40156a:	9302      	str	r3, [sp, #8]
  40156c:	930f      	str	r3, [sp, #60]	; 0x3c
  40156e:	930e      	str	r3, [sp, #56]	; 0x38
  401570:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  401574:	46da      	mov	sl, fp
  401576:	f898 3000 	ldrb.w	r3, [r8]
  40157a:	4644      	mov	r4, r8
  40157c:	b1fb      	cbz	r3, 4015be <_vfiprintf_r+0xaa>
  40157e:	2b25      	cmp	r3, #37	; 0x25
  401580:	d102      	bne.n	401588 <_vfiprintf_r+0x74>
  401582:	e01c      	b.n	4015be <_vfiprintf_r+0xaa>
  401584:	2b25      	cmp	r3, #37	; 0x25
  401586:	d003      	beq.n	401590 <_vfiprintf_r+0x7c>
  401588:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  40158c:	2b00      	cmp	r3, #0
  40158e:	d1f9      	bne.n	401584 <_vfiprintf_r+0x70>
  401590:	ebc8 0504 	rsb	r5, r8, r4
  401594:	b19d      	cbz	r5, 4015be <_vfiprintf_r+0xaa>
  401596:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  401598:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40159a:	f8ca 8000 	str.w	r8, [sl]
  40159e:	3301      	adds	r3, #1
  4015a0:	442a      	add	r2, r5
  4015a2:	2b07      	cmp	r3, #7
  4015a4:	f8ca 5004 	str.w	r5, [sl, #4]
  4015a8:	920f      	str	r2, [sp, #60]	; 0x3c
  4015aa:	930e      	str	r3, [sp, #56]	; 0x38
  4015ac:	dd7b      	ble.n	4016a6 <_vfiprintf_r+0x192>
  4015ae:	2a00      	cmp	r2, #0
  4015b0:	f040 8528 	bne.w	402004 <_vfiprintf_r+0xaf0>
  4015b4:	9b02      	ldr	r3, [sp, #8]
  4015b6:	920e      	str	r2, [sp, #56]	; 0x38
  4015b8:	442b      	add	r3, r5
  4015ba:	46da      	mov	sl, fp
  4015bc:	9302      	str	r3, [sp, #8]
  4015be:	7823      	ldrb	r3, [r4, #0]
  4015c0:	2b00      	cmp	r3, #0
  4015c2:	f000 843e 	beq.w	401e42 <_vfiprintf_r+0x92e>
  4015c6:	2100      	movs	r1, #0
  4015c8:	f04f 0300 	mov.w	r3, #0
  4015cc:	f04f 32ff 	mov.w	r2, #4294967295
  4015d0:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  4015d4:	f104 0801 	add.w	r8, r4, #1
  4015d8:	7863      	ldrb	r3, [r4, #1]
  4015da:	9201      	str	r2, [sp, #4]
  4015dc:	4608      	mov	r0, r1
  4015de:	460e      	mov	r6, r1
  4015e0:	460c      	mov	r4, r1
  4015e2:	f108 0801 	add.w	r8, r8, #1
  4015e6:	f1a3 0220 	sub.w	r2, r3, #32
  4015ea:	2a58      	cmp	r2, #88	; 0x58
  4015ec:	f200 8393 	bhi.w	401d16 <_vfiprintf_r+0x802>
  4015f0:	e8df f012 	tbh	[pc, r2, lsl #1]
  4015f4:	03910346 	.word	0x03910346
  4015f8:	034e0391 	.word	0x034e0391
  4015fc:	03910391 	.word	0x03910391
  401600:	03910391 	.word	0x03910391
  401604:	03910391 	.word	0x03910391
  401608:	02670289 	.word	0x02670289
  40160c:	00800391 	.word	0x00800391
  401610:	0391026c 	.word	0x0391026c
  401614:	025901c6 	.word	0x025901c6
  401618:	02590259 	.word	0x02590259
  40161c:	02590259 	.word	0x02590259
  401620:	02590259 	.word	0x02590259
  401624:	02590259 	.word	0x02590259
  401628:	03910391 	.word	0x03910391
  40162c:	03910391 	.word	0x03910391
  401630:	03910391 	.word	0x03910391
  401634:	03910391 	.word	0x03910391
  401638:	03910391 	.word	0x03910391
  40163c:	039101cb 	.word	0x039101cb
  401640:	03910391 	.word	0x03910391
  401644:	03910391 	.word	0x03910391
  401648:	03910391 	.word	0x03910391
  40164c:	03910391 	.word	0x03910391
  401650:	02140391 	.word	0x02140391
  401654:	03910391 	.word	0x03910391
  401658:	03910391 	.word	0x03910391
  40165c:	02ee0391 	.word	0x02ee0391
  401660:	03910391 	.word	0x03910391
  401664:	03910311 	.word	0x03910311
  401668:	03910391 	.word	0x03910391
  40166c:	03910391 	.word	0x03910391
  401670:	03910391 	.word	0x03910391
  401674:	03910391 	.word	0x03910391
  401678:	03340391 	.word	0x03340391
  40167c:	0391038a 	.word	0x0391038a
  401680:	03910391 	.word	0x03910391
  401684:	038a0367 	.word	0x038a0367
  401688:	03910391 	.word	0x03910391
  40168c:	0391036c 	.word	0x0391036c
  401690:	02950379 	.word	0x02950379
  401694:	02e90085 	.word	0x02e90085
  401698:	029b0391 	.word	0x029b0391
  40169c:	02ba0391 	.word	0x02ba0391
  4016a0:	03910391 	.word	0x03910391
  4016a4:	0353      	.short	0x0353
  4016a6:	f10a 0a08 	add.w	sl, sl, #8
  4016aa:	9b02      	ldr	r3, [sp, #8]
  4016ac:	442b      	add	r3, r5
  4016ae:	9302      	str	r3, [sp, #8]
  4016b0:	e785      	b.n	4015be <_vfiprintf_r+0xaa>
  4016b2:	9900      	ldr	r1, [sp, #0]
  4016b4:	9805      	ldr	r0, [sp, #20]
  4016b6:	f000 fe61 	bl	40237c <__swsetup_r>
  4016ba:	2800      	cmp	r0, #0
  4016bc:	f040 8558 	bne.w	402170 <_vfiprintf_r+0xc5c>
  4016c0:	9b00      	ldr	r3, [sp, #0]
  4016c2:	899a      	ldrh	r2, [r3, #12]
  4016c4:	f002 021a 	and.w	r2, r2, #26
  4016c8:	2a0a      	cmp	r2, #10
  4016ca:	f47f af4b 	bne.w	401564 <_vfiprintf_r+0x50>
  4016ce:	9900      	ldr	r1, [sp, #0]
  4016d0:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
  4016d4:	2b00      	cmp	r3, #0
  4016d6:	f6ff af45 	blt.w	401564 <_vfiprintf_r+0x50>
  4016da:	4623      	mov	r3, r4
  4016dc:	4642      	mov	r2, r8
  4016de:	9805      	ldr	r0, [sp, #20]
  4016e0:	f000 fe16 	bl	402310 <__sbprintf>
  4016e4:	b02b      	add	sp, #172	; 0xac
  4016e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4016ea:	f000 fff3 	bl	4026d4 <__sinit>
  4016ee:	e71e      	b.n	40152e <_vfiprintf_r+0x1a>
  4016f0:	4264      	negs	r4, r4
  4016f2:	9304      	str	r3, [sp, #16]
  4016f4:	f046 0604 	orr.w	r6, r6, #4
  4016f8:	f898 3000 	ldrb.w	r3, [r8]
  4016fc:	e771      	b.n	4015e2 <_vfiprintf_r+0xce>
  4016fe:	2130      	movs	r1, #48	; 0x30
  401700:	9804      	ldr	r0, [sp, #16]
  401702:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
  401706:	9901      	ldr	r1, [sp, #4]
  401708:	9406      	str	r4, [sp, #24]
  40170a:	f04f 0300 	mov.w	r3, #0
  40170e:	2278      	movs	r2, #120	; 0x78
  401710:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  401714:	2900      	cmp	r1, #0
  401716:	4603      	mov	r3, r0
  401718:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
  40171c:	6804      	ldr	r4, [r0, #0]
  40171e:	f103 0304 	add.w	r3, r3, #4
  401722:	f04f 0500 	mov.w	r5, #0
  401726:	f046 0202 	orr.w	r2, r6, #2
  40172a:	f2c0 8525 	blt.w	402178 <_vfiprintf_r+0xc64>
  40172e:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  401732:	ea54 0205 	orrs.w	r2, r4, r5
  401736:	f046 0602 	orr.w	r6, r6, #2
  40173a:	9304      	str	r3, [sp, #16]
  40173c:	f040 84bf 	bne.w	4020be <_vfiprintf_r+0xbaa>
  401740:	48b3      	ldr	r0, [pc, #716]	; (401a10 <_vfiprintf_r+0x4fc>)
  401742:	9b01      	ldr	r3, [sp, #4]
  401744:	2b00      	cmp	r3, #0
  401746:	f040 841c 	bne.w	401f82 <_vfiprintf_r+0xa6e>
  40174a:	4699      	mov	r9, r3
  40174c:	2300      	movs	r3, #0
  40174e:	9301      	str	r3, [sp, #4]
  401750:	9303      	str	r3, [sp, #12]
  401752:	465f      	mov	r7, fp
  401754:	9b01      	ldr	r3, [sp, #4]
  401756:	9a03      	ldr	r2, [sp, #12]
  401758:	4293      	cmp	r3, r2
  40175a:	bfb8      	it	lt
  40175c:	4613      	movlt	r3, r2
  40175e:	461d      	mov	r5, r3
  401760:	f1b9 0f00 	cmp.w	r9, #0
  401764:	d000      	beq.n	401768 <_vfiprintf_r+0x254>
  401766:	3501      	adds	r5, #1
  401768:	f016 0302 	ands.w	r3, r6, #2
  40176c:	9307      	str	r3, [sp, #28]
  40176e:	bf18      	it	ne
  401770:	3502      	addne	r5, #2
  401772:	f016 0384 	ands.w	r3, r6, #132	; 0x84
  401776:	9308      	str	r3, [sp, #32]
  401778:	f040 82f1 	bne.w	401d5e <_vfiprintf_r+0x84a>
  40177c:	9b06      	ldr	r3, [sp, #24]
  40177e:	1b5c      	subs	r4, r3, r5
  401780:	2c00      	cmp	r4, #0
  401782:	f340 82ec 	ble.w	401d5e <_vfiprintf_r+0x84a>
  401786:	2c10      	cmp	r4, #16
  401788:	f340 8556 	ble.w	402238 <_vfiprintf_r+0xd24>
  40178c:	f8df 9284 	ldr.w	r9, [pc, #644]	; 401a14 <_vfiprintf_r+0x500>
  401790:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
  401794:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  401796:	46d4      	mov	ip, sl
  401798:	2310      	movs	r3, #16
  40179a:	46c2      	mov	sl, r8
  40179c:	4670      	mov	r0, lr
  40179e:	46a8      	mov	r8, r5
  4017a0:	464d      	mov	r5, r9
  4017a2:	f8dd 9014 	ldr.w	r9, [sp, #20]
  4017a6:	e007      	b.n	4017b8 <_vfiprintf_r+0x2a4>
  4017a8:	f100 0e02 	add.w	lr, r0, #2
  4017ac:	f10c 0c08 	add.w	ip, ip, #8
  4017b0:	4608      	mov	r0, r1
  4017b2:	3c10      	subs	r4, #16
  4017b4:	2c10      	cmp	r4, #16
  4017b6:	dd13      	ble.n	4017e0 <_vfiprintf_r+0x2cc>
  4017b8:	1c41      	adds	r1, r0, #1
  4017ba:	3210      	adds	r2, #16
  4017bc:	2907      	cmp	r1, #7
  4017be:	920f      	str	r2, [sp, #60]	; 0x3c
  4017c0:	f8cc 5000 	str.w	r5, [ip]
  4017c4:	f8cc 3004 	str.w	r3, [ip, #4]
  4017c8:	910e      	str	r1, [sp, #56]	; 0x38
  4017ca:	dded      	ble.n	4017a8 <_vfiprintf_r+0x294>
  4017cc:	2a00      	cmp	r2, #0
  4017ce:	f040 82b7 	bne.w	401d40 <_vfiprintf_r+0x82c>
  4017d2:	3c10      	subs	r4, #16
  4017d4:	2c10      	cmp	r4, #16
  4017d6:	4610      	mov	r0, r2
  4017d8:	f04f 0e01 	mov.w	lr, #1
  4017dc:	46dc      	mov	ip, fp
  4017de:	dceb      	bgt.n	4017b8 <_vfiprintf_r+0x2a4>
  4017e0:	46a9      	mov	r9, r5
  4017e2:	4670      	mov	r0, lr
  4017e4:	4645      	mov	r5, r8
  4017e6:	46d0      	mov	r8, sl
  4017e8:	46e2      	mov	sl, ip
  4017ea:	4422      	add	r2, r4
  4017ec:	2807      	cmp	r0, #7
  4017ee:	920f      	str	r2, [sp, #60]	; 0x3c
  4017f0:	f8ca 9000 	str.w	r9, [sl]
  4017f4:	f8ca 4004 	str.w	r4, [sl, #4]
  4017f8:	900e      	str	r0, [sp, #56]	; 0x38
  4017fa:	f300 8375 	bgt.w	401ee8 <_vfiprintf_r+0x9d4>
  4017fe:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  401802:	f10a 0a08 	add.w	sl, sl, #8
  401806:	f100 0e01 	add.w	lr, r0, #1
  40180a:	2b00      	cmp	r3, #0
  40180c:	f040 82b0 	bne.w	401d70 <_vfiprintf_r+0x85c>
  401810:	9b07      	ldr	r3, [sp, #28]
  401812:	2b00      	cmp	r3, #0
  401814:	f000 82c3 	beq.w	401d9e <_vfiprintf_r+0x88a>
  401818:	3202      	adds	r2, #2
  40181a:	a90c      	add	r1, sp, #48	; 0x30
  40181c:	2302      	movs	r3, #2
  40181e:	f1be 0f07 	cmp.w	lr, #7
  401822:	920f      	str	r2, [sp, #60]	; 0x3c
  401824:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  401828:	e88a 000a 	stmia.w	sl, {r1, r3}
  40182c:	f340 8378 	ble.w	401f20 <_vfiprintf_r+0xa0c>
  401830:	2a00      	cmp	r2, #0
  401832:	f040 840a 	bne.w	40204a <_vfiprintf_r+0xb36>
  401836:	9b08      	ldr	r3, [sp, #32]
  401838:	2b80      	cmp	r3, #128	; 0x80
  40183a:	f04f 0e01 	mov.w	lr, #1
  40183e:	4610      	mov	r0, r2
  401840:	46da      	mov	sl, fp
  401842:	f040 82b0 	bne.w	401da6 <_vfiprintf_r+0x892>
  401846:	9b06      	ldr	r3, [sp, #24]
  401848:	1b5c      	subs	r4, r3, r5
  40184a:	2c00      	cmp	r4, #0
  40184c:	f340 82ab 	ble.w	401da6 <_vfiprintf_r+0x892>
  401850:	2c10      	cmp	r4, #16
  401852:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 401a18 <_vfiprintf_r+0x504>
  401856:	f340 850b 	ble.w	402270 <_vfiprintf_r+0xd5c>
  40185a:	46d6      	mov	lr, sl
  40185c:	2310      	movs	r3, #16
  40185e:	46c2      	mov	sl, r8
  401860:	46a8      	mov	r8, r5
  401862:	464d      	mov	r5, r9
  401864:	f8dd 9014 	ldr.w	r9, [sp, #20]
  401868:	e007      	b.n	40187a <_vfiprintf_r+0x366>
  40186a:	f100 0c02 	add.w	ip, r0, #2
  40186e:	f10e 0e08 	add.w	lr, lr, #8
  401872:	4608      	mov	r0, r1
  401874:	3c10      	subs	r4, #16
  401876:	2c10      	cmp	r4, #16
  401878:	dd13      	ble.n	4018a2 <_vfiprintf_r+0x38e>
  40187a:	1c41      	adds	r1, r0, #1
  40187c:	3210      	adds	r2, #16
  40187e:	2907      	cmp	r1, #7
  401880:	920f      	str	r2, [sp, #60]	; 0x3c
  401882:	f8ce 5000 	str.w	r5, [lr]
  401886:	f8ce 3004 	str.w	r3, [lr, #4]
  40188a:	910e      	str	r1, [sp, #56]	; 0x38
  40188c:	dded      	ble.n	40186a <_vfiprintf_r+0x356>
  40188e:	2a00      	cmp	r2, #0
  401890:	f040 8315 	bne.w	401ebe <_vfiprintf_r+0x9aa>
  401894:	3c10      	subs	r4, #16
  401896:	2c10      	cmp	r4, #16
  401898:	f04f 0c01 	mov.w	ip, #1
  40189c:	4610      	mov	r0, r2
  40189e:	46de      	mov	lr, fp
  4018a0:	dceb      	bgt.n	40187a <_vfiprintf_r+0x366>
  4018a2:	46a9      	mov	r9, r5
  4018a4:	4645      	mov	r5, r8
  4018a6:	46d0      	mov	r8, sl
  4018a8:	46f2      	mov	sl, lr
  4018aa:	4422      	add	r2, r4
  4018ac:	f1bc 0f07 	cmp.w	ip, #7
  4018b0:	920f      	str	r2, [sp, #60]	; 0x3c
  4018b2:	f8ca 9000 	str.w	r9, [sl]
  4018b6:	f8ca 4004 	str.w	r4, [sl, #4]
  4018ba:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
  4018be:	f300 83d2 	bgt.w	402066 <_vfiprintf_r+0xb52>
  4018c2:	9b01      	ldr	r3, [sp, #4]
  4018c4:	9903      	ldr	r1, [sp, #12]
  4018c6:	1a5c      	subs	r4, r3, r1
  4018c8:	2c00      	cmp	r4, #0
  4018ca:	f10a 0a08 	add.w	sl, sl, #8
  4018ce:	f10c 0e01 	add.w	lr, ip, #1
  4018d2:	4660      	mov	r0, ip
  4018d4:	f300 826d 	bgt.w	401db2 <_vfiprintf_r+0x89e>
  4018d8:	9903      	ldr	r1, [sp, #12]
  4018da:	f8ca 7000 	str.w	r7, [sl]
  4018de:	440a      	add	r2, r1
  4018e0:	f1be 0f07 	cmp.w	lr, #7
  4018e4:	920f      	str	r2, [sp, #60]	; 0x3c
  4018e6:	f8ca 1004 	str.w	r1, [sl, #4]
  4018ea:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  4018ee:	f340 82ce 	ble.w	401e8e <_vfiprintf_r+0x97a>
  4018f2:	2a00      	cmp	r2, #0
  4018f4:	f040 833a 	bne.w	401f6c <_vfiprintf_r+0xa58>
  4018f8:	0770      	lsls	r0, r6, #29
  4018fa:	920e      	str	r2, [sp, #56]	; 0x38
  4018fc:	d538      	bpl.n	401970 <_vfiprintf_r+0x45c>
  4018fe:	9b06      	ldr	r3, [sp, #24]
  401900:	1b5c      	subs	r4, r3, r5
  401902:	2c00      	cmp	r4, #0
  401904:	dd34      	ble.n	401970 <_vfiprintf_r+0x45c>
  401906:	46da      	mov	sl, fp
  401908:	2c10      	cmp	r4, #16
  40190a:	f340 84ab 	ble.w	402264 <_vfiprintf_r+0xd50>
  40190e:	f8df 9104 	ldr.w	r9, [pc, #260]	; 401a14 <_vfiprintf_r+0x500>
  401912:	990e      	ldr	r1, [sp, #56]	; 0x38
  401914:	464f      	mov	r7, r9
  401916:	2610      	movs	r6, #16
  401918:	f8dd 9014 	ldr.w	r9, [sp, #20]
  40191c:	e006      	b.n	40192c <_vfiprintf_r+0x418>
  40191e:	1c88      	adds	r0, r1, #2
  401920:	f10a 0a08 	add.w	sl, sl, #8
  401924:	4619      	mov	r1, r3
  401926:	3c10      	subs	r4, #16
  401928:	2c10      	cmp	r4, #16
  40192a:	dd13      	ble.n	401954 <_vfiprintf_r+0x440>
  40192c:	1c4b      	adds	r3, r1, #1
  40192e:	3210      	adds	r2, #16
  401930:	2b07      	cmp	r3, #7
  401932:	920f      	str	r2, [sp, #60]	; 0x3c
  401934:	f8ca 7000 	str.w	r7, [sl]
  401938:	f8ca 6004 	str.w	r6, [sl, #4]
  40193c:	930e      	str	r3, [sp, #56]	; 0x38
  40193e:	ddee      	ble.n	40191e <_vfiprintf_r+0x40a>
  401940:	2a00      	cmp	r2, #0
  401942:	f040 828e 	bne.w	401e62 <_vfiprintf_r+0x94e>
  401946:	3c10      	subs	r4, #16
  401948:	2c10      	cmp	r4, #16
  40194a:	f04f 0001 	mov.w	r0, #1
  40194e:	4611      	mov	r1, r2
  401950:	46da      	mov	sl, fp
  401952:	dceb      	bgt.n	40192c <_vfiprintf_r+0x418>
  401954:	46b9      	mov	r9, r7
  401956:	4422      	add	r2, r4
  401958:	2807      	cmp	r0, #7
  40195a:	920f      	str	r2, [sp, #60]	; 0x3c
  40195c:	f8ca 9000 	str.w	r9, [sl]
  401960:	f8ca 4004 	str.w	r4, [sl, #4]
  401964:	900e      	str	r0, [sp, #56]	; 0x38
  401966:	f340 829b 	ble.w	401ea0 <_vfiprintf_r+0x98c>
  40196a:	2a00      	cmp	r2, #0
  40196c:	f040 8425 	bne.w	4021ba <_vfiprintf_r+0xca6>
  401970:	9b02      	ldr	r3, [sp, #8]
  401972:	9a06      	ldr	r2, [sp, #24]
  401974:	42aa      	cmp	r2, r5
  401976:	bfac      	ite	ge
  401978:	189b      	addge	r3, r3, r2
  40197a:	195b      	addlt	r3, r3, r5
  40197c:	9302      	str	r3, [sp, #8]
  40197e:	e299      	b.n	401eb4 <_vfiprintf_r+0x9a0>
  401980:	f046 0680 	orr.w	r6, r6, #128	; 0x80
  401984:	f898 3000 	ldrb.w	r3, [r8]
  401988:	e62b      	b.n	4015e2 <_vfiprintf_r+0xce>
  40198a:	9406      	str	r4, [sp, #24]
  40198c:	2900      	cmp	r1, #0
  40198e:	f040 84af 	bne.w	4022f0 <_vfiprintf_r+0xddc>
  401992:	f046 0610 	orr.w	r6, r6, #16
  401996:	06b3      	lsls	r3, r6, #26
  401998:	f140 8312 	bpl.w	401fc0 <_vfiprintf_r+0xaac>
  40199c:	9904      	ldr	r1, [sp, #16]
  40199e:	3107      	adds	r1, #7
  4019a0:	f021 0107 	bic.w	r1, r1, #7
  4019a4:	e9d1 2300 	ldrd	r2, r3, [r1]
  4019a8:	3108      	adds	r1, #8
  4019aa:	9104      	str	r1, [sp, #16]
  4019ac:	4614      	mov	r4, r2
  4019ae:	461d      	mov	r5, r3
  4019b0:	2a00      	cmp	r2, #0
  4019b2:	f173 0300 	sbcs.w	r3, r3, #0
  4019b6:	f2c0 8386 	blt.w	4020c6 <_vfiprintf_r+0xbb2>
  4019ba:	9b01      	ldr	r3, [sp, #4]
  4019bc:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  4019c0:	2b00      	cmp	r3, #0
  4019c2:	f2c0 831a 	blt.w	401ffa <_vfiprintf_r+0xae6>
  4019c6:	ea54 0305 	orrs.w	r3, r4, r5
  4019ca:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  4019ce:	f000 80ed 	beq.w	401bac <_vfiprintf_r+0x698>
  4019d2:	2d00      	cmp	r5, #0
  4019d4:	bf08      	it	eq
  4019d6:	2c0a      	cmpeq	r4, #10
  4019d8:	f0c0 80ed 	bcc.w	401bb6 <_vfiprintf_r+0x6a2>
  4019dc:	465f      	mov	r7, fp
  4019de:	4620      	mov	r0, r4
  4019e0:	4629      	mov	r1, r5
  4019e2:	220a      	movs	r2, #10
  4019e4:	2300      	movs	r3, #0
  4019e6:	f002 fa47 	bl	403e78 <__aeabi_uldivmod>
  4019ea:	3230      	adds	r2, #48	; 0x30
  4019ec:	f807 2d01 	strb.w	r2, [r7, #-1]!
  4019f0:	4620      	mov	r0, r4
  4019f2:	4629      	mov	r1, r5
  4019f4:	2300      	movs	r3, #0
  4019f6:	220a      	movs	r2, #10
  4019f8:	f002 fa3e 	bl	403e78 <__aeabi_uldivmod>
  4019fc:	4604      	mov	r4, r0
  4019fe:	460d      	mov	r5, r1
  401a00:	ea54 0305 	orrs.w	r3, r4, r5
  401a04:	d1eb      	bne.n	4019de <_vfiprintf_r+0x4ca>
  401a06:	ebc7 030b 	rsb	r3, r7, fp
  401a0a:	9303      	str	r3, [sp, #12]
  401a0c:	e6a2      	b.n	401754 <_vfiprintf_r+0x240>
  401a0e:	bf00      	nop
  401a10:	00404238 	.word	0x00404238
  401a14:	00404254 	.word	0x00404254
  401a18:	00404214 	.word	0x00404214
  401a1c:	9406      	str	r4, [sp, #24]
  401a1e:	2900      	cmp	r1, #0
  401a20:	f040 8462 	bne.w	4022e8 <_vfiprintf_r+0xdd4>
  401a24:	f046 0610 	orr.w	r6, r6, #16
  401a28:	f016 0320 	ands.w	r3, r6, #32
  401a2c:	f000 82ae 	beq.w	401f8c <_vfiprintf_r+0xa78>
  401a30:	9b04      	ldr	r3, [sp, #16]
  401a32:	3307      	adds	r3, #7
  401a34:	f023 0307 	bic.w	r3, r3, #7
  401a38:	f04f 0200 	mov.w	r2, #0
  401a3c:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
  401a40:	e9d3 4500 	ldrd	r4, r5, [r3]
  401a44:	f103 0208 	add.w	r2, r3, #8
  401a48:	9b01      	ldr	r3, [sp, #4]
  401a4a:	9204      	str	r2, [sp, #16]
  401a4c:	2b00      	cmp	r3, #0
  401a4e:	f2c0 8174 	blt.w	401d3a <_vfiprintf_r+0x826>
  401a52:	ea54 0305 	orrs.w	r3, r4, r5
  401a56:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  401a5a:	f040 816e 	bne.w	401d3a <_vfiprintf_r+0x826>
  401a5e:	9b01      	ldr	r3, [sp, #4]
  401a60:	2b00      	cmp	r3, #0
  401a62:	f000 8430 	beq.w	4022c6 <_vfiprintf_r+0xdb2>
  401a66:	f04f 0900 	mov.w	r9, #0
  401a6a:	2400      	movs	r4, #0
  401a6c:	2500      	movs	r5, #0
  401a6e:	465f      	mov	r7, fp
  401a70:	08e2      	lsrs	r2, r4, #3
  401a72:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  401a76:	08e9      	lsrs	r1, r5, #3
  401a78:	f004 0307 	and.w	r3, r4, #7
  401a7c:	460d      	mov	r5, r1
  401a7e:	4614      	mov	r4, r2
  401a80:	3330      	adds	r3, #48	; 0x30
  401a82:	ea54 0205 	orrs.w	r2, r4, r5
  401a86:	f807 3d01 	strb.w	r3, [r7, #-1]!
  401a8a:	d1f1      	bne.n	401a70 <_vfiprintf_r+0x55c>
  401a8c:	07f4      	lsls	r4, r6, #31
  401a8e:	d5ba      	bpl.n	401a06 <_vfiprintf_r+0x4f2>
  401a90:	2b30      	cmp	r3, #48	; 0x30
  401a92:	d0b8      	beq.n	401a06 <_vfiprintf_r+0x4f2>
  401a94:	2230      	movs	r2, #48	; 0x30
  401a96:	1e7b      	subs	r3, r7, #1
  401a98:	f807 2c01 	strb.w	r2, [r7, #-1]
  401a9c:	ebc3 020b 	rsb	r2, r3, fp
  401aa0:	9203      	str	r2, [sp, #12]
  401aa2:	461f      	mov	r7, r3
  401aa4:	e656      	b.n	401754 <_vfiprintf_r+0x240>
  401aa6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  401aaa:	2400      	movs	r4, #0
  401aac:	f818 3b01 	ldrb.w	r3, [r8], #1
  401ab0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  401ab4:	eb02 0444 	add.w	r4, r2, r4, lsl #1
  401ab8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  401abc:	2a09      	cmp	r2, #9
  401abe:	d9f5      	bls.n	401aac <_vfiprintf_r+0x598>
  401ac0:	e591      	b.n	4015e6 <_vfiprintf_r+0xd2>
  401ac2:	f898 3000 	ldrb.w	r3, [r8]
  401ac6:	2101      	movs	r1, #1
  401ac8:	202b      	movs	r0, #43	; 0x2b
  401aca:	e58a      	b.n	4015e2 <_vfiprintf_r+0xce>
  401acc:	f898 3000 	ldrb.w	r3, [r8]
  401ad0:	2b2a      	cmp	r3, #42	; 0x2a
  401ad2:	f108 0501 	add.w	r5, r8, #1
  401ad6:	f000 83dd 	beq.w	402294 <_vfiprintf_r+0xd80>
  401ada:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  401ade:	2a09      	cmp	r2, #9
  401ae0:	46a8      	mov	r8, r5
  401ae2:	bf98      	it	ls
  401ae4:	2500      	movls	r5, #0
  401ae6:	f200 83ce 	bhi.w	402286 <_vfiprintf_r+0xd72>
  401aea:	f818 3b01 	ldrb.w	r3, [r8], #1
  401aee:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  401af2:	eb02 0545 	add.w	r5, r2, r5, lsl #1
  401af6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  401afa:	2a09      	cmp	r2, #9
  401afc:	d9f5      	bls.n	401aea <_vfiprintf_r+0x5d6>
  401afe:	ea45 72e5 	orr.w	r2, r5, r5, asr #31
  401b02:	9201      	str	r2, [sp, #4]
  401b04:	e56f      	b.n	4015e6 <_vfiprintf_r+0xd2>
  401b06:	9a04      	ldr	r2, [sp, #16]
  401b08:	6814      	ldr	r4, [r2, #0]
  401b0a:	4613      	mov	r3, r2
  401b0c:	2c00      	cmp	r4, #0
  401b0e:	f103 0304 	add.w	r3, r3, #4
  401b12:	f6ff aded 	blt.w	4016f0 <_vfiprintf_r+0x1dc>
  401b16:	9304      	str	r3, [sp, #16]
  401b18:	f898 3000 	ldrb.w	r3, [r8]
  401b1c:	e561      	b.n	4015e2 <_vfiprintf_r+0xce>
  401b1e:	9406      	str	r4, [sp, #24]
  401b20:	2900      	cmp	r1, #0
  401b22:	d081      	beq.n	401a28 <_vfiprintf_r+0x514>
  401b24:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  401b28:	e77e      	b.n	401a28 <_vfiprintf_r+0x514>
  401b2a:	9a04      	ldr	r2, [sp, #16]
  401b2c:	9406      	str	r4, [sp, #24]
  401b2e:	6817      	ldr	r7, [r2, #0]
  401b30:	f04f 0300 	mov.w	r3, #0
  401b34:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  401b38:	1d14      	adds	r4, r2, #4
  401b3a:	9b01      	ldr	r3, [sp, #4]
  401b3c:	2f00      	cmp	r7, #0
  401b3e:	f000 8386 	beq.w	40224e <_vfiprintf_r+0xd3a>
  401b42:	2b00      	cmp	r3, #0
  401b44:	f2c0 835f 	blt.w	402206 <_vfiprintf_r+0xcf2>
  401b48:	461a      	mov	r2, r3
  401b4a:	2100      	movs	r1, #0
  401b4c:	4638      	mov	r0, r7
  401b4e:	f001 fc5f 	bl	403410 <memchr>
  401b52:	2800      	cmp	r0, #0
  401b54:	f000 838f 	beq.w	402276 <_vfiprintf_r+0xd62>
  401b58:	1bc3      	subs	r3, r0, r7
  401b5a:	9303      	str	r3, [sp, #12]
  401b5c:	2300      	movs	r3, #0
  401b5e:	9404      	str	r4, [sp, #16]
  401b60:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  401b64:	9301      	str	r3, [sp, #4]
  401b66:	e5f5      	b.n	401754 <_vfiprintf_r+0x240>
  401b68:	9406      	str	r4, [sp, #24]
  401b6a:	2900      	cmp	r1, #0
  401b6c:	f040 83b9 	bne.w	4022e2 <_vfiprintf_r+0xdce>
  401b70:	f016 0920 	ands.w	r9, r6, #32
  401b74:	d135      	bne.n	401be2 <_vfiprintf_r+0x6ce>
  401b76:	f016 0310 	ands.w	r3, r6, #16
  401b7a:	d103      	bne.n	401b84 <_vfiprintf_r+0x670>
  401b7c:	f016 0940 	ands.w	r9, r6, #64	; 0x40
  401b80:	f040 832a 	bne.w	4021d8 <_vfiprintf_r+0xcc4>
  401b84:	9a04      	ldr	r2, [sp, #16]
  401b86:	4613      	mov	r3, r2
  401b88:	6814      	ldr	r4, [r2, #0]
  401b8a:	9a01      	ldr	r2, [sp, #4]
  401b8c:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  401b90:	2a00      	cmp	r2, #0
  401b92:	f103 0304 	add.w	r3, r3, #4
  401b96:	f04f 0500 	mov.w	r5, #0
  401b9a:	f2c0 8332 	blt.w	402202 <_vfiprintf_r+0xcee>
  401b9e:	ea54 0205 	orrs.w	r2, r4, r5
  401ba2:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  401ba6:	9304      	str	r3, [sp, #16]
  401ba8:	f47f af13 	bne.w	4019d2 <_vfiprintf_r+0x4be>
  401bac:	9b01      	ldr	r3, [sp, #4]
  401bae:	2b00      	cmp	r3, #0
  401bb0:	f43f adcc 	beq.w	40174c <_vfiprintf_r+0x238>
  401bb4:	2400      	movs	r4, #0
  401bb6:	af2a      	add	r7, sp, #168	; 0xa8
  401bb8:	3430      	adds	r4, #48	; 0x30
  401bba:	f807 4d41 	strb.w	r4, [r7, #-65]!
  401bbe:	ebc7 030b 	rsb	r3, r7, fp
  401bc2:	9303      	str	r3, [sp, #12]
  401bc4:	e5c6      	b.n	401754 <_vfiprintf_r+0x240>
  401bc6:	f046 0620 	orr.w	r6, r6, #32
  401bca:	f898 3000 	ldrb.w	r3, [r8]
  401bce:	e508      	b.n	4015e2 <_vfiprintf_r+0xce>
  401bd0:	9406      	str	r4, [sp, #24]
  401bd2:	2900      	cmp	r1, #0
  401bd4:	f040 836e 	bne.w	4022b4 <_vfiprintf_r+0xda0>
  401bd8:	f046 0610 	orr.w	r6, r6, #16
  401bdc:	f016 0920 	ands.w	r9, r6, #32
  401be0:	d0c9      	beq.n	401b76 <_vfiprintf_r+0x662>
  401be2:	9b04      	ldr	r3, [sp, #16]
  401be4:	3307      	adds	r3, #7
  401be6:	f023 0307 	bic.w	r3, r3, #7
  401bea:	f04f 0200 	mov.w	r2, #0
  401bee:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
  401bf2:	e9d3 4500 	ldrd	r4, r5, [r3]
  401bf6:	f103 0208 	add.w	r2, r3, #8
  401bfa:	9b01      	ldr	r3, [sp, #4]
  401bfc:	9204      	str	r2, [sp, #16]
  401bfe:	2b00      	cmp	r3, #0
  401c00:	f2c0 81f9 	blt.w	401ff6 <_vfiprintf_r+0xae2>
  401c04:	ea54 0305 	orrs.w	r3, r4, r5
  401c08:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  401c0c:	f04f 0900 	mov.w	r9, #0
  401c10:	f47f aedf 	bne.w	4019d2 <_vfiprintf_r+0x4be>
  401c14:	e7ca      	b.n	401bac <_vfiprintf_r+0x698>
  401c16:	9406      	str	r4, [sp, #24]
  401c18:	2900      	cmp	r1, #0
  401c1a:	f040 8351 	bne.w	4022c0 <_vfiprintf_r+0xdac>
  401c1e:	06b2      	lsls	r2, r6, #26
  401c20:	48ae      	ldr	r0, [pc, #696]	; (401edc <_vfiprintf_r+0x9c8>)
  401c22:	d541      	bpl.n	401ca8 <_vfiprintf_r+0x794>
  401c24:	9a04      	ldr	r2, [sp, #16]
  401c26:	3207      	adds	r2, #7
  401c28:	f022 0207 	bic.w	r2, r2, #7
  401c2c:	e9d2 4500 	ldrd	r4, r5, [r2]
  401c30:	f102 0108 	add.w	r1, r2, #8
  401c34:	9104      	str	r1, [sp, #16]
  401c36:	f016 0901 	ands.w	r9, r6, #1
  401c3a:	f000 8177 	beq.w	401f2c <_vfiprintf_r+0xa18>
  401c3e:	ea54 0205 	orrs.w	r2, r4, r5
  401c42:	f040 8226 	bne.w	402092 <_vfiprintf_r+0xb7e>
  401c46:	f04f 0300 	mov.w	r3, #0
  401c4a:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  401c4e:	9b01      	ldr	r3, [sp, #4]
  401c50:	2b00      	cmp	r3, #0
  401c52:	f2c0 8196 	blt.w	401f82 <_vfiprintf_r+0xa6e>
  401c56:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  401c5a:	e572      	b.n	401742 <_vfiprintf_r+0x22e>
  401c5c:	9a04      	ldr	r2, [sp, #16]
  401c5e:	9406      	str	r4, [sp, #24]
  401c60:	6813      	ldr	r3, [r2, #0]
  401c62:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
  401c66:	4613      	mov	r3, r2
  401c68:	f04f 0100 	mov.w	r1, #0
  401c6c:	2501      	movs	r5, #1
  401c6e:	3304      	adds	r3, #4
  401c70:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  401c74:	9304      	str	r3, [sp, #16]
  401c76:	9503      	str	r5, [sp, #12]
  401c78:	af10      	add	r7, sp, #64	; 0x40
  401c7a:	2300      	movs	r3, #0
  401c7c:	9301      	str	r3, [sp, #4]
  401c7e:	e573      	b.n	401768 <_vfiprintf_r+0x254>
  401c80:	f898 3000 	ldrb.w	r3, [r8]
  401c84:	2800      	cmp	r0, #0
  401c86:	f47f acac 	bne.w	4015e2 <_vfiprintf_r+0xce>
  401c8a:	2101      	movs	r1, #1
  401c8c:	2020      	movs	r0, #32
  401c8e:	e4a8      	b.n	4015e2 <_vfiprintf_r+0xce>
  401c90:	f046 0601 	orr.w	r6, r6, #1
  401c94:	f898 3000 	ldrb.w	r3, [r8]
  401c98:	e4a3      	b.n	4015e2 <_vfiprintf_r+0xce>
  401c9a:	9406      	str	r4, [sp, #24]
  401c9c:	2900      	cmp	r1, #0
  401c9e:	f040 830c 	bne.w	4022ba <_vfiprintf_r+0xda6>
  401ca2:	06b2      	lsls	r2, r6, #26
  401ca4:	488e      	ldr	r0, [pc, #568]	; (401ee0 <_vfiprintf_r+0x9cc>)
  401ca6:	d4bd      	bmi.n	401c24 <_vfiprintf_r+0x710>
  401ca8:	9904      	ldr	r1, [sp, #16]
  401caa:	06f7      	lsls	r7, r6, #27
  401cac:	460a      	mov	r2, r1
  401cae:	f100 819d 	bmi.w	401fec <_vfiprintf_r+0xad8>
  401cb2:	0675      	lsls	r5, r6, #25
  401cb4:	f140 819a 	bpl.w	401fec <_vfiprintf_r+0xad8>
  401cb8:	3204      	adds	r2, #4
  401cba:	880c      	ldrh	r4, [r1, #0]
  401cbc:	9204      	str	r2, [sp, #16]
  401cbe:	2500      	movs	r5, #0
  401cc0:	e7b9      	b.n	401c36 <_vfiprintf_r+0x722>
  401cc2:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  401cc6:	f898 3000 	ldrb.w	r3, [r8]
  401cca:	e48a      	b.n	4015e2 <_vfiprintf_r+0xce>
  401ccc:	f898 3000 	ldrb.w	r3, [r8]
  401cd0:	2b6c      	cmp	r3, #108	; 0x6c
  401cd2:	bf03      	ittte	eq
  401cd4:	f898 3001 	ldrbeq.w	r3, [r8, #1]
  401cd8:	f046 0620 	orreq.w	r6, r6, #32
  401cdc:	f108 0801 	addeq.w	r8, r8, #1
  401ce0:	f046 0610 	orrne.w	r6, r6, #16
  401ce4:	e47d      	b.n	4015e2 <_vfiprintf_r+0xce>
  401ce6:	2900      	cmp	r1, #0
  401ce8:	f040 8309 	bne.w	4022fe <_vfiprintf_r+0xdea>
  401cec:	06b4      	lsls	r4, r6, #26
  401cee:	f140 821c 	bpl.w	40212a <_vfiprintf_r+0xc16>
  401cf2:	9a04      	ldr	r2, [sp, #16]
  401cf4:	9902      	ldr	r1, [sp, #8]
  401cf6:	6813      	ldr	r3, [r2, #0]
  401cf8:	17cd      	asrs	r5, r1, #31
  401cfa:	4608      	mov	r0, r1
  401cfc:	3204      	adds	r2, #4
  401cfe:	4629      	mov	r1, r5
  401d00:	9204      	str	r2, [sp, #16]
  401d02:	e9c3 0100 	strd	r0, r1, [r3]
  401d06:	e436      	b.n	401576 <_vfiprintf_r+0x62>
  401d08:	9406      	str	r4, [sp, #24]
  401d0a:	2900      	cmp	r1, #0
  401d0c:	f43f ae43 	beq.w	401996 <_vfiprintf_r+0x482>
  401d10:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  401d14:	e63f      	b.n	401996 <_vfiprintf_r+0x482>
  401d16:	9406      	str	r4, [sp, #24]
  401d18:	2900      	cmp	r1, #0
  401d1a:	f040 82ed 	bne.w	4022f8 <_vfiprintf_r+0xde4>
  401d1e:	2b00      	cmp	r3, #0
  401d20:	f000 808f 	beq.w	401e42 <_vfiprintf_r+0x92e>
  401d24:	2501      	movs	r5, #1
  401d26:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
  401d2a:	f04f 0300 	mov.w	r3, #0
  401d2e:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  401d32:	9503      	str	r5, [sp, #12]
  401d34:	af10      	add	r7, sp, #64	; 0x40
  401d36:	e7a0      	b.n	401c7a <_vfiprintf_r+0x766>
  401d38:	9304      	str	r3, [sp, #16]
  401d3a:	f04f 0900 	mov.w	r9, #0
  401d3e:	e696      	b.n	401a6e <_vfiprintf_r+0x55a>
  401d40:	aa0d      	add	r2, sp, #52	; 0x34
  401d42:	9900      	ldr	r1, [sp, #0]
  401d44:	9309      	str	r3, [sp, #36]	; 0x24
  401d46:	4648      	mov	r0, r9
  401d48:	f7ff fba8 	bl	40149c <__sprint_r.part.0>
  401d4c:	2800      	cmp	r0, #0
  401d4e:	d17f      	bne.n	401e50 <_vfiprintf_r+0x93c>
  401d50:	980e      	ldr	r0, [sp, #56]	; 0x38
  401d52:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  401d54:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401d56:	f100 0e01 	add.w	lr, r0, #1
  401d5a:	46dc      	mov	ip, fp
  401d5c:	e529      	b.n	4017b2 <_vfiprintf_r+0x29e>
  401d5e:	980e      	ldr	r0, [sp, #56]	; 0x38
  401d60:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  401d62:	f100 0e01 	add.w	lr, r0, #1
  401d66:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  401d6a:	2b00      	cmp	r3, #0
  401d6c:	f43f ad50 	beq.w	401810 <_vfiprintf_r+0x2fc>
  401d70:	3201      	adds	r2, #1
  401d72:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
  401d76:	2301      	movs	r3, #1
  401d78:	f1be 0f07 	cmp.w	lr, #7
  401d7c:	920f      	str	r2, [sp, #60]	; 0x3c
  401d7e:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  401d82:	e88a 000a 	stmia.w	sl, {r1, r3}
  401d86:	f340 80bf 	ble.w	401f08 <_vfiprintf_r+0x9f4>
  401d8a:	2a00      	cmp	r2, #0
  401d8c:	f040 814e 	bne.w	40202c <_vfiprintf_r+0xb18>
  401d90:	9907      	ldr	r1, [sp, #28]
  401d92:	2900      	cmp	r1, #0
  401d94:	f040 80be 	bne.w	401f14 <_vfiprintf_r+0xa00>
  401d98:	469e      	mov	lr, r3
  401d9a:	4610      	mov	r0, r2
  401d9c:	46da      	mov	sl, fp
  401d9e:	9b08      	ldr	r3, [sp, #32]
  401da0:	2b80      	cmp	r3, #128	; 0x80
  401da2:	f43f ad50 	beq.w	401846 <_vfiprintf_r+0x332>
  401da6:	9b01      	ldr	r3, [sp, #4]
  401da8:	9903      	ldr	r1, [sp, #12]
  401daa:	1a5c      	subs	r4, r3, r1
  401dac:	2c00      	cmp	r4, #0
  401dae:	f77f ad93 	ble.w	4018d8 <_vfiprintf_r+0x3c4>
  401db2:	2c10      	cmp	r4, #16
  401db4:	f8df 912c 	ldr.w	r9, [pc, #300]	; 401ee4 <_vfiprintf_r+0x9d0>
  401db8:	dd25      	ble.n	401e06 <_vfiprintf_r+0x8f2>
  401dba:	46d4      	mov	ip, sl
  401dbc:	2310      	movs	r3, #16
  401dbe:	46c2      	mov	sl, r8
  401dc0:	46a8      	mov	r8, r5
  401dc2:	464d      	mov	r5, r9
  401dc4:	f8dd 9014 	ldr.w	r9, [sp, #20]
  401dc8:	e007      	b.n	401dda <_vfiprintf_r+0x8c6>
  401dca:	f100 0e02 	add.w	lr, r0, #2
  401dce:	f10c 0c08 	add.w	ip, ip, #8
  401dd2:	4608      	mov	r0, r1
  401dd4:	3c10      	subs	r4, #16
  401dd6:	2c10      	cmp	r4, #16
  401dd8:	dd11      	ble.n	401dfe <_vfiprintf_r+0x8ea>
  401dda:	1c41      	adds	r1, r0, #1
  401ddc:	3210      	adds	r2, #16
  401dde:	2907      	cmp	r1, #7
  401de0:	920f      	str	r2, [sp, #60]	; 0x3c
  401de2:	f8cc 5000 	str.w	r5, [ip]
  401de6:	f8cc 3004 	str.w	r3, [ip, #4]
  401dea:	910e      	str	r1, [sp, #56]	; 0x38
  401dec:	dded      	ble.n	401dca <_vfiprintf_r+0x8b6>
  401dee:	b9d2      	cbnz	r2, 401e26 <_vfiprintf_r+0x912>
  401df0:	3c10      	subs	r4, #16
  401df2:	2c10      	cmp	r4, #16
  401df4:	f04f 0e01 	mov.w	lr, #1
  401df8:	4610      	mov	r0, r2
  401dfa:	46dc      	mov	ip, fp
  401dfc:	dced      	bgt.n	401dda <_vfiprintf_r+0x8c6>
  401dfe:	46a9      	mov	r9, r5
  401e00:	4645      	mov	r5, r8
  401e02:	46d0      	mov	r8, sl
  401e04:	46e2      	mov	sl, ip
  401e06:	4422      	add	r2, r4
  401e08:	f1be 0f07 	cmp.w	lr, #7
  401e0c:	920f      	str	r2, [sp, #60]	; 0x3c
  401e0e:	f8ca 9000 	str.w	r9, [sl]
  401e12:	f8ca 4004 	str.w	r4, [sl, #4]
  401e16:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  401e1a:	dc2e      	bgt.n	401e7a <_vfiprintf_r+0x966>
  401e1c:	f10a 0a08 	add.w	sl, sl, #8
  401e20:	f10e 0e01 	add.w	lr, lr, #1
  401e24:	e558      	b.n	4018d8 <_vfiprintf_r+0x3c4>
  401e26:	aa0d      	add	r2, sp, #52	; 0x34
  401e28:	9900      	ldr	r1, [sp, #0]
  401e2a:	9301      	str	r3, [sp, #4]
  401e2c:	4648      	mov	r0, r9
  401e2e:	f7ff fb35 	bl	40149c <__sprint_r.part.0>
  401e32:	b968      	cbnz	r0, 401e50 <_vfiprintf_r+0x93c>
  401e34:	980e      	ldr	r0, [sp, #56]	; 0x38
  401e36:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  401e38:	9b01      	ldr	r3, [sp, #4]
  401e3a:	f100 0e01 	add.w	lr, r0, #1
  401e3e:	46dc      	mov	ip, fp
  401e40:	e7c8      	b.n	401dd4 <_vfiprintf_r+0x8c0>
  401e42:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  401e44:	b123      	cbz	r3, 401e50 <_vfiprintf_r+0x93c>
  401e46:	9805      	ldr	r0, [sp, #20]
  401e48:	9900      	ldr	r1, [sp, #0]
  401e4a:	aa0d      	add	r2, sp, #52	; 0x34
  401e4c:	f7ff fb26 	bl	40149c <__sprint_r.part.0>
  401e50:	9b00      	ldr	r3, [sp, #0]
  401e52:	899b      	ldrh	r3, [r3, #12]
  401e54:	065a      	lsls	r2, r3, #25
  401e56:	f100 818b 	bmi.w	402170 <_vfiprintf_r+0xc5c>
  401e5a:	9802      	ldr	r0, [sp, #8]
  401e5c:	b02b      	add	sp, #172	; 0xac
  401e5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401e62:	aa0d      	add	r2, sp, #52	; 0x34
  401e64:	9900      	ldr	r1, [sp, #0]
  401e66:	4648      	mov	r0, r9
  401e68:	f7ff fb18 	bl	40149c <__sprint_r.part.0>
  401e6c:	2800      	cmp	r0, #0
  401e6e:	d1ef      	bne.n	401e50 <_vfiprintf_r+0x93c>
  401e70:	990e      	ldr	r1, [sp, #56]	; 0x38
  401e72:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  401e74:	1c48      	adds	r0, r1, #1
  401e76:	46da      	mov	sl, fp
  401e78:	e555      	b.n	401926 <_vfiprintf_r+0x412>
  401e7a:	2a00      	cmp	r2, #0
  401e7c:	f040 80fb 	bne.w	402076 <_vfiprintf_r+0xb62>
  401e80:	9a03      	ldr	r2, [sp, #12]
  401e82:	921b      	str	r2, [sp, #108]	; 0x6c
  401e84:	2301      	movs	r3, #1
  401e86:	920f      	str	r2, [sp, #60]	; 0x3c
  401e88:	971a      	str	r7, [sp, #104]	; 0x68
  401e8a:	930e      	str	r3, [sp, #56]	; 0x38
  401e8c:	46da      	mov	sl, fp
  401e8e:	f10a 0a08 	add.w	sl, sl, #8
  401e92:	0771      	lsls	r1, r6, #29
  401e94:	d504      	bpl.n	401ea0 <_vfiprintf_r+0x98c>
  401e96:	9b06      	ldr	r3, [sp, #24]
  401e98:	1b5c      	subs	r4, r3, r5
  401e9a:	2c00      	cmp	r4, #0
  401e9c:	f73f ad34 	bgt.w	401908 <_vfiprintf_r+0x3f4>
  401ea0:	9b02      	ldr	r3, [sp, #8]
  401ea2:	9906      	ldr	r1, [sp, #24]
  401ea4:	42a9      	cmp	r1, r5
  401ea6:	bfac      	ite	ge
  401ea8:	185b      	addge	r3, r3, r1
  401eaa:	195b      	addlt	r3, r3, r5
  401eac:	9302      	str	r3, [sp, #8]
  401eae:	2a00      	cmp	r2, #0
  401eb0:	f040 80b3 	bne.w	40201a <_vfiprintf_r+0xb06>
  401eb4:	2300      	movs	r3, #0
  401eb6:	930e      	str	r3, [sp, #56]	; 0x38
  401eb8:	46da      	mov	sl, fp
  401eba:	f7ff bb5c 	b.w	401576 <_vfiprintf_r+0x62>
  401ebe:	aa0d      	add	r2, sp, #52	; 0x34
  401ec0:	9900      	ldr	r1, [sp, #0]
  401ec2:	9307      	str	r3, [sp, #28]
  401ec4:	4648      	mov	r0, r9
  401ec6:	f7ff fae9 	bl	40149c <__sprint_r.part.0>
  401eca:	2800      	cmp	r0, #0
  401ecc:	d1c0      	bne.n	401e50 <_vfiprintf_r+0x93c>
  401ece:	980e      	ldr	r0, [sp, #56]	; 0x38
  401ed0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  401ed2:	9b07      	ldr	r3, [sp, #28]
  401ed4:	f100 0c01 	add.w	ip, r0, #1
  401ed8:	46de      	mov	lr, fp
  401eda:	e4cb      	b.n	401874 <_vfiprintf_r+0x360>
  401edc:	00404224 	.word	0x00404224
  401ee0:	00404238 	.word	0x00404238
  401ee4:	00404214 	.word	0x00404214
  401ee8:	2a00      	cmp	r2, #0
  401eea:	f040 8133 	bne.w	402154 <_vfiprintf_r+0xc40>
  401eee:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  401ef2:	2b00      	cmp	r3, #0
  401ef4:	f000 80f5 	beq.w	4020e2 <_vfiprintf_r+0xbce>
  401ef8:	2301      	movs	r3, #1
  401efa:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
  401efe:	461a      	mov	r2, r3
  401f00:	931b      	str	r3, [sp, #108]	; 0x6c
  401f02:	469e      	mov	lr, r3
  401f04:	911a      	str	r1, [sp, #104]	; 0x68
  401f06:	46da      	mov	sl, fp
  401f08:	4670      	mov	r0, lr
  401f0a:	f10a 0a08 	add.w	sl, sl, #8
  401f0e:	f10e 0e01 	add.w	lr, lr, #1
  401f12:	e47d      	b.n	401810 <_vfiprintf_r+0x2fc>
  401f14:	a90c      	add	r1, sp, #48	; 0x30
  401f16:	2202      	movs	r2, #2
  401f18:	469e      	mov	lr, r3
  401f1a:	911a      	str	r1, [sp, #104]	; 0x68
  401f1c:	921b      	str	r2, [sp, #108]	; 0x6c
  401f1e:	46da      	mov	sl, fp
  401f20:	4670      	mov	r0, lr
  401f22:	f10a 0a08 	add.w	sl, sl, #8
  401f26:	f10e 0e01 	add.w	lr, lr, #1
  401f2a:	e738      	b.n	401d9e <_vfiprintf_r+0x88a>
  401f2c:	9b01      	ldr	r3, [sp, #4]
  401f2e:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  401f32:	2b00      	cmp	r3, #0
  401f34:	f2c0 812a 	blt.w	40218c <_vfiprintf_r+0xc78>
  401f38:	ea54 0305 	orrs.w	r3, r4, r5
  401f3c:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  401f40:	f43f abff 	beq.w	401742 <_vfiprintf_r+0x22e>
  401f44:	465f      	mov	r7, fp
  401f46:	0923      	lsrs	r3, r4, #4
  401f48:	f004 010f 	and.w	r1, r4, #15
  401f4c:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  401f50:	092a      	lsrs	r2, r5, #4
  401f52:	461c      	mov	r4, r3
  401f54:	4615      	mov	r5, r2
  401f56:	5c43      	ldrb	r3, [r0, r1]
  401f58:	f807 3d01 	strb.w	r3, [r7, #-1]!
  401f5c:	ea54 0305 	orrs.w	r3, r4, r5
  401f60:	d1f1      	bne.n	401f46 <_vfiprintf_r+0xa32>
  401f62:	ebc7 030b 	rsb	r3, r7, fp
  401f66:	9303      	str	r3, [sp, #12]
  401f68:	f7ff bbf4 	b.w	401754 <_vfiprintf_r+0x240>
  401f6c:	aa0d      	add	r2, sp, #52	; 0x34
  401f6e:	9900      	ldr	r1, [sp, #0]
  401f70:	9805      	ldr	r0, [sp, #20]
  401f72:	f7ff fa93 	bl	40149c <__sprint_r.part.0>
  401f76:	2800      	cmp	r0, #0
  401f78:	f47f af6a 	bne.w	401e50 <_vfiprintf_r+0x93c>
  401f7c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  401f7e:	46da      	mov	sl, fp
  401f80:	e787      	b.n	401e92 <_vfiprintf_r+0x97e>
  401f82:	f04f 0900 	mov.w	r9, #0
  401f86:	2400      	movs	r4, #0
  401f88:	2500      	movs	r5, #0
  401f8a:	e7db      	b.n	401f44 <_vfiprintf_r+0xa30>
  401f8c:	f016 0210 	ands.w	r2, r6, #16
  401f90:	f000 80b2 	beq.w	4020f8 <_vfiprintf_r+0xbe4>
  401f94:	9904      	ldr	r1, [sp, #16]
  401f96:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  401f9a:	460a      	mov	r2, r1
  401f9c:	680c      	ldr	r4, [r1, #0]
  401f9e:	9901      	ldr	r1, [sp, #4]
  401fa0:	2900      	cmp	r1, #0
  401fa2:	f102 0204 	add.w	r2, r2, #4
  401fa6:	f04f 0500 	mov.w	r5, #0
  401faa:	f2c0 8159 	blt.w	402260 <_vfiprintf_r+0xd4c>
  401fae:	ea54 0105 	orrs.w	r1, r4, r5
  401fb2:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  401fb6:	9204      	str	r2, [sp, #16]
  401fb8:	f43f ad51 	beq.w	401a5e <_vfiprintf_r+0x54a>
  401fbc:	4699      	mov	r9, r3
  401fbe:	e556      	b.n	401a6e <_vfiprintf_r+0x55a>
  401fc0:	06f7      	lsls	r7, r6, #27
  401fc2:	d40a      	bmi.n	401fda <_vfiprintf_r+0xac6>
  401fc4:	0675      	lsls	r5, r6, #25
  401fc6:	d508      	bpl.n	401fda <_vfiprintf_r+0xac6>
  401fc8:	9904      	ldr	r1, [sp, #16]
  401fca:	f9b1 4000 	ldrsh.w	r4, [r1]
  401fce:	3104      	adds	r1, #4
  401fd0:	17e5      	asrs	r5, r4, #31
  401fd2:	4622      	mov	r2, r4
  401fd4:	462b      	mov	r3, r5
  401fd6:	9104      	str	r1, [sp, #16]
  401fd8:	e4ea      	b.n	4019b0 <_vfiprintf_r+0x49c>
  401fda:	9a04      	ldr	r2, [sp, #16]
  401fdc:	6814      	ldr	r4, [r2, #0]
  401fde:	4613      	mov	r3, r2
  401fe0:	3304      	adds	r3, #4
  401fe2:	17e5      	asrs	r5, r4, #31
  401fe4:	9304      	str	r3, [sp, #16]
  401fe6:	4622      	mov	r2, r4
  401fe8:	462b      	mov	r3, r5
  401fea:	e4e1      	b.n	4019b0 <_vfiprintf_r+0x49c>
  401fec:	6814      	ldr	r4, [r2, #0]
  401fee:	3204      	adds	r2, #4
  401ff0:	9204      	str	r2, [sp, #16]
  401ff2:	2500      	movs	r5, #0
  401ff4:	e61f      	b.n	401c36 <_vfiprintf_r+0x722>
  401ff6:	f04f 0900 	mov.w	r9, #0
  401ffa:	ea54 0305 	orrs.w	r3, r4, r5
  401ffe:	f47f ace8 	bne.w	4019d2 <_vfiprintf_r+0x4be>
  402002:	e5d8      	b.n	401bb6 <_vfiprintf_r+0x6a2>
  402004:	aa0d      	add	r2, sp, #52	; 0x34
  402006:	9900      	ldr	r1, [sp, #0]
  402008:	9805      	ldr	r0, [sp, #20]
  40200a:	f7ff fa47 	bl	40149c <__sprint_r.part.0>
  40200e:	2800      	cmp	r0, #0
  402010:	f47f af1e 	bne.w	401e50 <_vfiprintf_r+0x93c>
  402014:	46da      	mov	sl, fp
  402016:	f7ff bb48 	b.w	4016aa <_vfiprintf_r+0x196>
  40201a:	aa0d      	add	r2, sp, #52	; 0x34
  40201c:	9900      	ldr	r1, [sp, #0]
  40201e:	9805      	ldr	r0, [sp, #20]
  402020:	f7ff fa3c 	bl	40149c <__sprint_r.part.0>
  402024:	2800      	cmp	r0, #0
  402026:	f43f af45 	beq.w	401eb4 <_vfiprintf_r+0x9a0>
  40202a:	e711      	b.n	401e50 <_vfiprintf_r+0x93c>
  40202c:	aa0d      	add	r2, sp, #52	; 0x34
  40202e:	9900      	ldr	r1, [sp, #0]
  402030:	9805      	ldr	r0, [sp, #20]
  402032:	f7ff fa33 	bl	40149c <__sprint_r.part.0>
  402036:	2800      	cmp	r0, #0
  402038:	f47f af0a 	bne.w	401e50 <_vfiprintf_r+0x93c>
  40203c:	980e      	ldr	r0, [sp, #56]	; 0x38
  40203e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402040:	f100 0e01 	add.w	lr, r0, #1
  402044:	46da      	mov	sl, fp
  402046:	f7ff bbe3 	b.w	401810 <_vfiprintf_r+0x2fc>
  40204a:	aa0d      	add	r2, sp, #52	; 0x34
  40204c:	9900      	ldr	r1, [sp, #0]
  40204e:	9805      	ldr	r0, [sp, #20]
  402050:	f7ff fa24 	bl	40149c <__sprint_r.part.0>
  402054:	2800      	cmp	r0, #0
  402056:	f47f aefb 	bne.w	401e50 <_vfiprintf_r+0x93c>
  40205a:	980e      	ldr	r0, [sp, #56]	; 0x38
  40205c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40205e:	f100 0e01 	add.w	lr, r0, #1
  402062:	46da      	mov	sl, fp
  402064:	e69b      	b.n	401d9e <_vfiprintf_r+0x88a>
  402066:	2a00      	cmp	r2, #0
  402068:	f040 80d8 	bne.w	40221c <_vfiprintf_r+0xd08>
  40206c:	f04f 0e01 	mov.w	lr, #1
  402070:	4610      	mov	r0, r2
  402072:	46da      	mov	sl, fp
  402074:	e697      	b.n	401da6 <_vfiprintf_r+0x892>
  402076:	aa0d      	add	r2, sp, #52	; 0x34
  402078:	9900      	ldr	r1, [sp, #0]
  40207a:	9805      	ldr	r0, [sp, #20]
  40207c:	f7ff fa0e 	bl	40149c <__sprint_r.part.0>
  402080:	2800      	cmp	r0, #0
  402082:	f47f aee5 	bne.w	401e50 <_vfiprintf_r+0x93c>
  402086:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  402088:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40208a:	f103 0e01 	add.w	lr, r3, #1
  40208e:	46da      	mov	sl, fp
  402090:	e422      	b.n	4018d8 <_vfiprintf_r+0x3c4>
  402092:	2230      	movs	r2, #48	; 0x30
  402094:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
  402098:	9a01      	ldr	r2, [sp, #4]
  40209a:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
  40209e:	2a00      	cmp	r2, #0
  4020a0:	f04f 0300 	mov.w	r3, #0
  4020a4:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  4020a8:	f046 0302 	orr.w	r3, r6, #2
  4020ac:	f2c0 80cb 	blt.w	402246 <_vfiprintf_r+0xd32>
  4020b0:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  4020b4:	f046 0602 	orr.w	r6, r6, #2
  4020b8:	f04f 0900 	mov.w	r9, #0
  4020bc:	e742      	b.n	401f44 <_vfiprintf_r+0xa30>
  4020be:	f04f 0900 	mov.w	r9, #0
  4020c2:	4890      	ldr	r0, [pc, #576]	; (402304 <_vfiprintf_r+0xdf0>)
  4020c4:	e73e      	b.n	401f44 <_vfiprintf_r+0xa30>
  4020c6:	9b01      	ldr	r3, [sp, #4]
  4020c8:	4264      	negs	r4, r4
  4020ca:	f04f 092d 	mov.w	r9, #45	; 0x2d
  4020ce:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  4020d2:	2b00      	cmp	r3, #0
  4020d4:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  4020d8:	f6ff ac7b 	blt.w	4019d2 <_vfiprintf_r+0x4be>
  4020dc:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  4020e0:	e477      	b.n	4019d2 <_vfiprintf_r+0x4be>
  4020e2:	9b07      	ldr	r3, [sp, #28]
  4020e4:	2b00      	cmp	r3, #0
  4020e6:	d072      	beq.n	4021ce <_vfiprintf_r+0xcba>
  4020e8:	ab0c      	add	r3, sp, #48	; 0x30
  4020ea:	2202      	movs	r2, #2
  4020ec:	931a      	str	r3, [sp, #104]	; 0x68
  4020ee:	921b      	str	r2, [sp, #108]	; 0x6c
  4020f0:	f04f 0e01 	mov.w	lr, #1
  4020f4:	46da      	mov	sl, fp
  4020f6:	e713      	b.n	401f20 <_vfiprintf_r+0xa0c>
  4020f8:	f016 0940 	ands.w	r9, r6, #64	; 0x40
  4020fc:	d048      	beq.n	402190 <_vfiprintf_r+0xc7c>
  4020fe:	9904      	ldr	r1, [sp, #16]
  402100:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
  402104:	460b      	mov	r3, r1
  402106:	880c      	ldrh	r4, [r1, #0]
  402108:	9901      	ldr	r1, [sp, #4]
  40210a:	2900      	cmp	r1, #0
  40210c:	f103 0304 	add.w	r3, r3, #4
  402110:	f04f 0500 	mov.w	r5, #0
  402114:	f6ff ae10 	blt.w	401d38 <_vfiprintf_r+0x824>
  402118:	ea54 0105 	orrs.w	r1, r4, r5
  40211c:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  402120:	9304      	str	r3, [sp, #16]
  402122:	f43f ac9c 	beq.w	401a5e <_vfiprintf_r+0x54a>
  402126:	4691      	mov	r9, r2
  402128:	e4a1      	b.n	401a6e <_vfiprintf_r+0x55a>
  40212a:	06f0      	lsls	r0, r6, #27
  40212c:	d40a      	bmi.n	402144 <_vfiprintf_r+0xc30>
  40212e:	0671      	lsls	r1, r6, #25
  402130:	d508      	bpl.n	402144 <_vfiprintf_r+0xc30>
  402132:	9a04      	ldr	r2, [sp, #16]
  402134:	6813      	ldr	r3, [r2, #0]
  402136:	3204      	adds	r2, #4
  402138:	9204      	str	r2, [sp, #16]
  40213a:	f8bd 2008 	ldrh.w	r2, [sp, #8]
  40213e:	801a      	strh	r2, [r3, #0]
  402140:	f7ff ba19 	b.w	401576 <_vfiprintf_r+0x62>
  402144:	9a04      	ldr	r2, [sp, #16]
  402146:	6813      	ldr	r3, [r2, #0]
  402148:	3204      	adds	r2, #4
  40214a:	9204      	str	r2, [sp, #16]
  40214c:	9a02      	ldr	r2, [sp, #8]
  40214e:	601a      	str	r2, [r3, #0]
  402150:	f7ff ba11 	b.w	401576 <_vfiprintf_r+0x62>
  402154:	aa0d      	add	r2, sp, #52	; 0x34
  402156:	9900      	ldr	r1, [sp, #0]
  402158:	9805      	ldr	r0, [sp, #20]
  40215a:	f7ff f99f 	bl	40149c <__sprint_r.part.0>
  40215e:	2800      	cmp	r0, #0
  402160:	f47f ae76 	bne.w	401e50 <_vfiprintf_r+0x93c>
  402164:	980e      	ldr	r0, [sp, #56]	; 0x38
  402166:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402168:	f100 0e01 	add.w	lr, r0, #1
  40216c:	46da      	mov	sl, fp
  40216e:	e5fa      	b.n	401d66 <_vfiprintf_r+0x852>
  402170:	f04f 30ff 	mov.w	r0, #4294967295
  402174:	f7ff bab6 	b.w	4016e4 <_vfiprintf_r+0x1d0>
  402178:	4862      	ldr	r0, [pc, #392]	; (402304 <_vfiprintf_r+0xdf0>)
  40217a:	4616      	mov	r6, r2
  40217c:	ea54 0205 	orrs.w	r2, r4, r5
  402180:	9304      	str	r3, [sp, #16]
  402182:	f04f 0900 	mov.w	r9, #0
  402186:	f47f aedd 	bne.w	401f44 <_vfiprintf_r+0xa30>
  40218a:	e6fc      	b.n	401f86 <_vfiprintf_r+0xa72>
  40218c:	9b04      	ldr	r3, [sp, #16]
  40218e:	e7f5      	b.n	40217c <_vfiprintf_r+0xc68>
  402190:	9a04      	ldr	r2, [sp, #16]
  402192:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  402196:	4613      	mov	r3, r2
  402198:	6814      	ldr	r4, [r2, #0]
  40219a:	9a01      	ldr	r2, [sp, #4]
  40219c:	2a00      	cmp	r2, #0
  40219e:	f103 0304 	add.w	r3, r3, #4
  4021a2:	f04f 0500 	mov.w	r5, #0
  4021a6:	f6ff adc7 	blt.w	401d38 <_vfiprintf_r+0x824>
  4021aa:	ea54 0205 	orrs.w	r2, r4, r5
  4021ae:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  4021b2:	9304      	str	r3, [sp, #16]
  4021b4:	f47f ac5b 	bne.w	401a6e <_vfiprintf_r+0x55a>
  4021b8:	e451      	b.n	401a5e <_vfiprintf_r+0x54a>
  4021ba:	aa0d      	add	r2, sp, #52	; 0x34
  4021bc:	9900      	ldr	r1, [sp, #0]
  4021be:	9805      	ldr	r0, [sp, #20]
  4021c0:	f7ff f96c 	bl	40149c <__sprint_r.part.0>
  4021c4:	2800      	cmp	r0, #0
  4021c6:	f47f ae43 	bne.w	401e50 <_vfiprintf_r+0x93c>
  4021ca:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4021cc:	e668      	b.n	401ea0 <_vfiprintf_r+0x98c>
  4021ce:	4610      	mov	r0, r2
  4021d0:	f04f 0e01 	mov.w	lr, #1
  4021d4:	46da      	mov	sl, fp
  4021d6:	e5e6      	b.n	401da6 <_vfiprintf_r+0x892>
  4021d8:	9904      	ldr	r1, [sp, #16]
  4021da:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  4021de:	460a      	mov	r2, r1
  4021e0:	880c      	ldrh	r4, [r1, #0]
  4021e2:	9901      	ldr	r1, [sp, #4]
  4021e4:	2900      	cmp	r1, #0
  4021e6:	f102 0204 	add.w	r2, r2, #4
  4021ea:	f04f 0500 	mov.w	r5, #0
  4021ee:	db4e      	blt.n	40228e <_vfiprintf_r+0xd7a>
  4021f0:	ea54 0105 	orrs.w	r1, r4, r5
  4021f4:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  4021f8:	9204      	str	r2, [sp, #16]
  4021fa:	4699      	mov	r9, r3
  4021fc:	f47f abe9 	bne.w	4019d2 <_vfiprintf_r+0x4be>
  402200:	e4d4      	b.n	401bac <_vfiprintf_r+0x698>
  402202:	9304      	str	r3, [sp, #16]
  402204:	e6f9      	b.n	401ffa <_vfiprintf_r+0xae6>
  402206:	4638      	mov	r0, r7
  402208:	9404      	str	r4, [sp, #16]
  40220a:	f7ff f8d9 	bl	4013c0 <strlen>
  40220e:	2300      	movs	r3, #0
  402210:	9003      	str	r0, [sp, #12]
  402212:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  402216:	9301      	str	r3, [sp, #4]
  402218:	f7ff ba9c 	b.w	401754 <_vfiprintf_r+0x240>
  40221c:	aa0d      	add	r2, sp, #52	; 0x34
  40221e:	9900      	ldr	r1, [sp, #0]
  402220:	9805      	ldr	r0, [sp, #20]
  402222:	f7ff f93b 	bl	40149c <__sprint_r.part.0>
  402226:	2800      	cmp	r0, #0
  402228:	f47f ae12 	bne.w	401e50 <_vfiprintf_r+0x93c>
  40222c:	980e      	ldr	r0, [sp, #56]	; 0x38
  40222e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402230:	f100 0e01 	add.w	lr, r0, #1
  402234:	46da      	mov	sl, fp
  402236:	e5b6      	b.n	401da6 <_vfiprintf_r+0x892>
  402238:	980e      	ldr	r0, [sp, #56]	; 0x38
  40223a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40223c:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 40230c <_vfiprintf_r+0xdf8>
  402240:	3001      	adds	r0, #1
  402242:	f7ff bad2 	b.w	4017ea <_vfiprintf_r+0x2d6>
  402246:	461e      	mov	r6, r3
  402248:	f04f 0900 	mov.w	r9, #0
  40224c:	e67a      	b.n	401f44 <_vfiprintf_r+0xa30>
  40224e:	2b06      	cmp	r3, #6
  402250:	bf28      	it	cs
  402252:	2306      	movcs	r3, #6
  402254:	9303      	str	r3, [sp, #12]
  402256:	9404      	str	r4, [sp, #16]
  402258:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
  40225c:	4f2a      	ldr	r7, [pc, #168]	; (402308 <_vfiprintf_r+0xdf4>)
  40225e:	e50c      	b.n	401c7a <_vfiprintf_r+0x766>
  402260:	9204      	str	r2, [sp, #16]
  402262:	e56a      	b.n	401d3a <_vfiprintf_r+0x826>
  402264:	980e      	ldr	r0, [sp, #56]	; 0x38
  402266:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 40230c <_vfiprintf_r+0xdf8>
  40226a:	3001      	adds	r0, #1
  40226c:	f7ff bb73 	b.w	401956 <_vfiprintf_r+0x442>
  402270:	46f4      	mov	ip, lr
  402272:	f7ff bb1a 	b.w	4018aa <_vfiprintf_r+0x396>
  402276:	9b01      	ldr	r3, [sp, #4]
  402278:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  40227c:	9303      	str	r3, [sp, #12]
  40227e:	9404      	str	r4, [sp, #16]
  402280:	9001      	str	r0, [sp, #4]
  402282:	f7ff ba67 	b.w	401754 <_vfiprintf_r+0x240>
  402286:	2200      	movs	r2, #0
  402288:	9201      	str	r2, [sp, #4]
  40228a:	f7ff b9ac 	b.w	4015e6 <_vfiprintf_r+0xd2>
  40228e:	9204      	str	r2, [sp, #16]
  402290:	4699      	mov	r9, r3
  402292:	e6b2      	b.n	401ffa <_vfiprintf_r+0xae6>
  402294:	9a04      	ldr	r2, [sp, #16]
  402296:	6813      	ldr	r3, [r2, #0]
  402298:	9301      	str	r3, [sp, #4]
  40229a:	3204      	adds	r2, #4
  40229c:	2b00      	cmp	r3, #0
  40229e:	9204      	str	r2, [sp, #16]
  4022a0:	f898 3001 	ldrb.w	r3, [r8, #1]
  4022a4:	46a8      	mov	r8, r5
  4022a6:	f6bf a99c 	bge.w	4015e2 <_vfiprintf_r+0xce>
  4022aa:	f04f 32ff 	mov.w	r2, #4294967295
  4022ae:	9201      	str	r2, [sp, #4]
  4022b0:	f7ff b997 	b.w	4015e2 <_vfiprintf_r+0xce>
  4022b4:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  4022b8:	e48e      	b.n	401bd8 <_vfiprintf_r+0x6c4>
  4022ba:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  4022be:	e4f0      	b.n	401ca2 <_vfiprintf_r+0x78e>
  4022c0:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  4022c4:	e4ab      	b.n	401c1e <_vfiprintf_r+0x70a>
  4022c6:	4699      	mov	r9, r3
  4022c8:	07f3      	lsls	r3, r6, #31
  4022ca:	d505      	bpl.n	4022d8 <_vfiprintf_r+0xdc4>
  4022cc:	af2a      	add	r7, sp, #168	; 0xa8
  4022ce:	2330      	movs	r3, #48	; 0x30
  4022d0:	f807 3d41 	strb.w	r3, [r7, #-65]!
  4022d4:	f7ff bb97 	b.w	401a06 <_vfiprintf_r+0x4f2>
  4022d8:	9b01      	ldr	r3, [sp, #4]
  4022da:	9303      	str	r3, [sp, #12]
  4022dc:	465f      	mov	r7, fp
  4022de:	f7ff ba39 	b.w	401754 <_vfiprintf_r+0x240>
  4022e2:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  4022e6:	e443      	b.n	401b70 <_vfiprintf_r+0x65c>
  4022e8:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  4022ec:	f7ff bb9a 	b.w	401a24 <_vfiprintf_r+0x510>
  4022f0:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  4022f4:	f7ff bb4d 	b.w	401992 <_vfiprintf_r+0x47e>
  4022f8:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  4022fc:	e50f      	b.n	401d1e <_vfiprintf_r+0x80a>
  4022fe:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  402302:	e4f3      	b.n	401cec <_vfiprintf_r+0x7d8>
  402304:	00404238 	.word	0x00404238
  402308:	0040424c 	.word	0x0040424c
  40230c:	00404254 	.word	0x00404254

00402310 <__sbprintf>:
  402310:	b5f0      	push	{r4, r5, r6, r7, lr}
  402312:	460c      	mov	r4, r1
  402314:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
  402318:	8989      	ldrh	r1, [r1, #12]
  40231a:	6e66      	ldr	r6, [r4, #100]	; 0x64
  40231c:	89e5      	ldrh	r5, [r4, #14]
  40231e:	9619      	str	r6, [sp, #100]	; 0x64
  402320:	f021 0102 	bic.w	r1, r1, #2
  402324:	6a66      	ldr	r6, [r4, #36]	; 0x24
  402326:	f8ad 500e 	strh.w	r5, [sp, #14]
  40232a:	2500      	movs	r5, #0
  40232c:	69e7      	ldr	r7, [r4, #28]
  40232e:	f8ad 100c 	strh.w	r1, [sp, #12]
  402332:	9609      	str	r6, [sp, #36]	; 0x24
  402334:	9506      	str	r5, [sp, #24]
  402336:	ae1a      	add	r6, sp, #104	; 0x68
  402338:	f44f 6580 	mov.w	r5, #1024	; 0x400
  40233c:	4669      	mov	r1, sp
  40233e:	9600      	str	r6, [sp, #0]
  402340:	9604      	str	r6, [sp, #16]
  402342:	9502      	str	r5, [sp, #8]
  402344:	9505      	str	r5, [sp, #20]
  402346:	9707      	str	r7, [sp, #28]
  402348:	4606      	mov	r6, r0
  40234a:	f7ff f8e3 	bl	401514 <_vfiprintf_r>
  40234e:	1e05      	subs	r5, r0, #0
  402350:	db07      	blt.n	402362 <__sbprintf+0x52>
  402352:	4630      	mov	r0, r6
  402354:	4669      	mov	r1, sp
  402356:	f000 f929 	bl	4025ac <_fflush_r>
  40235a:	2800      	cmp	r0, #0
  40235c:	bf18      	it	ne
  40235e:	f04f 35ff 	movne.w	r5, #4294967295
  402362:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  402366:	065b      	lsls	r3, r3, #25
  402368:	d503      	bpl.n	402372 <__sbprintf+0x62>
  40236a:	89a3      	ldrh	r3, [r4, #12]
  40236c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402370:	81a3      	strh	r3, [r4, #12]
  402372:	4628      	mov	r0, r5
  402374:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
  402378:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40237a:	bf00      	nop

0040237c <__swsetup_r>:
  40237c:	b538      	push	{r3, r4, r5, lr}
  40237e:	4b30      	ldr	r3, [pc, #192]	; (402440 <__swsetup_r+0xc4>)
  402380:	681b      	ldr	r3, [r3, #0]
  402382:	4605      	mov	r5, r0
  402384:	460c      	mov	r4, r1
  402386:	b113      	cbz	r3, 40238e <__swsetup_r+0x12>
  402388:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  40238a:	2a00      	cmp	r2, #0
  40238c:	d038      	beq.n	402400 <__swsetup_r+0x84>
  40238e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  402392:	b293      	uxth	r3, r2
  402394:	0718      	lsls	r0, r3, #28
  402396:	d50c      	bpl.n	4023b2 <__swsetup_r+0x36>
  402398:	6920      	ldr	r0, [r4, #16]
  40239a:	b1a8      	cbz	r0, 4023c8 <__swsetup_r+0x4c>
  40239c:	f013 0201 	ands.w	r2, r3, #1
  4023a0:	d01e      	beq.n	4023e0 <__swsetup_r+0x64>
  4023a2:	6963      	ldr	r3, [r4, #20]
  4023a4:	2200      	movs	r2, #0
  4023a6:	425b      	negs	r3, r3
  4023a8:	61a3      	str	r3, [r4, #24]
  4023aa:	60a2      	str	r2, [r4, #8]
  4023ac:	b1f0      	cbz	r0, 4023ec <__swsetup_r+0x70>
  4023ae:	2000      	movs	r0, #0
  4023b0:	bd38      	pop	{r3, r4, r5, pc}
  4023b2:	06d9      	lsls	r1, r3, #27
  4023b4:	d53c      	bpl.n	402430 <__swsetup_r+0xb4>
  4023b6:	0758      	lsls	r0, r3, #29
  4023b8:	d426      	bmi.n	402408 <__swsetup_r+0x8c>
  4023ba:	6920      	ldr	r0, [r4, #16]
  4023bc:	f042 0308 	orr.w	r3, r2, #8
  4023c0:	81a3      	strh	r3, [r4, #12]
  4023c2:	b29b      	uxth	r3, r3
  4023c4:	2800      	cmp	r0, #0
  4023c6:	d1e9      	bne.n	40239c <__swsetup_r+0x20>
  4023c8:	f403 7220 	and.w	r2, r3, #640	; 0x280
  4023cc:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  4023d0:	d0e4      	beq.n	40239c <__swsetup_r+0x20>
  4023d2:	4628      	mov	r0, r5
  4023d4:	4621      	mov	r1, r4
  4023d6:	f000 fd15 	bl	402e04 <__smakebuf_r>
  4023da:	89a3      	ldrh	r3, [r4, #12]
  4023dc:	6920      	ldr	r0, [r4, #16]
  4023de:	e7dd      	b.n	40239c <__swsetup_r+0x20>
  4023e0:	0799      	lsls	r1, r3, #30
  4023e2:	bf58      	it	pl
  4023e4:	6962      	ldrpl	r2, [r4, #20]
  4023e6:	60a2      	str	r2, [r4, #8]
  4023e8:	2800      	cmp	r0, #0
  4023ea:	d1e0      	bne.n	4023ae <__swsetup_r+0x32>
  4023ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4023f0:	061a      	lsls	r2, r3, #24
  4023f2:	d5dd      	bpl.n	4023b0 <__swsetup_r+0x34>
  4023f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4023f8:	81a3      	strh	r3, [r4, #12]
  4023fa:	f04f 30ff 	mov.w	r0, #4294967295
  4023fe:	bd38      	pop	{r3, r4, r5, pc}
  402400:	4618      	mov	r0, r3
  402402:	f000 f967 	bl	4026d4 <__sinit>
  402406:	e7c2      	b.n	40238e <__swsetup_r+0x12>
  402408:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40240a:	b151      	cbz	r1, 402422 <__swsetup_r+0xa6>
  40240c:	f104 0340 	add.w	r3, r4, #64	; 0x40
  402410:	4299      	cmp	r1, r3
  402412:	d004      	beq.n	40241e <__swsetup_r+0xa2>
  402414:	4628      	mov	r0, r5
  402416:	f000 fa27 	bl	402868 <_free_r>
  40241a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40241e:	2300      	movs	r3, #0
  402420:	6323      	str	r3, [r4, #48]	; 0x30
  402422:	2300      	movs	r3, #0
  402424:	6920      	ldr	r0, [r4, #16]
  402426:	6063      	str	r3, [r4, #4]
  402428:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  40242c:	6020      	str	r0, [r4, #0]
  40242e:	e7c5      	b.n	4023bc <__swsetup_r+0x40>
  402430:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  402434:	2309      	movs	r3, #9
  402436:	602b      	str	r3, [r5, #0]
  402438:	f04f 30ff 	mov.w	r0, #4294967295
  40243c:	81a2      	strh	r2, [r4, #12]
  40243e:	bd38      	pop	{r3, r4, r5, pc}
  402440:	20400430 	.word	0x20400430

00402444 <register_fini>:
  402444:	4b02      	ldr	r3, [pc, #8]	; (402450 <register_fini+0xc>)
  402446:	b113      	cbz	r3, 40244e <register_fini+0xa>
  402448:	4802      	ldr	r0, [pc, #8]	; (402454 <register_fini+0x10>)
  40244a:	f000 b805 	b.w	402458 <atexit>
  40244e:	4770      	bx	lr
  402450:	00000000 	.word	0x00000000
  402454:	004026e9 	.word	0x004026e9

00402458 <atexit>:
  402458:	2300      	movs	r3, #0
  40245a:	4601      	mov	r1, r0
  40245c:	461a      	mov	r2, r3
  40245e:	4618      	mov	r0, r3
  402460:	f001 bc12 	b.w	403c88 <__register_exitproc>

00402464 <__sflush_r>:
  402464:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  402468:	b29a      	uxth	r2, r3
  40246a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40246e:	460d      	mov	r5, r1
  402470:	0711      	lsls	r1, r2, #28
  402472:	4680      	mov	r8, r0
  402474:	d43c      	bmi.n	4024f0 <__sflush_r+0x8c>
  402476:	686a      	ldr	r2, [r5, #4]
  402478:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  40247c:	2a00      	cmp	r2, #0
  40247e:	81ab      	strh	r3, [r5, #12]
  402480:	dd73      	ble.n	40256a <__sflush_r+0x106>
  402482:	6aac      	ldr	r4, [r5, #40]	; 0x28
  402484:	2c00      	cmp	r4, #0
  402486:	d04b      	beq.n	402520 <__sflush_r+0xbc>
  402488:	b29b      	uxth	r3, r3
  40248a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
  40248e:	2100      	movs	r1, #0
  402490:	b292      	uxth	r2, r2
  402492:	f8d8 6000 	ldr.w	r6, [r8]
  402496:	f8c8 1000 	str.w	r1, [r8]
  40249a:	2a00      	cmp	r2, #0
  40249c:	d069      	beq.n	402572 <__sflush_r+0x10e>
  40249e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  4024a0:	075f      	lsls	r7, r3, #29
  4024a2:	d505      	bpl.n	4024b0 <__sflush_r+0x4c>
  4024a4:	6869      	ldr	r1, [r5, #4]
  4024a6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  4024a8:	1a52      	subs	r2, r2, r1
  4024aa:	b10b      	cbz	r3, 4024b0 <__sflush_r+0x4c>
  4024ac:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  4024ae:	1ad2      	subs	r2, r2, r3
  4024b0:	2300      	movs	r3, #0
  4024b2:	69e9      	ldr	r1, [r5, #28]
  4024b4:	4640      	mov	r0, r8
  4024b6:	47a0      	blx	r4
  4024b8:	1c44      	adds	r4, r0, #1
  4024ba:	d03c      	beq.n	402536 <__sflush_r+0xd2>
  4024bc:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  4024c0:	692a      	ldr	r2, [r5, #16]
  4024c2:	602a      	str	r2, [r5, #0]
  4024c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  4024c8:	2200      	movs	r2, #0
  4024ca:	81ab      	strh	r3, [r5, #12]
  4024cc:	04db      	lsls	r3, r3, #19
  4024ce:	606a      	str	r2, [r5, #4]
  4024d0:	d449      	bmi.n	402566 <__sflush_r+0x102>
  4024d2:	6b29      	ldr	r1, [r5, #48]	; 0x30
  4024d4:	f8c8 6000 	str.w	r6, [r8]
  4024d8:	b311      	cbz	r1, 402520 <__sflush_r+0xbc>
  4024da:	f105 0340 	add.w	r3, r5, #64	; 0x40
  4024de:	4299      	cmp	r1, r3
  4024e0:	d002      	beq.n	4024e8 <__sflush_r+0x84>
  4024e2:	4640      	mov	r0, r8
  4024e4:	f000 f9c0 	bl	402868 <_free_r>
  4024e8:	2000      	movs	r0, #0
  4024ea:	6328      	str	r0, [r5, #48]	; 0x30
  4024ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4024f0:	692e      	ldr	r6, [r5, #16]
  4024f2:	b1ae      	cbz	r6, 402520 <__sflush_r+0xbc>
  4024f4:	682c      	ldr	r4, [r5, #0]
  4024f6:	602e      	str	r6, [r5, #0]
  4024f8:	0790      	lsls	r0, r2, #30
  4024fa:	bf0c      	ite	eq
  4024fc:	696b      	ldreq	r3, [r5, #20]
  4024fe:	2300      	movne	r3, #0
  402500:	1ba4      	subs	r4, r4, r6
  402502:	60ab      	str	r3, [r5, #8]
  402504:	e00a      	b.n	40251c <__sflush_r+0xb8>
  402506:	4623      	mov	r3, r4
  402508:	4632      	mov	r2, r6
  40250a:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  40250c:	69e9      	ldr	r1, [r5, #28]
  40250e:	4640      	mov	r0, r8
  402510:	47b8      	blx	r7
  402512:	2800      	cmp	r0, #0
  402514:	eba4 0400 	sub.w	r4, r4, r0
  402518:	4406      	add	r6, r0
  40251a:	dd04      	ble.n	402526 <__sflush_r+0xc2>
  40251c:	2c00      	cmp	r4, #0
  40251e:	dcf2      	bgt.n	402506 <__sflush_r+0xa2>
  402520:	2000      	movs	r0, #0
  402522:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402526:	89ab      	ldrh	r3, [r5, #12]
  402528:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40252c:	81ab      	strh	r3, [r5, #12]
  40252e:	f04f 30ff 	mov.w	r0, #4294967295
  402532:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402536:	f8d8 2000 	ldr.w	r2, [r8]
  40253a:	2a1d      	cmp	r2, #29
  40253c:	d8f3      	bhi.n	402526 <__sflush_r+0xc2>
  40253e:	4b1a      	ldr	r3, [pc, #104]	; (4025a8 <__sflush_r+0x144>)
  402540:	40d3      	lsrs	r3, r2
  402542:	f003 0301 	and.w	r3, r3, #1
  402546:	f083 0401 	eor.w	r4, r3, #1
  40254a:	2b00      	cmp	r3, #0
  40254c:	d0eb      	beq.n	402526 <__sflush_r+0xc2>
  40254e:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  402552:	6929      	ldr	r1, [r5, #16]
  402554:	6029      	str	r1, [r5, #0]
  402556:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  40255a:	04d9      	lsls	r1, r3, #19
  40255c:	606c      	str	r4, [r5, #4]
  40255e:	81ab      	strh	r3, [r5, #12]
  402560:	d5b7      	bpl.n	4024d2 <__sflush_r+0x6e>
  402562:	2a00      	cmp	r2, #0
  402564:	d1b5      	bne.n	4024d2 <__sflush_r+0x6e>
  402566:	6528      	str	r0, [r5, #80]	; 0x50
  402568:	e7b3      	b.n	4024d2 <__sflush_r+0x6e>
  40256a:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  40256c:	2a00      	cmp	r2, #0
  40256e:	dc88      	bgt.n	402482 <__sflush_r+0x1e>
  402570:	e7d6      	b.n	402520 <__sflush_r+0xbc>
  402572:	2301      	movs	r3, #1
  402574:	69e9      	ldr	r1, [r5, #28]
  402576:	4640      	mov	r0, r8
  402578:	47a0      	blx	r4
  40257a:	1c43      	adds	r3, r0, #1
  40257c:	4602      	mov	r2, r0
  40257e:	d002      	beq.n	402586 <__sflush_r+0x122>
  402580:	89ab      	ldrh	r3, [r5, #12]
  402582:	6aac      	ldr	r4, [r5, #40]	; 0x28
  402584:	e78c      	b.n	4024a0 <__sflush_r+0x3c>
  402586:	f8d8 3000 	ldr.w	r3, [r8]
  40258a:	2b00      	cmp	r3, #0
  40258c:	d0f8      	beq.n	402580 <__sflush_r+0x11c>
  40258e:	2b1d      	cmp	r3, #29
  402590:	d001      	beq.n	402596 <__sflush_r+0x132>
  402592:	2b16      	cmp	r3, #22
  402594:	d102      	bne.n	40259c <__sflush_r+0x138>
  402596:	f8c8 6000 	str.w	r6, [r8]
  40259a:	e7c1      	b.n	402520 <__sflush_r+0xbc>
  40259c:	89ab      	ldrh	r3, [r5, #12]
  40259e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4025a2:	81ab      	strh	r3, [r5, #12]
  4025a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4025a8:	20400001 	.word	0x20400001

004025ac <_fflush_r>:
  4025ac:	b510      	push	{r4, lr}
  4025ae:	4604      	mov	r4, r0
  4025b0:	b082      	sub	sp, #8
  4025b2:	b108      	cbz	r0, 4025b8 <_fflush_r+0xc>
  4025b4:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4025b6:	b153      	cbz	r3, 4025ce <_fflush_r+0x22>
  4025b8:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
  4025bc:	b908      	cbnz	r0, 4025c2 <_fflush_r+0x16>
  4025be:	b002      	add	sp, #8
  4025c0:	bd10      	pop	{r4, pc}
  4025c2:	4620      	mov	r0, r4
  4025c4:	b002      	add	sp, #8
  4025c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4025ca:	f7ff bf4b 	b.w	402464 <__sflush_r>
  4025ce:	9101      	str	r1, [sp, #4]
  4025d0:	f000 f880 	bl	4026d4 <__sinit>
  4025d4:	9901      	ldr	r1, [sp, #4]
  4025d6:	e7ef      	b.n	4025b8 <_fflush_r+0xc>

004025d8 <_cleanup_r>:
  4025d8:	4901      	ldr	r1, [pc, #4]	; (4025e0 <_cleanup_r+0x8>)
  4025da:	f000 bbaf 	b.w	402d3c <_fwalk_reent>
  4025de:	bf00      	nop
  4025e0:	00403d51 	.word	0x00403d51

004025e4 <__sinit.part.1>:
  4025e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4025e8:	4b35      	ldr	r3, [pc, #212]	; (4026c0 <__sinit.part.1+0xdc>)
  4025ea:	6845      	ldr	r5, [r0, #4]
  4025ec:	63c3      	str	r3, [r0, #60]	; 0x3c
  4025ee:	2400      	movs	r4, #0
  4025f0:	4607      	mov	r7, r0
  4025f2:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
  4025f6:	2304      	movs	r3, #4
  4025f8:	2103      	movs	r1, #3
  4025fa:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
  4025fe:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
  402602:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
  402606:	b083      	sub	sp, #12
  402608:	602c      	str	r4, [r5, #0]
  40260a:	606c      	str	r4, [r5, #4]
  40260c:	60ac      	str	r4, [r5, #8]
  40260e:	666c      	str	r4, [r5, #100]	; 0x64
  402610:	81ec      	strh	r4, [r5, #14]
  402612:	612c      	str	r4, [r5, #16]
  402614:	616c      	str	r4, [r5, #20]
  402616:	61ac      	str	r4, [r5, #24]
  402618:	81ab      	strh	r3, [r5, #12]
  40261a:	4621      	mov	r1, r4
  40261c:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  402620:	2208      	movs	r2, #8
  402622:	f7fe fd7d 	bl	401120 <memset>
  402626:	68be      	ldr	r6, [r7, #8]
  402628:	f8df b098 	ldr.w	fp, [pc, #152]	; 4026c4 <__sinit.part.1+0xe0>
  40262c:	f8df a098 	ldr.w	sl, [pc, #152]	; 4026c8 <__sinit.part.1+0xe4>
  402630:	f8df 9098 	ldr.w	r9, [pc, #152]	; 4026cc <__sinit.part.1+0xe8>
  402634:	f8df 8098 	ldr.w	r8, [pc, #152]	; 4026d0 <__sinit.part.1+0xec>
  402638:	f8c5 b020 	str.w	fp, [r5, #32]
  40263c:	2301      	movs	r3, #1
  40263e:	2209      	movs	r2, #9
  402640:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  402644:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  402648:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  40264c:	61ed      	str	r5, [r5, #28]
  40264e:	4621      	mov	r1, r4
  402650:	81f3      	strh	r3, [r6, #14]
  402652:	81b2      	strh	r2, [r6, #12]
  402654:	f106 005c 	add.w	r0, r6, #92	; 0x5c
  402658:	6034      	str	r4, [r6, #0]
  40265a:	6074      	str	r4, [r6, #4]
  40265c:	60b4      	str	r4, [r6, #8]
  40265e:	6674      	str	r4, [r6, #100]	; 0x64
  402660:	6134      	str	r4, [r6, #16]
  402662:	6174      	str	r4, [r6, #20]
  402664:	61b4      	str	r4, [r6, #24]
  402666:	2208      	movs	r2, #8
  402668:	9301      	str	r3, [sp, #4]
  40266a:	f7fe fd59 	bl	401120 <memset>
  40266e:	68fd      	ldr	r5, [r7, #12]
  402670:	61f6      	str	r6, [r6, #28]
  402672:	2012      	movs	r0, #18
  402674:	2202      	movs	r2, #2
  402676:	f8c6 b020 	str.w	fp, [r6, #32]
  40267a:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
  40267e:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
  402682:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
  402686:	4621      	mov	r1, r4
  402688:	81a8      	strh	r0, [r5, #12]
  40268a:	81ea      	strh	r2, [r5, #14]
  40268c:	602c      	str	r4, [r5, #0]
  40268e:	606c      	str	r4, [r5, #4]
  402690:	60ac      	str	r4, [r5, #8]
  402692:	666c      	str	r4, [r5, #100]	; 0x64
  402694:	612c      	str	r4, [r5, #16]
  402696:	616c      	str	r4, [r5, #20]
  402698:	61ac      	str	r4, [r5, #24]
  40269a:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  40269e:	2208      	movs	r2, #8
  4026a0:	f7fe fd3e 	bl	401120 <memset>
  4026a4:	9b01      	ldr	r3, [sp, #4]
  4026a6:	61ed      	str	r5, [r5, #28]
  4026a8:	f8c5 b020 	str.w	fp, [r5, #32]
  4026ac:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  4026b0:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  4026b4:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  4026b8:	63bb      	str	r3, [r7, #56]	; 0x38
  4026ba:	b003      	add	sp, #12
  4026bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4026c0:	004025d9 	.word	0x004025d9
  4026c4:	00403ab9 	.word	0x00403ab9
  4026c8:	00403add 	.word	0x00403add
  4026cc:	00403b19 	.word	0x00403b19
  4026d0:	00403b39 	.word	0x00403b39

004026d4 <__sinit>:
  4026d4:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4026d6:	b103      	cbz	r3, 4026da <__sinit+0x6>
  4026d8:	4770      	bx	lr
  4026da:	f7ff bf83 	b.w	4025e4 <__sinit.part.1>
  4026de:	bf00      	nop

004026e0 <__sfp_lock_acquire>:
  4026e0:	4770      	bx	lr
  4026e2:	bf00      	nop

004026e4 <__sfp_lock_release>:
  4026e4:	4770      	bx	lr
  4026e6:	bf00      	nop

004026e8 <__libc_fini_array>:
  4026e8:	b538      	push	{r3, r4, r5, lr}
  4026ea:	4d07      	ldr	r5, [pc, #28]	; (402708 <__libc_fini_array+0x20>)
  4026ec:	4c07      	ldr	r4, [pc, #28]	; (40270c <__libc_fini_array+0x24>)
  4026ee:	1b2c      	subs	r4, r5, r4
  4026f0:	10a4      	asrs	r4, r4, #2
  4026f2:	d005      	beq.n	402700 <__libc_fini_array+0x18>
  4026f4:	3c01      	subs	r4, #1
  4026f6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  4026fa:	4798      	blx	r3
  4026fc:	2c00      	cmp	r4, #0
  4026fe:	d1f9      	bne.n	4026f4 <__libc_fini_array+0xc>
  402700:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  402704:	f001 bdb8 	b.w	404278 <_fini>
  402708:	00404288 	.word	0x00404288
  40270c:	00404284 	.word	0x00404284

00402710 <__fputwc>:
  402710:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402714:	b082      	sub	sp, #8
  402716:	4680      	mov	r8, r0
  402718:	4689      	mov	r9, r1
  40271a:	4614      	mov	r4, r2
  40271c:	f000 fb3c 	bl	402d98 <__locale_mb_cur_max>
  402720:	2801      	cmp	r0, #1
  402722:	d033      	beq.n	40278c <__fputwc+0x7c>
  402724:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  402728:	464a      	mov	r2, r9
  40272a:	a901      	add	r1, sp, #4
  40272c:	4640      	mov	r0, r8
  40272e:	f001 fa5d 	bl	403bec <_wcrtomb_r>
  402732:	f1b0 3fff 	cmp.w	r0, #4294967295
  402736:	4682      	mov	sl, r0
  402738:	d021      	beq.n	40277e <__fputwc+0x6e>
  40273a:	b388      	cbz	r0, 4027a0 <__fputwc+0x90>
  40273c:	f89d 6004 	ldrb.w	r6, [sp, #4]
  402740:	2500      	movs	r5, #0
  402742:	e008      	b.n	402756 <__fputwc+0x46>
  402744:	6823      	ldr	r3, [r4, #0]
  402746:	1c5a      	adds	r2, r3, #1
  402748:	6022      	str	r2, [r4, #0]
  40274a:	701e      	strb	r6, [r3, #0]
  40274c:	3501      	adds	r5, #1
  40274e:	4555      	cmp	r5, sl
  402750:	d226      	bcs.n	4027a0 <__fputwc+0x90>
  402752:	ab01      	add	r3, sp, #4
  402754:	5d5e      	ldrb	r6, [r3, r5]
  402756:	68a3      	ldr	r3, [r4, #8]
  402758:	3b01      	subs	r3, #1
  40275a:	2b00      	cmp	r3, #0
  40275c:	60a3      	str	r3, [r4, #8]
  40275e:	daf1      	bge.n	402744 <__fputwc+0x34>
  402760:	69a7      	ldr	r7, [r4, #24]
  402762:	42bb      	cmp	r3, r7
  402764:	4631      	mov	r1, r6
  402766:	4622      	mov	r2, r4
  402768:	4640      	mov	r0, r8
  40276a:	db01      	blt.n	402770 <__fputwc+0x60>
  40276c:	2e0a      	cmp	r6, #10
  40276e:	d1e9      	bne.n	402744 <__fputwc+0x34>
  402770:	f001 f9e6 	bl	403b40 <__swbuf_r>
  402774:	1c43      	adds	r3, r0, #1
  402776:	d1e9      	bne.n	40274c <__fputwc+0x3c>
  402778:	b002      	add	sp, #8
  40277a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40277e:	89a3      	ldrh	r3, [r4, #12]
  402780:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402784:	81a3      	strh	r3, [r4, #12]
  402786:	b002      	add	sp, #8
  402788:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40278c:	f109 33ff 	add.w	r3, r9, #4294967295
  402790:	2bfe      	cmp	r3, #254	; 0xfe
  402792:	d8c7      	bhi.n	402724 <__fputwc+0x14>
  402794:	fa5f f689 	uxtb.w	r6, r9
  402798:	4682      	mov	sl, r0
  40279a:	f88d 6004 	strb.w	r6, [sp, #4]
  40279e:	e7cf      	b.n	402740 <__fputwc+0x30>
  4027a0:	4648      	mov	r0, r9
  4027a2:	b002      	add	sp, #8
  4027a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

004027a8 <_fputwc_r>:
  4027a8:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  4027ac:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  4027b0:	d10a      	bne.n	4027c8 <_fputwc_r+0x20>
  4027b2:	b410      	push	{r4}
  4027b4:	6e54      	ldr	r4, [r2, #100]	; 0x64
  4027b6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  4027ba:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
  4027be:	6654      	str	r4, [r2, #100]	; 0x64
  4027c0:	8193      	strh	r3, [r2, #12]
  4027c2:	bc10      	pop	{r4}
  4027c4:	f7ff bfa4 	b.w	402710 <__fputwc>
  4027c8:	f7ff bfa2 	b.w	402710 <__fputwc>

004027cc <_malloc_trim_r>:
  4027cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4027ce:	4f23      	ldr	r7, [pc, #140]	; (40285c <_malloc_trim_r+0x90>)
  4027d0:	460c      	mov	r4, r1
  4027d2:	4606      	mov	r6, r0
  4027d4:	f000 ff6a 	bl	4036ac <__malloc_lock>
  4027d8:	68bb      	ldr	r3, [r7, #8]
  4027da:	685d      	ldr	r5, [r3, #4]
  4027dc:	f025 0503 	bic.w	r5, r5, #3
  4027e0:	1b29      	subs	r1, r5, r4
  4027e2:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
  4027e6:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  4027ea:	f021 010f 	bic.w	r1, r1, #15
  4027ee:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  4027f2:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  4027f6:	db07      	blt.n	402808 <_malloc_trim_r+0x3c>
  4027f8:	2100      	movs	r1, #0
  4027fa:	4630      	mov	r0, r6
  4027fc:	f001 f94a 	bl	403a94 <_sbrk_r>
  402800:	68bb      	ldr	r3, [r7, #8]
  402802:	442b      	add	r3, r5
  402804:	4298      	cmp	r0, r3
  402806:	d004      	beq.n	402812 <_malloc_trim_r+0x46>
  402808:	4630      	mov	r0, r6
  40280a:	f000 ff51 	bl	4036b0 <__malloc_unlock>
  40280e:	2000      	movs	r0, #0
  402810:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402812:	4261      	negs	r1, r4
  402814:	4630      	mov	r0, r6
  402816:	f001 f93d 	bl	403a94 <_sbrk_r>
  40281a:	3001      	adds	r0, #1
  40281c:	d00d      	beq.n	40283a <_malloc_trim_r+0x6e>
  40281e:	4b10      	ldr	r3, [pc, #64]	; (402860 <_malloc_trim_r+0x94>)
  402820:	68ba      	ldr	r2, [r7, #8]
  402822:	6819      	ldr	r1, [r3, #0]
  402824:	1b2d      	subs	r5, r5, r4
  402826:	f045 0501 	orr.w	r5, r5, #1
  40282a:	4630      	mov	r0, r6
  40282c:	1b09      	subs	r1, r1, r4
  40282e:	6055      	str	r5, [r2, #4]
  402830:	6019      	str	r1, [r3, #0]
  402832:	f000 ff3d 	bl	4036b0 <__malloc_unlock>
  402836:	2001      	movs	r0, #1
  402838:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40283a:	2100      	movs	r1, #0
  40283c:	4630      	mov	r0, r6
  40283e:	f001 f929 	bl	403a94 <_sbrk_r>
  402842:	68ba      	ldr	r2, [r7, #8]
  402844:	1a83      	subs	r3, r0, r2
  402846:	2b0f      	cmp	r3, #15
  402848:	ddde      	ble.n	402808 <_malloc_trim_r+0x3c>
  40284a:	4c06      	ldr	r4, [pc, #24]	; (402864 <_malloc_trim_r+0x98>)
  40284c:	4904      	ldr	r1, [pc, #16]	; (402860 <_malloc_trim_r+0x94>)
  40284e:	6824      	ldr	r4, [r4, #0]
  402850:	f043 0301 	orr.w	r3, r3, #1
  402854:	1b00      	subs	r0, r0, r4
  402856:	6053      	str	r3, [r2, #4]
  402858:	6008      	str	r0, [r1, #0]
  40285a:	e7d5      	b.n	402808 <_malloc_trim_r+0x3c>
  40285c:	20400458 	.word	0x20400458
  402860:	20400914 	.word	0x20400914
  402864:	20400864 	.word	0x20400864

00402868 <_free_r>:
  402868:	2900      	cmp	r1, #0
  40286a:	d045      	beq.n	4028f8 <_free_r+0x90>
  40286c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402870:	460d      	mov	r5, r1
  402872:	4680      	mov	r8, r0
  402874:	f000 ff1a 	bl	4036ac <__malloc_lock>
  402878:	f855 7c04 	ldr.w	r7, [r5, #-4]
  40287c:	496a      	ldr	r1, [pc, #424]	; (402a28 <_free_r+0x1c0>)
  40287e:	f027 0301 	bic.w	r3, r7, #1
  402882:	f1a5 0408 	sub.w	r4, r5, #8
  402886:	18e2      	adds	r2, r4, r3
  402888:	688e      	ldr	r6, [r1, #8]
  40288a:	6850      	ldr	r0, [r2, #4]
  40288c:	42b2      	cmp	r2, r6
  40288e:	f020 0003 	bic.w	r0, r0, #3
  402892:	d062      	beq.n	40295a <_free_r+0xf2>
  402894:	07fe      	lsls	r6, r7, #31
  402896:	6050      	str	r0, [r2, #4]
  402898:	d40b      	bmi.n	4028b2 <_free_r+0x4a>
  40289a:	f855 7c08 	ldr.w	r7, [r5, #-8]
  40289e:	1be4      	subs	r4, r4, r7
  4028a0:	f101 0e08 	add.w	lr, r1, #8
  4028a4:	68a5      	ldr	r5, [r4, #8]
  4028a6:	4575      	cmp	r5, lr
  4028a8:	443b      	add	r3, r7
  4028aa:	d06f      	beq.n	40298c <_free_r+0x124>
  4028ac:	68e7      	ldr	r7, [r4, #12]
  4028ae:	60ef      	str	r7, [r5, #12]
  4028b0:	60bd      	str	r5, [r7, #8]
  4028b2:	1815      	adds	r5, r2, r0
  4028b4:	686d      	ldr	r5, [r5, #4]
  4028b6:	07ed      	lsls	r5, r5, #31
  4028b8:	d542      	bpl.n	402940 <_free_r+0xd8>
  4028ba:	f043 0201 	orr.w	r2, r3, #1
  4028be:	6062      	str	r2, [r4, #4]
  4028c0:	50e3      	str	r3, [r4, r3]
  4028c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4028c6:	d218      	bcs.n	4028fa <_free_r+0x92>
  4028c8:	08db      	lsrs	r3, r3, #3
  4028ca:	1c5a      	adds	r2, r3, #1
  4028cc:	684d      	ldr	r5, [r1, #4]
  4028ce:	f851 7032 	ldr.w	r7, [r1, r2, lsl #3]
  4028d2:	60a7      	str	r7, [r4, #8]
  4028d4:	2001      	movs	r0, #1
  4028d6:	109b      	asrs	r3, r3, #2
  4028d8:	fa00 f303 	lsl.w	r3, r0, r3
  4028dc:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
  4028e0:	431d      	orrs	r5, r3
  4028e2:	3808      	subs	r0, #8
  4028e4:	60e0      	str	r0, [r4, #12]
  4028e6:	604d      	str	r5, [r1, #4]
  4028e8:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
  4028ec:	60fc      	str	r4, [r7, #12]
  4028ee:	4640      	mov	r0, r8
  4028f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4028f4:	f000 bedc 	b.w	4036b0 <__malloc_unlock>
  4028f8:	4770      	bx	lr
  4028fa:	0a5a      	lsrs	r2, r3, #9
  4028fc:	2a04      	cmp	r2, #4
  4028fe:	d853      	bhi.n	4029a8 <_free_r+0x140>
  402900:	099a      	lsrs	r2, r3, #6
  402902:	f102 0739 	add.w	r7, r2, #57	; 0x39
  402906:	007f      	lsls	r7, r7, #1
  402908:	f102 0538 	add.w	r5, r2, #56	; 0x38
  40290c:	eb01 0087 	add.w	r0, r1, r7, lsl #2
  402910:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
  402914:	4944      	ldr	r1, [pc, #272]	; (402a28 <_free_r+0x1c0>)
  402916:	3808      	subs	r0, #8
  402918:	4290      	cmp	r0, r2
  40291a:	d04d      	beq.n	4029b8 <_free_r+0x150>
  40291c:	6851      	ldr	r1, [r2, #4]
  40291e:	f021 0103 	bic.w	r1, r1, #3
  402922:	428b      	cmp	r3, r1
  402924:	d202      	bcs.n	40292c <_free_r+0xc4>
  402926:	6892      	ldr	r2, [r2, #8]
  402928:	4290      	cmp	r0, r2
  40292a:	d1f7      	bne.n	40291c <_free_r+0xb4>
  40292c:	68d0      	ldr	r0, [r2, #12]
  40292e:	60e0      	str	r0, [r4, #12]
  402930:	60a2      	str	r2, [r4, #8]
  402932:	6084      	str	r4, [r0, #8]
  402934:	60d4      	str	r4, [r2, #12]
  402936:	4640      	mov	r0, r8
  402938:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40293c:	f000 beb8 	b.w	4036b0 <__malloc_unlock>
  402940:	6895      	ldr	r5, [r2, #8]
  402942:	4f3a      	ldr	r7, [pc, #232]	; (402a2c <_free_r+0x1c4>)
  402944:	42bd      	cmp	r5, r7
  402946:	4403      	add	r3, r0
  402948:	d03f      	beq.n	4029ca <_free_r+0x162>
  40294a:	68d0      	ldr	r0, [r2, #12]
  40294c:	60e8      	str	r0, [r5, #12]
  40294e:	f043 0201 	orr.w	r2, r3, #1
  402952:	6085      	str	r5, [r0, #8]
  402954:	6062      	str	r2, [r4, #4]
  402956:	50e3      	str	r3, [r4, r3]
  402958:	e7b3      	b.n	4028c2 <_free_r+0x5a>
  40295a:	07ff      	lsls	r7, r7, #31
  40295c:	4403      	add	r3, r0
  40295e:	d407      	bmi.n	402970 <_free_r+0x108>
  402960:	f855 2c08 	ldr.w	r2, [r5, #-8]
  402964:	1aa4      	subs	r4, r4, r2
  402966:	4413      	add	r3, r2
  402968:	68a0      	ldr	r0, [r4, #8]
  40296a:	68e2      	ldr	r2, [r4, #12]
  40296c:	60c2      	str	r2, [r0, #12]
  40296e:	6090      	str	r0, [r2, #8]
  402970:	4a2f      	ldr	r2, [pc, #188]	; (402a30 <_free_r+0x1c8>)
  402972:	6812      	ldr	r2, [r2, #0]
  402974:	f043 0001 	orr.w	r0, r3, #1
  402978:	4293      	cmp	r3, r2
  40297a:	6060      	str	r0, [r4, #4]
  40297c:	608c      	str	r4, [r1, #8]
  40297e:	d3b6      	bcc.n	4028ee <_free_r+0x86>
  402980:	4b2c      	ldr	r3, [pc, #176]	; (402a34 <_free_r+0x1cc>)
  402982:	4640      	mov	r0, r8
  402984:	6819      	ldr	r1, [r3, #0]
  402986:	f7ff ff21 	bl	4027cc <_malloc_trim_r>
  40298a:	e7b0      	b.n	4028ee <_free_r+0x86>
  40298c:	1811      	adds	r1, r2, r0
  40298e:	6849      	ldr	r1, [r1, #4]
  402990:	07c9      	lsls	r1, r1, #31
  402992:	d444      	bmi.n	402a1e <_free_r+0x1b6>
  402994:	6891      	ldr	r1, [r2, #8]
  402996:	68d2      	ldr	r2, [r2, #12]
  402998:	60ca      	str	r2, [r1, #12]
  40299a:	4403      	add	r3, r0
  40299c:	f043 0001 	orr.w	r0, r3, #1
  4029a0:	6091      	str	r1, [r2, #8]
  4029a2:	6060      	str	r0, [r4, #4]
  4029a4:	50e3      	str	r3, [r4, r3]
  4029a6:	e7a2      	b.n	4028ee <_free_r+0x86>
  4029a8:	2a14      	cmp	r2, #20
  4029aa:	d817      	bhi.n	4029dc <_free_r+0x174>
  4029ac:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  4029b0:	007f      	lsls	r7, r7, #1
  4029b2:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  4029b6:	e7a9      	b.n	40290c <_free_r+0xa4>
  4029b8:	10aa      	asrs	r2, r5, #2
  4029ba:	684b      	ldr	r3, [r1, #4]
  4029bc:	2501      	movs	r5, #1
  4029be:	fa05 f202 	lsl.w	r2, r5, r2
  4029c2:	4313      	orrs	r3, r2
  4029c4:	604b      	str	r3, [r1, #4]
  4029c6:	4602      	mov	r2, r0
  4029c8:	e7b1      	b.n	40292e <_free_r+0xc6>
  4029ca:	f043 0201 	orr.w	r2, r3, #1
  4029ce:	614c      	str	r4, [r1, #20]
  4029d0:	610c      	str	r4, [r1, #16]
  4029d2:	60e5      	str	r5, [r4, #12]
  4029d4:	60a5      	str	r5, [r4, #8]
  4029d6:	6062      	str	r2, [r4, #4]
  4029d8:	50e3      	str	r3, [r4, r3]
  4029da:	e788      	b.n	4028ee <_free_r+0x86>
  4029dc:	2a54      	cmp	r2, #84	; 0x54
  4029de:	d806      	bhi.n	4029ee <_free_r+0x186>
  4029e0:	0b1a      	lsrs	r2, r3, #12
  4029e2:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  4029e6:	007f      	lsls	r7, r7, #1
  4029e8:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  4029ec:	e78e      	b.n	40290c <_free_r+0xa4>
  4029ee:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4029f2:	d806      	bhi.n	402a02 <_free_r+0x19a>
  4029f4:	0bda      	lsrs	r2, r3, #15
  4029f6:	f102 0778 	add.w	r7, r2, #120	; 0x78
  4029fa:	007f      	lsls	r7, r7, #1
  4029fc:	f102 0577 	add.w	r5, r2, #119	; 0x77
  402a00:	e784      	b.n	40290c <_free_r+0xa4>
  402a02:	f240 5054 	movw	r0, #1364	; 0x554
  402a06:	4282      	cmp	r2, r0
  402a08:	d806      	bhi.n	402a18 <_free_r+0x1b0>
  402a0a:	0c9a      	lsrs	r2, r3, #18
  402a0c:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  402a10:	007f      	lsls	r7, r7, #1
  402a12:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  402a16:	e779      	b.n	40290c <_free_r+0xa4>
  402a18:	27fe      	movs	r7, #254	; 0xfe
  402a1a:	257e      	movs	r5, #126	; 0x7e
  402a1c:	e776      	b.n	40290c <_free_r+0xa4>
  402a1e:	f043 0201 	orr.w	r2, r3, #1
  402a22:	6062      	str	r2, [r4, #4]
  402a24:	50e3      	str	r3, [r4, r3]
  402a26:	e762      	b.n	4028ee <_free_r+0x86>
  402a28:	20400458 	.word	0x20400458
  402a2c:	20400460 	.word	0x20400460
  402a30:	20400860 	.word	0x20400860
  402a34:	20400910 	.word	0x20400910

00402a38 <__sfvwrite_r>:
  402a38:	6893      	ldr	r3, [r2, #8]
  402a3a:	2b00      	cmp	r3, #0
  402a3c:	d076      	beq.n	402b2c <__sfvwrite_r+0xf4>
  402a3e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402a42:	898b      	ldrh	r3, [r1, #12]
  402a44:	b085      	sub	sp, #20
  402a46:	460c      	mov	r4, r1
  402a48:	0719      	lsls	r1, r3, #28
  402a4a:	9001      	str	r0, [sp, #4]
  402a4c:	4616      	mov	r6, r2
  402a4e:	d529      	bpl.n	402aa4 <__sfvwrite_r+0x6c>
  402a50:	6922      	ldr	r2, [r4, #16]
  402a52:	b33a      	cbz	r2, 402aa4 <__sfvwrite_r+0x6c>
  402a54:	f003 0802 	and.w	r8, r3, #2
  402a58:	fa1f f088 	uxth.w	r0, r8
  402a5c:	6835      	ldr	r5, [r6, #0]
  402a5e:	2800      	cmp	r0, #0
  402a60:	d02f      	beq.n	402ac2 <__sfvwrite_r+0x8a>
  402a62:	f04f 0900 	mov.w	r9, #0
  402a66:	4fb4      	ldr	r7, [pc, #720]	; (402d38 <__sfvwrite_r+0x300>)
  402a68:	46c8      	mov	r8, r9
  402a6a:	46b2      	mov	sl, r6
  402a6c:	45b8      	cmp	r8, r7
  402a6e:	4643      	mov	r3, r8
  402a70:	464a      	mov	r2, r9
  402a72:	bf28      	it	cs
  402a74:	463b      	movcs	r3, r7
  402a76:	9801      	ldr	r0, [sp, #4]
  402a78:	f1b8 0f00 	cmp.w	r8, #0
  402a7c:	d050      	beq.n	402b20 <__sfvwrite_r+0xe8>
  402a7e:	69e1      	ldr	r1, [r4, #28]
  402a80:	6a66      	ldr	r6, [r4, #36]	; 0x24
  402a82:	47b0      	blx	r6
  402a84:	2800      	cmp	r0, #0
  402a86:	dd71      	ble.n	402b6c <__sfvwrite_r+0x134>
  402a88:	f8da 3008 	ldr.w	r3, [sl, #8]
  402a8c:	1a1b      	subs	r3, r3, r0
  402a8e:	4481      	add	r9, r0
  402a90:	ebc0 0808 	rsb	r8, r0, r8
  402a94:	f8ca 3008 	str.w	r3, [sl, #8]
  402a98:	2b00      	cmp	r3, #0
  402a9a:	d1e7      	bne.n	402a6c <__sfvwrite_r+0x34>
  402a9c:	2000      	movs	r0, #0
  402a9e:	b005      	add	sp, #20
  402aa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402aa4:	4621      	mov	r1, r4
  402aa6:	9801      	ldr	r0, [sp, #4]
  402aa8:	f7ff fc68 	bl	40237c <__swsetup_r>
  402aac:	2800      	cmp	r0, #0
  402aae:	f040 813a 	bne.w	402d26 <__sfvwrite_r+0x2ee>
  402ab2:	89a3      	ldrh	r3, [r4, #12]
  402ab4:	6835      	ldr	r5, [r6, #0]
  402ab6:	f003 0802 	and.w	r8, r3, #2
  402aba:	fa1f f088 	uxth.w	r0, r8
  402abe:	2800      	cmp	r0, #0
  402ac0:	d1cf      	bne.n	402a62 <__sfvwrite_r+0x2a>
  402ac2:	f013 0901 	ands.w	r9, r3, #1
  402ac6:	d15b      	bne.n	402b80 <__sfvwrite_r+0x148>
  402ac8:	464f      	mov	r7, r9
  402aca:	9602      	str	r6, [sp, #8]
  402acc:	b31f      	cbz	r7, 402b16 <__sfvwrite_r+0xde>
  402ace:	059a      	lsls	r2, r3, #22
  402ad0:	f8d4 8008 	ldr.w	r8, [r4, #8]
  402ad4:	d52c      	bpl.n	402b30 <__sfvwrite_r+0xf8>
  402ad6:	4547      	cmp	r7, r8
  402ad8:	46c2      	mov	sl, r8
  402ada:	f0c0 80a4 	bcc.w	402c26 <__sfvwrite_r+0x1ee>
  402ade:	f413 6f90 	tst.w	r3, #1152	; 0x480
  402ae2:	f040 80b1 	bne.w	402c48 <__sfvwrite_r+0x210>
  402ae6:	6820      	ldr	r0, [r4, #0]
  402ae8:	4652      	mov	r2, sl
  402aea:	4649      	mov	r1, r9
  402aec:	f000 fd7a 	bl	4035e4 <memmove>
  402af0:	68a0      	ldr	r0, [r4, #8]
  402af2:	6823      	ldr	r3, [r4, #0]
  402af4:	ebc8 0000 	rsb	r0, r8, r0
  402af8:	4453      	add	r3, sl
  402afa:	60a0      	str	r0, [r4, #8]
  402afc:	6023      	str	r3, [r4, #0]
  402afe:	4638      	mov	r0, r7
  402b00:	9a02      	ldr	r2, [sp, #8]
  402b02:	6893      	ldr	r3, [r2, #8]
  402b04:	1a1b      	subs	r3, r3, r0
  402b06:	4481      	add	r9, r0
  402b08:	1a3f      	subs	r7, r7, r0
  402b0a:	6093      	str	r3, [r2, #8]
  402b0c:	2b00      	cmp	r3, #0
  402b0e:	d0c5      	beq.n	402a9c <__sfvwrite_r+0x64>
  402b10:	89a3      	ldrh	r3, [r4, #12]
  402b12:	2f00      	cmp	r7, #0
  402b14:	d1db      	bne.n	402ace <__sfvwrite_r+0x96>
  402b16:	f8d5 9000 	ldr.w	r9, [r5]
  402b1a:	686f      	ldr	r7, [r5, #4]
  402b1c:	3508      	adds	r5, #8
  402b1e:	e7d5      	b.n	402acc <__sfvwrite_r+0x94>
  402b20:	f8d5 9000 	ldr.w	r9, [r5]
  402b24:	f8d5 8004 	ldr.w	r8, [r5, #4]
  402b28:	3508      	adds	r5, #8
  402b2a:	e79f      	b.n	402a6c <__sfvwrite_r+0x34>
  402b2c:	2000      	movs	r0, #0
  402b2e:	4770      	bx	lr
  402b30:	6820      	ldr	r0, [r4, #0]
  402b32:	6923      	ldr	r3, [r4, #16]
  402b34:	4298      	cmp	r0, r3
  402b36:	d803      	bhi.n	402b40 <__sfvwrite_r+0x108>
  402b38:	6961      	ldr	r1, [r4, #20]
  402b3a:	428f      	cmp	r7, r1
  402b3c:	f080 80b7 	bcs.w	402cae <__sfvwrite_r+0x276>
  402b40:	45b8      	cmp	r8, r7
  402b42:	bf28      	it	cs
  402b44:	46b8      	movcs	r8, r7
  402b46:	4642      	mov	r2, r8
  402b48:	4649      	mov	r1, r9
  402b4a:	f000 fd4b 	bl	4035e4 <memmove>
  402b4e:	68a3      	ldr	r3, [r4, #8]
  402b50:	6822      	ldr	r2, [r4, #0]
  402b52:	ebc8 0303 	rsb	r3, r8, r3
  402b56:	4442      	add	r2, r8
  402b58:	60a3      	str	r3, [r4, #8]
  402b5a:	6022      	str	r2, [r4, #0]
  402b5c:	2b00      	cmp	r3, #0
  402b5e:	d149      	bne.n	402bf4 <__sfvwrite_r+0x1bc>
  402b60:	4621      	mov	r1, r4
  402b62:	9801      	ldr	r0, [sp, #4]
  402b64:	f7ff fd22 	bl	4025ac <_fflush_r>
  402b68:	2800      	cmp	r0, #0
  402b6a:	d043      	beq.n	402bf4 <__sfvwrite_r+0x1bc>
  402b6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402b70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402b74:	f04f 30ff 	mov.w	r0, #4294967295
  402b78:	81a3      	strh	r3, [r4, #12]
  402b7a:	b005      	add	sp, #20
  402b7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402b80:	4680      	mov	r8, r0
  402b82:	9002      	str	r0, [sp, #8]
  402b84:	4682      	mov	sl, r0
  402b86:	4681      	mov	r9, r0
  402b88:	f1b9 0f00 	cmp.w	r9, #0
  402b8c:	d02a      	beq.n	402be4 <__sfvwrite_r+0x1ac>
  402b8e:	9b02      	ldr	r3, [sp, #8]
  402b90:	2b00      	cmp	r3, #0
  402b92:	d04c      	beq.n	402c2e <__sfvwrite_r+0x1f6>
  402b94:	6820      	ldr	r0, [r4, #0]
  402b96:	6923      	ldr	r3, [r4, #16]
  402b98:	6962      	ldr	r2, [r4, #20]
  402b9a:	45c8      	cmp	r8, r9
  402b9c:	46c3      	mov	fp, r8
  402b9e:	bf28      	it	cs
  402ba0:	46cb      	movcs	fp, r9
  402ba2:	4298      	cmp	r0, r3
  402ba4:	465f      	mov	r7, fp
  402ba6:	d904      	bls.n	402bb2 <__sfvwrite_r+0x17a>
  402ba8:	68a3      	ldr	r3, [r4, #8]
  402baa:	4413      	add	r3, r2
  402bac:	459b      	cmp	fp, r3
  402bae:	f300 8090 	bgt.w	402cd2 <__sfvwrite_r+0x29a>
  402bb2:	4593      	cmp	fp, r2
  402bb4:	db20      	blt.n	402bf8 <__sfvwrite_r+0x1c0>
  402bb6:	4613      	mov	r3, r2
  402bb8:	6a67      	ldr	r7, [r4, #36]	; 0x24
  402bba:	69e1      	ldr	r1, [r4, #28]
  402bbc:	9801      	ldr	r0, [sp, #4]
  402bbe:	4652      	mov	r2, sl
  402bc0:	47b8      	blx	r7
  402bc2:	1e07      	subs	r7, r0, #0
  402bc4:	ddd2      	ble.n	402b6c <__sfvwrite_r+0x134>
  402bc6:	ebb8 0807 	subs.w	r8, r8, r7
  402bca:	d023      	beq.n	402c14 <__sfvwrite_r+0x1dc>
  402bcc:	68b3      	ldr	r3, [r6, #8]
  402bce:	1bdb      	subs	r3, r3, r7
  402bd0:	44ba      	add	sl, r7
  402bd2:	ebc7 0909 	rsb	r9, r7, r9
  402bd6:	60b3      	str	r3, [r6, #8]
  402bd8:	2b00      	cmp	r3, #0
  402bda:	f43f af5f 	beq.w	402a9c <__sfvwrite_r+0x64>
  402bde:	f1b9 0f00 	cmp.w	r9, #0
  402be2:	d1d4      	bne.n	402b8e <__sfvwrite_r+0x156>
  402be4:	2300      	movs	r3, #0
  402be6:	f8d5 a000 	ldr.w	sl, [r5]
  402bea:	f8d5 9004 	ldr.w	r9, [r5, #4]
  402bee:	9302      	str	r3, [sp, #8]
  402bf0:	3508      	adds	r5, #8
  402bf2:	e7c9      	b.n	402b88 <__sfvwrite_r+0x150>
  402bf4:	4640      	mov	r0, r8
  402bf6:	e783      	b.n	402b00 <__sfvwrite_r+0xc8>
  402bf8:	465a      	mov	r2, fp
  402bfa:	4651      	mov	r1, sl
  402bfc:	f000 fcf2 	bl	4035e4 <memmove>
  402c00:	68a2      	ldr	r2, [r4, #8]
  402c02:	6823      	ldr	r3, [r4, #0]
  402c04:	ebcb 0202 	rsb	r2, fp, r2
  402c08:	445b      	add	r3, fp
  402c0a:	ebb8 0807 	subs.w	r8, r8, r7
  402c0e:	60a2      	str	r2, [r4, #8]
  402c10:	6023      	str	r3, [r4, #0]
  402c12:	d1db      	bne.n	402bcc <__sfvwrite_r+0x194>
  402c14:	4621      	mov	r1, r4
  402c16:	9801      	ldr	r0, [sp, #4]
  402c18:	f7ff fcc8 	bl	4025ac <_fflush_r>
  402c1c:	2800      	cmp	r0, #0
  402c1e:	d1a5      	bne.n	402b6c <__sfvwrite_r+0x134>
  402c20:	f8cd 8008 	str.w	r8, [sp, #8]
  402c24:	e7d2      	b.n	402bcc <__sfvwrite_r+0x194>
  402c26:	6820      	ldr	r0, [r4, #0]
  402c28:	46b8      	mov	r8, r7
  402c2a:	46ba      	mov	sl, r7
  402c2c:	e75c      	b.n	402ae8 <__sfvwrite_r+0xb0>
  402c2e:	464a      	mov	r2, r9
  402c30:	210a      	movs	r1, #10
  402c32:	4650      	mov	r0, sl
  402c34:	f000 fbec 	bl	403410 <memchr>
  402c38:	2800      	cmp	r0, #0
  402c3a:	d06f      	beq.n	402d1c <__sfvwrite_r+0x2e4>
  402c3c:	3001      	adds	r0, #1
  402c3e:	2301      	movs	r3, #1
  402c40:	ebca 0800 	rsb	r8, sl, r0
  402c44:	9302      	str	r3, [sp, #8]
  402c46:	e7a5      	b.n	402b94 <__sfvwrite_r+0x15c>
  402c48:	6962      	ldr	r2, [r4, #20]
  402c4a:	6820      	ldr	r0, [r4, #0]
  402c4c:	6921      	ldr	r1, [r4, #16]
  402c4e:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  402c52:	ebc1 0a00 	rsb	sl, r1, r0
  402c56:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  402c5a:	f10a 0001 	add.w	r0, sl, #1
  402c5e:	ea4f 0868 	mov.w	r8, r8, asr #1
  402c62:	4438      	add	r0, r7
  402c64:	4540      	cmp	r0, r8
  402c66:	4642      	mov	r2, r8
  402c68:	bf84      	itt	hi
  402c6a:	4680      	movhi	r8, r0
  402c6c:	4642      	movhi	r2, r8
  402c6e:	055b      	lsls	r3, r3, #21
  402c70:	d542      	bpl.n	402cf8 <__sfvwrite_r+0x2c0>
  402c72:	4611      	mov	r1, r2
  402c74:	9801      	ldr	r0, [sp, #4]
  402c76:	f000 f911 	bl	402e9c <_malloc_r>
  402c7a:	4683      	mov	fp, r0
  402c7c:	2800      	cmp	r0, #0
  402c7e:	d055      	beq.n	402d2c <__sfvwrite_r+0x2f4>
  402c80:	4652      	mov	r2, sl
  402c82:	6921      	ldr	r1, [r4, #16]
  402c84:	f000 fc14 	bl	4034b0 <memcpy>
  402c88:	89a3      	ldrh	r3, [r4, #12]
  402c8a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  402c8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  402c92:	81a3      	strh	r3, [r4, #12]
  402c94:	ebca 0308 	rsb	r3, sl, r8
  402c98:	eb0b 000a 	add.w	r0, fp, sl
  402c9c:	f8c4 8014 	str.w	r8, [r4, #20]
  402ca0:	f8c4 b010 	str.w	fp, [r4, #16]
  402ca4:	6020      	str	r0, [r4, #0]
  402ca6:	60a3      	str	r3, [r4, #8]
  402ca8:	46b8      	mov	r8, r7
  402caa:	46ba      	mov	sl, r7
  402cac:	e71c      	b.n	402ae8 <__sfvwrite_r+0xb0>
  402cae:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
  402cb2:	42bb      	cmp	r3, r7
  402cb4:	bf28      	it	cs
  402cb6:	463b      	movcs	r3, r7
  402cb8:	464a      	mov	r2, r9
  402cba:	fb93 f3f1 	sdiv	r3, r3, r1
  402cbe:	9801      	ldr	r0, [sp, #4]
  402cc0:	6a66      	ldr	r6, [r4, #36]	; 0x24
  402cc2:	fb01 f303 	mul.w	r3, r1, r3
  402cc6:	69e1      	ldr	r1, [r4, #28]
  402cc8:	47b0      	blx	r6
  402cca:	2800      	cmp	r0, #0
  402ccc:	f73f af18 	bgt.w	402b00 <__sfvwrite_r+0xc8>
  402cd0:	e74c      	b.n	402b6c <__sfvwrite_r+0x134>
  402cd2:	461a      	mov	r2, r3
  402cd4:	4651      	mov	r1, sl
  402cd6:	9303      	str	r3, [sp, #12]
  402cd8:	f000 fc84 	bl	4035e4 <memmove>
  402cdc:	6822      	ldr	r2, [r4, #0]
  402cde:	9b03      	ldr	r3, [sp, #12]
  402ce0:	9801      	ldr	r0, [sp, #4]
  402ce2:	441a      	add	r2, r3
  402ce4:	6022      	str	r2, [r4, #0]
  402ce6:	4621      	mov	r1, r4
  402ce8:	f7ff fc60 	bl	4025ac <_fflush_r>
  402cec:	9b03      	ldr	r3, [sp, #12]
  402cee:	2800      	cmp	r0, #0
  402cf0:	f47f af3c 	bne.w	402b6c <__sfvwrite_r+0x134>
  402cf4:	461f      	mov	r7, r3
  402cf6:	e766      	b.n	402bc6 <__sfvwrite_r+0x18e>
  402cf8:	9801      	ldr	r0, [sp, #4]
  402cfa:	f000 fcdb 	bl	4036b4 <_realloc_r>
  402cfe:	4683      	mov	fp, r0
  402d00:	2800      	cmp	r0, #0
  402d02:	d1c7      	bne.n	402c94 <__sfvwrite_r+0x25c>
  402d04:	9d01      	ldr	r5, [sp, #4]
  402d06:	6921      	ldr	r1, [r4, #16]
  402d08:	4628      	mov	r0, r5
  402d0a:	f7ff fdad 	bl	402868 <_free_r>
  402d0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402d12:	220c      	movs	r2, #12
  402d14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  402d18:	602a      	str	r2, [r5, #0]
  402d1a:	e729      	b.n	402b70 <__sfvwrite_r+0x138>
  402d1c:	2301      	movs	r3, #1
  402d1e:	f109 0801 	add.w	r8, r9, #1
  402d22:	9302      	str	r3, [sp, #8]
  402d24:	e736      	b.n	402b94 <__sfvwrite_r+0x15c>
  402d26:	f04f 30ff 	mov.w	r0, #4294967295
  402d2a:	e6b8      	b.n	402a9e <__sfvwrite_r+0x66>
  402d2c:	9a01      	ldr	r2, [sp, #4]
  402d2e:	230c      	movs	r3, #12
  402d30:	6013      	str	r3, [r2, #0]
  402d32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402d36:	e71b      	b.n	402b70 <__sfvwrite_r+0x138>
  402d38:	7ffffc00 	.word	0x7ffffc00

00402d3c <_fwalk_reent>:
  402d3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  402d40:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  402d44:	d01f      	beq.n	402d86 <_fwalk_reent+0x4a>
  402d46:	4688      	mov	r8, r1
  402d48:	4606      	mov	r6, r0
  402d4a:	f04f 0900 	mov.w	r9, #0
  402d4e:	687d      	ldr	r5, [r7, #4]
  402d50:	68bc      	ldr	r4, [r7, #8]
  402d52:	3d01      	subs	r5, #1
  402d54:	d411      	bmi.n	402d7a <_fwalk_reent+0x3e>
  402d56:	89a3      	ldrh	r3, [r4, #12]
  402d58:	2b01      	cmp	r3, #1
  402d5a:	f105 35ff 	add.w	r5, r5, #4294967295
  402d5e:	d908      	bls.n	402d72 <_fwalk_reent+0x36>
  402d60:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  402d64:	3301      	adds	r3, #1
  402d66:	4621      	mov	r1, r4
  402d68:	4630      	mov	r0, r6
  402d6a:	d002      	beq.n	402d72 <_fwalk_reent+0x36>
  402d6c:	47c0      	blx	r8
  402d6e:	ea49 0900 	orr.w	r9, r9, r0
  402d72:	1c6b      	adds	r3, r5, #1
  402d74:	f104 0468 	add.w	r4, r4, #104	; 0x68
  402d78:	d1ed      	bne.n	402d56 <_fwalk_reent+0x1a>
  402d7a:	683f      	ldr	r7, [r7, #0]
  402d7c:	2f00      	cmp	r7, #0
  402d7e:	d1e6      	bne.n	402d4e <_fwalk_reent+0x12>
  402d80:	4648      	mov	r0, r9
  402d82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402d86:	46b9      	mov	r9, r7
  402d88:	4648      	mov	r0, r9
  402d8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402d8e:	bf00      	nop

00402d90 <__locale_charset>:
  402d90:	4800      	ldr	r0, [pc, #0]	; (402d94 <__locale_charset+0x4>)
  402d92:	4770      	bx	lr
  402d94:	20400434 	.word	0x20400434

00402d98 <__locale_mb_cur_max>:
  402d98:	4b01      	ldr	r3, [pc, #4]	; (402da0 <__locale_mb_cur_max+0x8>)
  402d9a:	6818      	ldr	r0, [r3, #0]
  402d9c:	4770      	bx	lr
  402d9e:	bf00      	nop
  402da0:	20400454 	.word	0x20400454

00402da4 <__swhatbuf_r>:
  402da4:	b570      	push	{r4, r5, r6, lr}
  402da6:	460d      	mov	r5, r1
  402da8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  402dac:	2900      	cmp	r1, #0
  402dae:	b090      	sub	sp, #64	; 0x40
  402db0:	4614      	mov	r4, r2
  402db2:	461e      	mov	r6, r3
  402db4:	db14      	blt.n	402de0 <__swhatbuf_r+0x3c>
  402db6:	aa01      	add	r2, sp, #4
  402db8:	f001 f80c 	bl	403dd4 <_fstat_r>
  402dbc:	2800      	cmp	r0, #0
  402dbe:	db0f      	blt.n	402de0 <__swhatbuf_r+0x3c>
  402dc0:	9a02      	ldr	r2, [sp, #8]
  402dc2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  402dc6:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  402dca:	fab2 f282 	clz	r2, r2
  402dce:	0952      	lsrs	r2, r2, #5
  402dd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
  402dd4:	f44f 6000 	mov.w	r0, #2048	; 0x800
  402dd8:	6032      	str	r2, [r6, #0]
  402dda:	6023      	str	r3, [r4, #0]
  402ddc:	b010      	add	sp, #64	; 0x40
  402dde:	bd70      	pop	{r4, r5, r6, pc}
  402de0:	89a8      	ldrh	r0, [r5, #12]
  402de2:	f000 0080 	and.w	r0, r0, #128	; 0x80
  402de6:	b282      	uxth	r2, r0
  402de8:	2000      	movs	r0, #0
  402dea:	6030      	str	r0, [r6, #0]
  402dec:	b11a      	cbz	r2, 402df6 <__swhatbuf_r+0x52>
  402dee:	2340      	movs	r3, #64	; 0x40
  402df0:	6023      	str	r3, [r4, #0]
  402df2:	b010      	add	sp, #64	; 0x40
  402df4:	bd70      	pop	{r4, r5, r6, pc}
  402df6:	f44f 6380 	mov.w	r3, #1024	; 0x400
  402dfa:	4610      	mov	r0, r2
  402dfc:	6023      	str	r3, [r4, #0]
  402dfe:	b010      	add	sp, #64	; 0x40
  402e00:	bd70      	pop	{r4, r5, r6, pc}
  402e02:	bf00      	nop

00402e04 <__smakebuf_r>:
  402e04:	898a      	ldrh	r2, [r1, #12]
  402e06:	0792      	lsls	r2, r2, #30
  402e08:	460b      	mov	r3, r1
  402e0a:	d506      	bpl.n	402e1a <__smakebuf_r+0x16>
  402e0c:	f101 0243 	add.w	r2, r1, #67	; 0x43
  402e10:	2101      	movs	r1, #1
  402e12:	601a      	str	r2, [r3, #0]
  402e14:	611a      	str	r2, [r3, #16]
  402e16:	6159      	str	r1, [r3, #20]
  402e18:	4770      	bx	lr
  402e1a:	b5f0      	push	{r4, r5, r6, r7, lr}
  402e1c:	b083      	sub	sp, #12
  402e1e:	ab01      	add	r3, sp, #4
  402e20:	466a      	mov	r2, sp
  402e22:	460c      	mov	r4, r1
  402e24:	4605      	mov	r5, r0
  402e26:	f7ff ffbd 	bl	402da4 <__swhatbuf_r>
  402e2a:	9900      	ldr	r1, [sp, #0]
  402e2c:	4606      	mov	r6, r0
  402e2e:	4628      	mov	r0, r5
  402e30:	f000 f834 	bl	402e9c <_malloc_r>
  402e34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402e38:	b1d0      	cbz	r0, 402e70 <__smakebuf_r+0x6c>
  402e3a:	9a01      	ldr	r2, [sp, #4]
  402e3c:	4f12      	ldr	r7, [pc, #72]	; (402e88 <__smakebuf_r+0x84>)
  402e3e:	9900      	ldr	r1, [sp, #0]
  402e40:	63ef      	str	r7, [r5, #60]	; 0x3c
  402e42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  402e46:	81a3      	strh	r3, [r4, #12]
  402e48:	6020      	str	r0, [r4, #0]
  402e4a:	6120      	str	r0, [r4, #16]
  402e4c:	6161      	str	r1, [r4, #20]
  402e4e:	b91a      	cbnz	r2, 402e58 <__smakebuf_r+0x54>
  402e50:	4333      	orrs	r3, r6
  402e52:	81a3      	strh	r3, [r4, #12]
  402e54:	b003      	add	sp, #12
  402e56:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402e58:	4628      	mov	r0, r5
  402e5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  402e5e:	f000 ffcd 	bl	403dfc <_isatty_r>
  402e62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402e66:	2800      	cmp	r0, #0
  402e68:	d0f2      	beq.n	402e50 <__smakebuf_r+0x4c>
  402e6a:	f043 0301 	orr.w	r3, r3, #1
  402e6e:	e7ef      	b.n	402e50 <__smakebuf_r+0x4c>
  402e70:	059a      	lsls	r2, r3, #22
  402e72:	d4ef      	bmi.n	402e54 <__smakebuf_r+0x50>
  402e74:	f104 0243 	add.w	r2, r4, #67	; 0x43
  402e78:	f043 0302 	orr.w	r3, r3, #2
  402e7c:	2101      	movs	r1, #1
  402e7e:	81a3      	strh	r3, [r4, #12]
  402e80:	6022      	str	r2, [r4, #0]
  402e82:	6122      	str	r2, [r4, #16]
  402e84:	6161      	str	r1, [r4, #20]
  402e86:	e7e5      	b.n	402e54 <__smakebuf_r+0x50>
  402e88:	004025d9 	.word	0x004025d9

00402e8c <malloc>:
  402e8c:	4b02      	ldr	r3, [pc, #8]	; (402e98 <malloc+0xc>)
  402e8e:	4601      	mov	r1, r0
  402e90:	6818      	ldr	r0, [r3, #0]
  402e92:	f000 b803 	b.w	402e9c <_malloc_r>
  402e96:	bf00      	nop
  402e98:	20400430 	.word	0x20400430

00402e9c <_malloc_r>:
  402e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402ea0:	f101 050b 	add.w	r5, r1, #11
  402ea4:	2d16      	cmp	r5, #22
  402ea6:	b083      	sub	sp, #12
  402ea8:	4606      	mov	r6, r0
  402eaa:	f240 809f 	bls.w	402fec <_malloc_r+0x150>
  402eae:	f035 0507 	bics.w	r5, r5, #7
  402eb2:	f100 80bf 	bmi.w	403034 <_malloc_r+0x198>
  402eb6:	42a9      	cmp	r1, r5
  402eb8:	f200 80bc 	bhi.w	403034 <_malloc_r+0x198>
  402ebc:	f000 fbf6 	bl	4036ac <__malloc_lock>
  402ec0:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
  402ec4:	f0c0 829c 	bcc.w	403400 <_malloc_r+0x564>
  402ec8:	0a6b      	lsrs	r3, r5, #9
  402eca:	f000 80ba 	beq.w	403042 <_malloc_r+0x1a6>
  402ece:	2b04      	cmp	r3, #4
  402ed0:	f200 8183 	bhi.w	4031da <_malloc_r+0x33e>
  402ed4:	09a8      	lsrs	r0, r5, #6
  402ed6:	f100 0e39 	add.w	lr, r0, #57	; 0x39
  402eda:	ea4f 034e 	mov.w	r3, lr, lsl #1
  402ede:	3038      	adds	r0, #56	; 0x38
  402ee0:	4fc4      	ldr	r7, [pc, #784]	; (4031f4 <_malloc_r+0x358>)
  402ee2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  402ee6:	f1a3 0108 	sub.w	r1, r3, #8
  402eea:	685c      	ldr	r4, [r3, #4]
  402eec:	42a1      	cmp	r1, r4
  402eee:	d107      	bne.n	402f00 <_malloc_r+0x64>
  402ef0:	e0ac      	b.n	40304c <_malloc_r+0x1b0>
  402ef2:	2a00      	cmp	r2, #0
  402ef4:	f280 80ac 	bge.w	403050 <_malloc_r+0x1b4>
  402ef8:	68e4      	ldr	r4, [r4, #12]
  402efa:	42a1      	cmp	r1, r4
  402efc:	f000 80a6 	beq.w	40304c <_malloc_r+0x1b0>
  402f00:	6863      	ldr	r3, [r4, #4]
  402f02:	f023 0303 	bic.w	r3, r3, #3
  402f06:	1b5a      	subs	r2, r3, r5
  402f08:	2a0f      	cmp	r2, #15
  402f0a:	ddf2      	ble.n	402ef2 <_malloc_r+0x56>
  402f0c:	49b9      	ldr	r1, [pc, #740]	; (4031f4 <_malloc_r+0x358>)
  402f0e:	693c      	ldr	r4, [r7, #16]
  402f10:	f101 0e08 	add.w	lr, r1, #8
  402f14:	4574      	cmp	r4, lr
  402f16:	f000 81b3 	beq.w	403280 <_malloc_r+0x3e4>
  402f1a:	6863      	ldr	r3, [r4, #4]
  402f1c:	f023 0303 	bic.w	r3, r3, #3
  402f20:	1b5a      	subs	r2, r3, r5
  402f22:	2a0f      	cmp	r2, #15
  402f24:	f300 8199 	bgt.w	40325a <_malloc_r+0x3be>
  402f28:	2a00      	cmp	r2, #0
  402f2a:	f8c1 e014 	str.w	lr, [r1, #20]
  402f2e:	f8c1 e010 	str.w	lr, [r1, #16]
  402f32:	f280 809e 	bge.w	403072 <_malloc_r+0x1d6>
  402f36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  402f3a:	f080 8167 	bcs.w	40320c <_malloc_r+0x370>
  402f3e:	08db      	lsrs	r3, r3, #3
  402f40:	f103 0c01 	add.w	ip, r3, #1
  402f44:	2201      	movs	r2, #1
  402f46:	109b      	asrs	r3, r3, #2
  402f48:	fa02 f303 	lsl.w	r3, r2, r3
  402f4c:	684a      	ldr	r2, [r1, #4]
  402f4e:	f851 803c 	ldr.w	r8, [r1, ip, lsl #3]
  402f52:	f8c4 8008 	str.w	r8, [r4, #8]
  402f56:	eb01 09cc 	add.w	r9, r1, ip, lsl #3
  402f5a:	431a      	orrs	r2, r3
  402f5c:	f1a9 0308 	sub.w	r3, r9, #8
  402f60:	60e3      	str	r3, [r4, #12]
  402f62:	604a      	str	r2, [r1, #4]
  402f64:	f841 403c 	str.w	r4, [r1, ip, lsl #3]
  402f68:	f8c8 400c 	str.w	r4, [r8, #12]
  402f6c:	1083      	asrs	r3, r0, #2
  402f6e:	2401      	movs	r4, #1
  402f70:	409c      	lsls	r4, r3
  402f72:	4294      	cmp	r4, r2
  402f74:	f200 808a 	bhi.w	40308c <_malloc_r+0x1f0>
  402f78:	4214      	tst	r4, r2
  402f7a:	d106      	bne.n	402f8a <_malloc_r+0xee>
  402f7c:	f020 0003 	bic.w	r0, r0, #3
  402f80:	0064      	lsls	r4, r4, #1
  402f82:	4214      	tst	r4, r2
  402f84:	f100 0004 	add.w	r0, r0, #4
  402f88:	d0fa      	beq.n	402f80 <_malloc_r+0xe4>
  402f8a:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  402f8e:	46cc      	mov	ip, r9
  402f90:	4680      	mov	r8, r0
  402f92:	f8dc 100c 	ldr.w	r1, [ip, #12]
  402f96:	458c      	cmp	ip, r1
  402f98:	d107      	bne.n	402faa <_malloc_r+0x10e>
  402f9a:	e173      	b.n	403284 <_malloc_r+0x3e8>
  402f9c:	2a00      	cmp	r2, #0
  402f9e:	f280 8181 	bge.w	4032a4 <_malloc_r+0x408>
  402fa2:	68c9      	ldr	r1, [r1, #12]
  402fa4:	458c      	cmp	ip, r1
  402fa6:	f000 816d 	beq.w	403284 <_malloc_r+0x3e8>
  402faa:	684b      	ldr	r3, [r1, #4]
  402fac:	f023 0303 	bic.w	r3, r3, #3
  402fb0:	1b5a      	subs	r2, r3, r5
  402fb2:	2a0f      	cmp	r2, #15
  402fb4:	ddf2      	ble.n	402f9c <_malloc_r+0x100>
  402fb6:	460c      	mov	r4, r1
  402fb8:	f8d1 c00c 	ldr.w	ip, [r1, #12]
  402fbc:	f854 8f08 	ldr.w	r8, [r4, #8]!
  402fc0:	194b      	adds	r3, r1, r5
  402fc2:	f045 0501 	orr.w	r5, r5, #1
  402fc6:	604d      	str	r5, [r1, #4]
  402fc8:	f042 0101 	orr.w	r1, r2, #1
  402fcc:	f8c8 c00c 	str.w	ip, [r8, #12]
  402fd0:	4630      	mov	r0, r6
  402fd2:	f8cc 8008 	str.w	r8, [ip, #8]
  402fd6:	617b      	str	r3, [r7, #20]
  402fd8:	613b      	str	r3, [r7, #16]
  402fda:	f8c3 e00c 	str.w	lr, [r3, #12]
  402fde:	f8c3 e008 	str.w	lr, [r3, #8]
  402fe2:	6059      	str	r1, [r3, #4]
  402fe4:	509a      	str	r2, [r3, r2]
  402fe6:	f000 fb63 	bl	4036b0 <__malloc_unlock>
  402fea:	e01f      	b.n	40302c <_malloc_r+0x190>
  402fec:	2910      	cmp	r1, #16
  402fee:	d821      	bhi.n	403034 <_malloc_r+0x198>
  402ff0:	f000 fb5c 	bl	4036ac <__malloc_lock>
  402ff4:	2510      	movs	r5, #16
  402ff6:	2306      	movs	r3, #6
  402ff8:	2002      	movs	r0, #2
  402ffa:	4f7e      	ldr	r7, [pc, #504]	; (4031f4 <_malloc_r+0x358>)
  402ffc:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  403000:	f1a3 0208 	sub.w	r2, r3, #8
  403004:	685c      	ldr	r4, [r3, #4]
  403006:	4294      	cmp	r4, r2
  403008:	f000 8145 	beq.w	403296 <_malloc_r+0x3fa>
  40300c:	6863      	ldr	r3, [r4, #4]
  40300e:	68e1      	ldr	r1, [r4, #12]
  403010:	68a5      	ldr	r5, [r4, #8]
  403012:	f023 0303 	bic.w	r3, r3, #3
  403016:	4423      	add	r3, r4
  403018:	4630      	mov	r0, r6
  40301a:	685a      	ldr	r2, [r3, #4]
  40301c:	60e9      	str	r1, [r5, #12]
  40301e:	f042 0201 	orr.w	r2, r2, #1
  403022:	608d      	str	r5, [r1, #8]
  403024:	605a      	str	r2, [r3, #4]
  403026:	f000 fb43 	bl	4036b0 <__malloc_unlock>
  40302a:	3408      	adds	r4, #8
  40302c:	4620      	mov	r0, r4
  40302e:	b003      	add	sp, #12
  403030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403034:	2400      	movs	r4, #0
  403036:	230c      	movs	r3, #12
  403038:	4620      	mov	r0, r4
  40303a:	6033      	str	r3, [r6, #0]
  40303c:	b003      	add	sp, #12
  40303e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403042:	2380      	movs	r3, #128	; 0x80
  403044:	f04f 0e40 	mov.w	lr, #64	; 0x40
  403048:	203f      	movs	r0, #63	; 0x3f
  40304a:	e749      	b.n	402ee0 <_malloc_r+0x44>
  40304c:	4670      	mov	r0, lr
  40304e:	e75d      	b.n	402f0c <_malloc_r+0x70>
  403050:	4423      	add	r3, r4
  403052:	68e1      	ldr	r1, [r4, #12]
  403054:	685a      	ldr	r2, [r3, #4]
  403056:	68a5      	ldr	r5, [r4, #8]
  403058:	f042 0201 	orr.w	r2, r2, #1
  40305c:	60e9      	str	r1, [r5, #12]
  40305e:	4630      	mov	r0, r6
  403060:	608d      	str	r5, [r1, #8]
  403062:	605a      	str	r2, [r3, #4]
  403064:	f000 fb24 	bl	4036b0 <__malloc_unlock>
  403068:	3408      	adds	r4, #8
  40306a:	4620      	mov	r0, r4
  40306c:	b003      	add	sp, #12
  40306e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403072:	4423      	add	r3, r4
  403074:	4630      	mov	r0, r6
  403076:	685a      	ldr	r2, [r3, #4]
  403078:	f042 0201 	orr.w	r2, r2, #1
  40307c:	605a      	str	r2, [r3, #4]
  40307e:	f000 fb17 	bl	4036b0 <__malloc_unlock>
  403082:	3408      	adds	r4, #8
  403084:	4620      	mov	r0, r4
  403086:	b003      	add	sp, #12
  403088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40308c:	68bc      	ldr	r4, [r7, #8]
  40308e:	6863      	ldr	r3, [r4, #4]
  403090:	f023 0803 	bic.w	r8, r3, #3
  403094:	45a8      	cmp	r8, r5
  403096:	d304      	bcc.n	4030a2 <_malloc_r+0x206>
  403098:	ebc5 0308 	rsb	r3, r5, r8
  40309c:	2b0f      	cmp	r3, #15
  40309e:	f300 808c 	bgt.w	4031ba <_malloc_r+0x31e>
  4030a2:	4b55      	ldr	r3, [pc, #340]	; (4031f8 <_malloc_r+0x35c>)
  4030a4:	f8df 9160 	ldr.w	r9, [pc, #352]	; 403208 <_malloc_r+0x36c>
  4030a8:	681a      	ldr	r2, [r3, #0]
  4030aa:	f8d9 3000 	ldr.w	r3, [r9]
  4030ae:	3301      	adds	r3, #1
  4030b0:	442a      	add	r2, r5
  4030b2:	eb04 0a08 	add.w	sl, r4, r8
  4030b6:	f000 8160 	beq.w	40337a <_malloc_r+0x4de>
  4030ba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
  4030be:	320f      	adds	r2, #15
  4030c0:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
  4030c4:	f022 020f 	bic.w	r2, r2, #15
  4030c8:	4611      	mov	r1, r2
  4030ca:	4630      	mov	r0, r6
  4030cc:	9201      	str	r2, [sp, #4]
  4030ce:	f000 fce1 	bl	403a94 <_sbrk_r>
  4030d2:	f1b0 3fff 	cmp.w	r0, #4294967295
  4030d6:	4683      	mov	fp, r0
  4030d8:	9a01      	ldr	r2, [sp, #4]
  4030da:	f000 8158 	beq.w	40338e <_malloc_r+0x4f2>
  4030de:	4582      	cmp	sl, r0
  4030e0:	f200 80fc 	bhi.w	4032dc <_malloc_r+0x440>
  4030e4:	4b45      	ldr	r3, [pc, #276]	; (4031fc <_malloc_r+0x360>)
  4030e6:	6819      	ldr	r1, [r3, #0]
  4030e8:	45da      	cmp	sl, fp
  4030ea:	4411      	add	r1, r2
  4030ec:	6019      	str	r1, [r3, #0]
  4030ee:	f000 8153 	beq.w	403398 <_malloc_r+0x4fc>
  4030f2:	f8d9 0000 	ldr.w	r0, [r9]
  4030f6:	f8df e110 	ldr.w	lr, [pc, #272]	; 403208 <_malloc_r+0x36c>
  4030fa:	3001      	adds	r0, #1
  4030fc:	bf1b      	ittet	ne
  4030fe:	ebca 0a0b 	rsbne	sl, sl, fp
  403102:	4451      	addne	r1, sl
  403104:	f8ce b000 	streq.w	fp, [lr]
  403108:	6019      	strne	r1, [r3, #0]
  40310a:	f01b 0107 	ands.w	r1, fp, #7
  40310e:	f000 8117 	beq.w	403340 <_malloc_r+0x4a4>
  403112:	f1c1 0008 	rsb	r0, r1, #8
  403116:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  40311a:	4483      	add	fp, r0
  40311c:	3108      	adds	r1, #8
  40311e:	445a      	add	r2, fp
  403120:	f3c2 020b 	ubfx	r2, r2, #0, #12
  403124:	ebc2 0901 	rsb	r9, r2, r1
  403128:	4649      	mov	r1, r9
  40312a:	4630      	mov	r0, r6
  40312c:	9301      	str	r3, [sp, #4]
  40312e:	f000 fcb1 	bl	403a94 <_sbrk_r>
  403132:	1c43      	adds	r3, r0, #1
  403134:	9b01      	ldr	r3, [sp, #4]
  403136:	f000 813f 	beq.w	4033b8 <_malloc_r+0x51c>
  40313a:	ebcb 0200 	rsb	r2, fp, r0
  40313e:	444a      	add	r2, r9
  403140:	f042 0201 	orr.w	r2, r2, #1
  403144:	6819      	ldr	r1, [r3, #0]
  403146:	f8c7 b008 	str.w	fp, [r7, #8]
  40314a:	4449      	add	r1, r9
  40314c:	42bc      	cmp	r4, r7
  40314e:	f8cb 2004 	str.w	r2, [fp, #4]
  403152:	6019      	str	r1, [r3, #0]
  403154:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 4031fc <_malloc_r+0x360>
  403158:	d016      	beq.n	403188 <_malloc_r+0x2ec>
  40315a:	f1b8 0f0f 	cmp.w	r8, #15
  40315e:	f240 80fd 	bls.w	40335c <_malloc_r+0x4c0>
  403162:	6862      	ldr	r2, [r4, #4]
  403164:	f1a8 030c 	sub.w	r3, r8, #12
  403168:	f023 0307 	bic.w	r3, r3, #7
  40316c:	18e0      	adds	r0, r4, r3
  40316e:	f002 0201 	and.w	r2, r2, #1
  403172:	f04f 0e05 	mov.w	lr, #5
  403176:	431a      	orrs	r2, r3
  403178:	2b0f      	cmp	r3, #15
  40317a:	6062      	str	r2, [r4, #4]
  40317c:	f8c0 e004 	str.w	lr, [r0, #4]
  403180:	f8c0 e008 	str.w	lr, [r0, #8]
  403184:	f200 811c 	bhi.w	4033c0 <_malloc_r+0x524>
  403188:	4b1d      	ldr	r3, [pc, #116]	; (403200 <_malloc_r+0x364>)
  40318a:	68bc      	ldr	r4, [r7, #8]
  40318c:	681a      	ldr	r2, [r3, #0]
  40318e:	4291      	cmp	r1, r2
  403190:	bf88      	it	hi
  403192:	6019      	strhi	r1, [r3, #0]
  403194:	4b1b      	ldr	r3, [pc, #108]	; (403204 <_malloc_r+0x368>)
  403196:	681a      	ldr	r2, [r3, #0]
  403198:	4291      	cmp	r1, r2
  40319a:	6862      	ldr	r2, [r4, #4]
  40319c:	bf88      	it	hi
  40319e:	6019      	strhi	r1, [r3, #0]
  4031a0:	f022 0203 	bic.w	r2, r2, #3
  4031a4:	4295      	cmp	r5, r2
  4031a6:	eba2 0305 	sub.w	r3, r2, r5
  4031aa:	d801      	bhi.n	4031b0 <_malloc_r+0x314>
  4031ac:	2b0f      	cmp	r3, #15
  4031ae:	dc04      	bgt.n	4031ba <_malloc_r+0x31e>
  4031b0:	4630      	mov	r0, r6
  4031b2:	f000 fa7d 	bl	4036b0 <__malloc_unlock>
  4031b6:	2400      	movs	r4, #0
  4031b8:	e738      	b.n	40302c <_malloc_r+0x190>
  4031ba:	1962      	adds	r2, r4, r5
  4031bc:	f043 0301 	orr.w	r3, r3, #1
  4031c0:	f045 0501 	orr.w	r5, r5, #1
  4031c4:	6065      	str	r5, [r4, #4]
  4031c6:	4630      	mov	r0, r6
  4031c8:	60ba      	str	r2, [r7, #8]
  4031ca:	6053      	str	r3, [r2, #4]
  4031cc:	f000 fa70 	bl	4036b0 <__malloc_unlock>
  4031d0:	3408      	adds	r4, #8
  4031d2:	4620      	mov	r0, r4
  4031d4:	b003      	add	sp, #12
  4031d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4031da:	2b14      	cmp	r3, #20
  4031dc:	d971      	bls.n	4032c2 <_malloc_r+0x426>
  4031de:	2b54      	cmp	r3, #84	; 0x54
  4031e0:	f200 80a4 	bhi.w	40332c <_malloc_r+0x490>
  4031e4:	0b28      	lsrs	r0, r5, #12
  4031e6:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
  4031ea:	ea4f 034e 	mov.w	r3, lr, lsl #1
  4031ee:	306e      	adds	r0, #110	; 0x6e
  4031f0:	e676      	b.n	402ee0 <_malloc_r+0x44>
  4031f2:	bf00      	nop
  4031f4:	20400458 	.word	0x20400458
  4031f8:	20400910 	.word	0x20400910
  4031fc:	20400914 	.word	0x20400914
  403200:	2040090c 	.word	0x2040090c
  403204:	20400908 	.word	0x20400908
  403208:	20400864 	.word	0x20400864
  40320c:	0a5a      	lsrs	r2, r3, #9
  40320e:	2a04      	cmp	r2, #4
  403210:	d95e      	bls.n	4032d0 <_malloc_r+0x434>
  403212:	2a14      	cmp	r2, #20
  403214:	f200 80b3 	bhi.w	40337e <_malloc_r+0x4e2>
  403218:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  40321c:	0049      	lsls	r1, r1, #1
  40321e:	325b      	adds	r2, #91	; 0x5b
  403220:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
  403224:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
  403228:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 403408 <_malloc_r+0x56c>
  40322c:	f1ac 0c08 	sub.w	ip, ip, #8
  403230:	458c      	cmp	ip, r1
  403232:	f000 8088 	beq.w	403346 <_malloc_r+0x4aa>
  403236:	684a      	ldr	r2, [r1, #4]
  403238:	f022 0203 	bic.w	r2, r2, #3
  40323c:	4293      	cmp	r3, r2
  40323e:	d202      	bcs.n	403246 <_malloc_r+0x3aa>
  403240:	6889      	ldr	r1, [r1, #8]
  403242:	458c      	cmp	ip, r1
  403244:	d1f7      	bne.n	403236 <_malloc_r+0x39a>
  403246:	f8d1 c00c 	ldr.w	ip, [r1, #12]
  40324a:	687a      	ldr	r2, [r7, #4]
  40324c:	f8c4 c00c 	str.w	ip, [r4, #12]
  403250:	60a1      	str	r1, [r4, #8]
  403252:	f8cc 4008 	str.w	r4, [ip, #8]
  403256:	60cc      	str	r4, [r1, #12]
  403258:	e688      	b.n	402f6c <_malloc_r+0xd0>
  40325a:	1963      	adds	r3, r4, r5
  40325c:	f042 0701 	orr.w	r7, r2, #1
  403260:	f045 0501 	orr.w	r5, r5, #1
  403264:	6065      	str	r5, [r4, #4]
  403266:	4630      	mov	r0, r6
  403268:	614b      	str	r3, [r1, #20]
  40326a:	610b      	str	r3, [r1, #16]
  40326c:	f8c3 e00c 	str.w	lr, [r3, #12]
  403270:	f8c3 e008 	str.w	lr, [r3, #8]
  403274:	605f      	str	r7, [r3, #4]
  403276:	509a      	str	r2, [r3, r2]
  403278:	3408      	adds	r4, #8
  40327a:	f000 fa19 	bl	4036b0 <__malloc_unlock>
  40327e:	e6d5      	b.n	40302c <_malloc_r+0x190>
  403280:	684a      	ldr	r2, [r1, #4]
  403282:	e673      	b.n	402f6c <_malloc_r+0xd0>
  403284:	f108 0801 	add.w	r8, r8, #1
  403288:	f018 0f03 	tst.w	r8, #3
  40328c:	f10c 0c08 	add.w	ip, ip, #8
  403290:	f47f ae7f 	bne.w	402f92 <_malloc_r+0xf6>
  403294:	e030      	b.n	4032f8 <_malloc_r+0x45c>
  403296:	68dc      	ldr	r4, [r3, #12]
  403298:	42a3      	cmp	r3, r4
  40329a:	bf08      	it	eq
  40329c:	3002      	addeq	r0, #2
  40329e:	f43f ae35 	beq.w	402f0c <_malloc_r+0x70>
  4032a2:	e6b3      	b.n	40300c <_malloc_r+0x170>
  4032a4:	440b      	add	r3, r1
  4032a6:	460c      	mov	r4, r1
  4032a8:	685a      	ldr	r2, [r3, #4]
  4032aa:	68c9      	ldr	r1, [r1, #12]
  4032ac:	f854 5f08 	ldr.w	r5, [r4, #8]!
  4032b0:	f042 0201 	orr.w	r2, r2, #1
  4032b4:	605a      	str	r2, [r3, #4]
  4032b6:	4630      	mov	r0, r6
  4032b8:	60e9      	str	r1, [r5, #12]
  4032ba:	608d      	str	r5, [r1, #8]
  4032bc:	f000 f9f8 	bl	4036b0 <__malloc_unlock>
  4032c0:	e6b4      	b.n	40302c <_malloc_r+0x190>
  4032c2:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
  4032c6:	f103 005b 	add.w	r0, r3, #91	; 0x5b
  4032ca:	ea4f 034e 	mov.w	r3, lr, lsl #1
  4032ce:	e607      	b.n	402ee0 <_malloc_r+0x44>
  4032d0:	099a      	lsrs	r2, r3, #6
  4032d2:	f102 0139 	add.w	r1, r2, #57	; 0x39
  4032d6:	0049      	lsls	r1, r1, #1
  4032d8:	3238      	adds	r2, #56	; 0x38
  4032da:	e7a1      	b.n	403220 <_malloc_r+0x384>
  4032dc:	42bc      	cmp	r4, r7
  4032de:	4b4a      	ldr	r3, [pc, #296]	; (403408 <_malloc_r+0x56c>)
  4032e0:	f43f af00 	beq.w	4030e4 <_malloc_r+0x248>
  4032e4:	689c      	ldr	r4, [r3, #8]
  4032e6:	6862      	ldr	r2, [r4, #4]
  4032e8:	f022 0203 	bic.w	r2, r2, #3
  4032ec:	e75a      	b.n	4031a4 <_malloc_r+0x308>
  4032ee:	f859 3908 	ldr.w	r3, [r9], #-8
  4032f2:	4599      	cmp	r9, r3
  4032f4:	f040 8082 	bne.w	4033fc <_malloc_r+0x560>
  4032f8:	f010 0f03 	tst.w	r0, #3
  4032fc:	f100 30ff 	add.w	r0, r0, #4294967295
  403300:	d1f5      	bne.n	4032ee <_malloc_r+0x452>
  403302:	687b      	ldr	r3, [r7, #4]
  403304:	ea23 0304 	bic.w	r3, r3, r4
  403308:	607b      	str	r3, [r7, #4]
  40330a:	0064      	lsls	r4, r4, #1
  40330c:	429c      	cmp	r4, r3
  40330e:	f63f aebd 	bhi.w	40308c <_malloc_r+0x1f0>
  403312:	2c00      	cmp	r4, #0
  403314:	f43f aeba 	beq.w	40308c <_malloc_r+0x1f0>
  403318:	421c      	tst	r4, r3
  40331a:	4640      	mov	r0, r8
  40331c:	f47f ae35 	bne.w	402f8a <_malloc_r+0xee>
  403320:	0064      	lsls	r4, r4, #1
  403322:	421c      	tst	r4, r3
  403324:	f100 0004 	add.w	r0, r0, #4
  403328:	d0fa      	beq.n	403320 <_malloc_r+0x484>
  40332a:	e62e      	b.n	402f8a <_malloc_r+0xee>
  40332c:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  403330:	d818      	bhi.n	403364 <_malloc_r+0x4c8>
  403332:	0be8      	lsrs	r0, r5, #15
  403334:	f100 0e78 	add.w	lr, r0, #120	; 0x78
  403338:	ea4f 034e 	mov.w	r3, lr, lsl #1
  40333c:	3077      	adds	r0, #119	; 0x77
  40333e:	e5cf      	b.n	402ee0 <_malloc_r+0x44>
  403340:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  403344:	e6eb      	b.n	40311e <_malloc_r+0x282>
  403346:	2101      	movs	r1, #1
  403348:	f8d8 3004 	ldr.w	r3, [r8, #4]
  40334c:	1092      	asrs	r2, r2, #2
  40334e:	fa01 f202 	lsl.w	r2, r1, r2
  403352:	431a      	orrs	r2, r3
  403354:	f8c8 2004 	str.w	r2, [r8, #4]
  403358:	4661      	mov	r1, ip
  40335a:	e777      	b.n	40324c <_malloc_r+0x3b0>
  40335c:	2301      	movs	r3, #1
  40335e:	f8cb 3004 	str.w	r3, [fp, #4]
  403362:	e725      	b.n	4031b0 <_malloc_r+0x314>
  403364:	f240 5254 	movw	r2, #1364	; 0x554
  403368:	4293      	cmp	r3, r2
  40336a:	d820      	bhi.n	4033ae <_malloc_r+0x512>
  40336c:	0ca8      	lsrs	r0, r5, #18
  40336e:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
  403372:	ea4f 034e 	mov.w	r3, lr, lsl #1
  403376:	307c      	adds	r0, #124	; 0x7c
  403378:	e5b2      	b.n	402ee0 <_malloc_r+0x44>
  40337a:	3210      	adds	r2, #16
  40337c:	e6a4      	b.n	4030c8 <_malloc_r+0x22c>
  40337e:	2a54      	cmp	r2, #84	; 0x54
  403380:	d826      	bhi.n	4033d0 <_malloc_r+0x534>
  403382:	0b1a      	lsrs	r2, r3, #12
  403384:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  403388:	0049      	lsls	r1, r1, #1
  40338a:	326e      	adds	r2, #110	; 0x6e
  40338c:	e748      	b.n	403220 <_malloc_r+0x384>
  40338e:	68bc      	ldr	r4, [r7, #8]
  403390:	6862      	ldr	r2, [r4, #4]
  403392:	f022 0203 	bic.w	r2, r2, #3
  403396:	e705      	b.n	4031a4 <_malloc_r+0x308>
  403398:	f3ca 000b 	ubfx	r0, sl, #0, #12
  40339c:	2800      	cmp	r0, #0
  40339e:	f47f aea8 	bne.w	4030f2 <_malloc_r+0x256>
  4033a2:	4442      	add	r2, r8
  4033a4:	68bb      	ldr	r3, [r7, #8]
  4033a6:	f042 0201 	orr.w	r2, r2, #1
  4033aa:	605a      	str	r2, [r3, #4]
  4033ac:	e6ec      	b.n	403188 <_malloc_r+0x2ec>
  4033ae:	23fe      	movs	r3, #254	; 0xfe
  4033b0:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
  4033b4:	207e      	movs	r0, #126	; 0x7e
  4033b6:	e593      	b.n	402ee0 <_malloc_r+0x44>
  4033b8:	2201      	movs	r2, #1
  4033ba:	f04f 0900 	mov.w	r9, #0
  4033be:	e6c1      	b.n	403144 <_malloc_r+0x2a8>
  4033c0:	f104 0108 	add.w	r1, r4, #8
  4033c4:	4630      	mov	r0, r6
  4033c6:	f7ff fa4f 	bl	402868 <_free_r>
  4033ca:	f8d9 1000 	ldr.w	r1, [r9]
  4033ce:	e6db      	b.n	403188 <_malloc_r+0x2ec>
  4033d0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4033d4:	d805      	bhi.n	4033e2 <_malloc_r+0x546>
  4033d6:	0bda      	lsrs	r2, r3, #15
  4033d8:	f102 0178 	add.w	r1, r2, #120	; 0x78
  4033dc:	0049      	lsls	r1, r1, #1
  4033de:	3277      	adds	r2, #119	; 0x77
  4033e0:	e71e      	b.n	403220 <_malloc_r+0x384>
  4033e2:	f240 5154 	movw	r1, #1364	; 0x554
  4033e6:	428a      	cmp	r2, r1
  4033e8:	d805      	bhi.n	4033f6 <_malloc_r+0x55a>
  4033ea:	0c9a      	lsrs	r2, r3, #18
  4033ec:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  4033f0:	0049      	lsls	r1, r1, #1
  4033f2:	327c      	adds	r2, #124	; 0x7c
  4033f4:	e714      	b.n	403220 <_malloc_r+0x384>
  4033f6:	21fe      	movs	r1, #254	; 0xfe
  4033f8:	227e      	movs	r2, #126	; 0x7e
  4033fa:	e711      	b.n	403220 <_malloc_r+0x384>
  4033fc:	687b      	ldr	r3, [r7, #4]
  4033fe:	e784      	b.n	40330a <_malloc_r+0x46e>
  403400:	08e8      	lsrs	r0, r5, #3
  403402:	1c43      	adds	r3, r0, #1
  403404:	005b      	lsls	r3, r3, #1
  403406:	e5f8      	b.n	402ffa <_malloc_r+0x15e>
  403408:	20400458 	.word	0x20400458
  40340c:	00000000 	.word	0x00000000

00403410 <memchr>:
  403410:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  403414:	2a10      	cmp	r2, #16
  403416:	db2b      	blt.n	403470 <memchr+0x60>
  403418:	f010 0f07 	tst.w	r0, #7
  40341c:	d008      	beq.n	403430 <memchr+0x20>
  40341e:	f810 3b01 	ldrb.w	r3, [r0], #1
  403422:	3a01      	subs	r2, #1
  403424:	428b      	cmp	r3, r1
  403426:	d02d      	beq.n	403484 <memchr+0x74>
  403428:	f010 0f07 	tst.w	r0, #7
  40342c:	b342      	cbz	r2, 403480 <memchr+0x70>
  40342e:	d1f6      	bne.n	40341e <memchr+0xe>
  403430:	b4f0      	push	{r4, r5, r6, r7}
  403432:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  403436:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40343a:	f022 0407 	bic.w	r4, r2, #7
  40343e:	f07f 0700 	mvns.w	r7, #0
  403442:	2300      	movs	r3, #0
  403444:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  403448:	3c08      	subs	r4, #8
  40344a:	ea85 0501 	eor.w	r5, r5, r1
  40344e:	ea86 0601 	eor.w	r6, r6, r1
  403452:	fa85 f547 	uadd8	r5, r5, r7
  403456:	faa3 f587 	sel	r5, r3, r7
  40345a:	fa86 f647 	uadd8	r6, r6, r7
  40345e:	faa5 f687 	sel	r6, r5, r7
  403462:	b98e      	cbnz	r6, 403488 <memchr+0x78>
  403464:	d1ee      	bne.n	403444 <memchr+0x34>
  403466:	bcf0      	pop	{r4, r5, r6, r7}
  403468:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40346c:	f002 0207 	and.w	r2, r2, #7
  403470:	b132      	cbz	r2, 403480 <memchr+0x70>
  403472:	f810 3b01 	ldrb.w	r3, [r0], #1
  403476:	3a01      	subs	r2, #1
  403478:	ea83 0301 	eor.w	r3, r3, r1
  40347c:	b113      	cbz	r3, 403484 <memchr+0x74>
  40347e:	d1f8      	bne.n	403472 <memchr+0x62>
  403480:	2000      	movs	r0, #0
  403482:	4770      	bx	lr
  403484:	3801      	subs	r0, #1
  403486:	4770      	bx	lr
  403488:	2d00      	cmp	r5, #0
  40348a:	bf06      	itte	eq
  40348c:	4635      	moveq	r5, r6
  40348e:	3803      	subeq	r0, #3
  403490:	3807      	subne	r0, #7
  403492:	f015 0f01 	tst.w	r5, #1
  403496:	d107      	bne.n	4034a8 <memchr+0x98>
  403498:	3001      	adds	r0, #1
  40349a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40349e:	bf02      	ittt	eq
  4034a0:	3001      	addeq	r0, #1
  4034a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  4034a6:	3001      	addeq	r0, #1
  4034a8:	bcf0      	pop	{r4, r5, r6, r7}
  4034aa:	3801      	subs	r0, #1
  4034ac:	4770      	bx	lr
  4034ae:	bf00      	nop

004034b0 <memcpy>:
  4034b0:	4684      	mov	ip, r0
  4034b2:	ea41 0300 	orr.w	r3, r1, r0
  4034b6:	f013 0303 	ands.w	r3, r3, #3
  4034ba:	d16d      	bne.n	403598 <memcpy+0xe8>
  4034bc:	3a40      	subs	r2, #64	; 0x40
  4034be:	d341      	bcc.n	403544 <memcpy+0x94>
  4034c0:	f851 3b04 	ldr.w	r3, [r1], #4
  4034c4:	f840 3b04 	str.w	r3, [r0], #4
  4034c8:	f851 3b04 	ldr.w	r3, [r1], #4
  4034cc:	f840 3b04 	str.w	r3, [r0], #4
  4034d0:	f851 3b04 	ldr.w	r3, [r1], #4
  4034d4:	f840 3b04 	str.w	r3, [r0], #4
  4034d8:	f851 3b04 	ldr.w	r3, [r1], #4
  4034dc:	f840 3b04 	str.w	r3, [r0], #4
  4034e0:	f851 3b04 	ldr.w	r3, [r1], #4
  4034e4:	f840 3b04 	str.w	r3, [r0], #4
  4034e8:	f851 3b04 	ldr.w	r3, [r1], #4
  4034ec:	f840 3b04 	str.w	r3, [r0], #4
  4034f0:	f851 3b04 	ldr.w	r3, [r1], #4
  4034f4:	f840 3b04 	str.w	r3, [r0], #4
  4034f8:	f851 3b04 	ldr.w	r3, [r1], #4
  4034fc:	f840 3b04 	str.w	r3, [r0], #4
  403500:	f851 3b04 	ldr.w	r3, [r1], #4
  403504:	f840 3b04 	str.w	r3, [r0], #4
  403508:	f851 3b04 	ldr.w	r3, [r1], #4
  40350c:	f840 3b04 	str.w	r3, [r0], #4
  403510:	f851 3b04 	ldr.w	r3, [r1], #4
  403514:	f840 3b04 	str.w	r3, [r0], #4
  403518:	f851 3b04 	ldr.w	r3, [r1], #4
  40351c:	f840 3b04 	str.w	r3, [r0], #4
  403520:	f851 3b04 	ldr.w	r3, [r1], #4
  403524:	f840 3b04 	str.w	r3, [r0], #4
  403528:	f851 3b04 	ldr.w	r3, [r1], #4
  40352c:	f840 3b04 	str.w	r3, [r0], #4
  403530:	f851 3b04 	ldr.w	r3, [r1], #4
  403534:	f840 3b04 	str.w	r3, [r0], #4
  403538:	f851 3b04 	ldr.w	r3, [r1], #4
  40353c:	f840 3b04 	str.w	r3, [r0], #4
  403540:	3a40      	subs	r2, #64	; 0x40
  403542:	d2bd      	bcs.n	4034c0 <memcpy+0x10>
  403544:	3230      	adds	r2, #48	; 0x30
  403546:	d311      	bcc.n	40356c <memcpy+0xbc>
  403548:	f851 3b04 	ldr.w	r3, [r1], #4
  40354c:	f840 3b04 	str.w	r3, [r0], #4
  403550:	f851 3b04 	ldr.w	r3, [r1], #4
  403554:	f840 3b04 	str.w	r3, [r0], #4
  403558:	f851 3b04 	ldr.w	r3, [r1], #4
  40355c:	f840 3b04 	str.w	r3, [r0], #4
  403560:	f851 3b04 	ldr.w	r3, [r1], #4
  403564:	f840 3b04 	str.w	r3, [r0], #4
  403568:	3a10      	subs	r2, #16
  40356a:	d2ed      	bcs.n	403548 <memcpy+0x98>
  40356c:	320c      	adds	r2, #12
  40356e:	d305      	bcc.n	40357c <memcpy+0xcc>
  403570:	f851 3b04 	ldr.w	r3, [r1], #4
  403574:	f840 3b04 	str.w	r3, [r0], #4
  403578:	3a04      	subs	r2, #4
  40357a:	d2f9      	bcs.n	403570 <memcpy+0xc0>
  40357c:	3204      	adds	r2, #4
  40357e:	d008      	beq.n	403592 <memcpy+0xe2>
  403580:	07d2      	lsls	r2, r2, #31
  403582:	bf1c      	itt	ne
  403584:	f811 3b01 	ldrbne.w	r3, [r1], #1
  403588:	f800 3b01 	strbne.w	r3, [r0], #1
  40358c:	d301      	bcc.n	403592 <memcpy+0xe2>
  40358e:	880b      	ldrh	r3, [r1, #0]
  403590:	8003      	strh	r3, [r0, #0]
  403592:	4660      	mov	r0, ip
  403594:	4770      	bx	lr
  403596:	bf00      	nop
  403598:	2a08      	cmp	r2, #8
  40359a:	d313      	bcc.n	4035c4 <memcpy+0x114>
  40359c:	078b      	lsls	r3, r1, #30
  40359e:	d08d      	beq.n	4034bc <memcpy+0xc>
  4035a0:	f010 0303 	ands.w	r3, r0, #3
  4035a4:	d08a      	beq.n	4034bc <memcpy+0xc>
  4035a6:	f1c3 0304 	rsb	r3, r3, #4
  4035aa:	1ad2      	subs	r2, r2, r3
  4035ac:	07db      	lsls	r3, r3, #31
  4035ae:	bf1c      	itt	ne
  4035b0:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4035b4:	f800 3b01 	strbne.w	r3, [r0], #1
  4035b8:	d380      	bcc.n	4034bc <memcpy+0xc>
  4035ba:	f831 3b02 	ldrh.w	r3, [r1], #2
  4035be:	f820 3b02 	strh.w	r3, [r0], #2
  4035c2:	e77b      	b.n	4034bc <memcpy+0xc>
  4035c4:	3a04      	subs	r2, #4
  4035c6:	d3d9      	bcc.n	40357c <memcpy+0xcc>
  4035c8:	3a01      	subs	r2, #1
  4035ca:	f811 3b01 	ldrb.w	r3, [r1], #1
  4035ce:	f800 3b01 	strb.w	r3, [r0], #1
  4035d2:	d2f9      	bcs.n	4035c8 <memcpy+0x118>
  4035d4:	780b      	ldrb	r3, [r1, #0]
  4035d6:	7003      	strb	r3, [r0, #0]
  4035d8:	784b      	ldrb	r3, [r1, #1]
  4035da:	7043      	strb	r3, [r0, #1]
  4035dc:	788b      	ldrb	r3, [r1, #2]
  4035de:	7083      	strb	r3, [r0, #2]
  4035e0:	4660      	mov	r0, ip
  4035e2:	4770      	bx	lr

004035e4 <memmove>:
  4035e4:	4288      	cmp	r0, r1
  4035e6:	b5f0      	push	{r4, r5, r6, r7, lr}
  4035e8:	d90d      	bls.n	403606 <memmove+0x22>
  4035ea:	188b      	adds	r3, r1, r2
  4035ec:	4298      	cmp	r0, r3
  4035ee:	d20a      	bcs.n	403606 <memmove+0x22>
  4035f0:	1881      	adds	r1, r0, r2
  4035f2:	2a00      	cmp	r2, #0
  4035f4:	d051      	beq.n	40369a <memmove+0xb6>
  4035f6:	1a9a      	subs	r2, r3, r2
  4035f8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  4035fc:	f801 4d01 	strb.w	r4, [r1, #-1]!
  403600:	4293      	cmp	r3, r2
  403602:	d1f9      	bne.n	4035f8 <memmove+0x14>
  403604:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403606:	2a0f      	cmp	r2, #15
  403608:	d948      	bls.n	40369c <memmove+0xb8>
  40360a:	ea41 0300 	orr.w	r3, r1, r0
  40360e:	079b      	lsls	r3, r3, #30
  403610:	d146      	bne.n	4036a0 <memmove+0xbc>
  403612:	f100 0410 	add.w	r4, r0, #16
  403616:	f101 0310 	add.w	r3, r1, #16
  40361a:	4615      	mov	r5, r2
  40361c:	f853 6c10 	ldr.w	r6, [r3, #-16]
  403620:	f844 6c10 	str.w	r6, [r4, #-16]
  403624:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  403628:	f844 6c0c 	str.w	r6, [r4, #-12]
  40362c:	f853 6c08 	ldr.w	r6, [r3, #-8]
  403630:	f844 6c08 	str.w	r6, [r4, #-8]
  403634:	3d10      	subs	r5, #16
  403636:	f853 6c04 	ldr.w	r6, [r3, #-4]
  40363a:	f844 6c04 	str.w	r6, [r4, #-4]
  40363e:	2d0f      	cmp	r5, #15
  403640:	f103 0310 	add.w	r3, r3, #16
  403644:	f104 0410 	add.w	r4, r4, #16
  403648:	d8e8      	bhi.n	40361c <memmove+0x38>
  40364a:	f1a2 0310 	sub.w	r3, r2, #16
  40364e:	f023 030f 	bic.w	r3, r3, #15
  403652:	f002 0e0f 	and.w	lr, r2, #15
  403656:	3310      	adds	r3, #16
  403658:	f1be 0f03 	cmp.w	lr, #3
  40365c:	4419      	add	r1, r3
  40365e:	4403      	add	r3, r0
  403660:	d921      	bls.n	4036a6 <memmove+0xc2>
  403662:	1f1e      	subs	r6, r3, #4
  403664:	460d      	mov	r5, r1
  403666:	4674      	mov	r4, lr
  403668:	3c04      	subs	r4, #4
  40366a:	f855 7b04 	ldr.w	r7, [r5], #4
  40366e:	f846 7f04 	str.w	r7, [r6, #4]!
  403672:	2c03      	cmp	r4, #3
  403674:	d8f8      	bhi.n	403668 <memmove+0x84>
  403676:	f1ae 0404 	sub.w	r4, lr, #4
  40367a:	f024 0403 	bic.w	r4, r4, #3
  40367e:	3404      	adds	r4, #4
  403680:	4423      	add	r3, r4
  403682:	4421      	add	r1, r4
  403684:	f002 0203 	and.w	r2, r2, #3
  403688:	b162      	cbz	r2, 4036a4 <memmove+0xc0>
  40368a:	3b01      	subs	r3, #1
  40368c:	440a      	add	r2, r1
  40368e:	f811 4b01 	ldrb.w	r4, [r1], #1
  403692:	f803 4f01 	strb.w	r4, [r3, #1]!
  403696:	428a      	cmp	r2, r1
  403698:	d1f9      	bne.n	40368e <memmove+0xaa>
  40369a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40369c:	4603      	mov	r3, r0
  40369e:	e7f3      	b.n	403688 <memmove+0xa4>
  4036a0:	4603      	mov	r3, r0
  4036a2:	e7f2      	b.n	40368a <memmove+0xa6>
  4036a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4036a6:	4672      	mov	r2, lr
  4036a8:	e7ee      	b.n	403688 <memmove+0xa4>
  4036aa:	bf00      	nop

004036ac <__malloc_lock>:
  4036ac:	4770      	bx	lr
  4036ae:	bf00      	nop

004036b0 <__malloc_unlock>:
  4036b0:	4770      	bx	lr
  4036b2:	bf00      	nop

004036b4 <_realloc_r>:
  4036b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4036b8:	4617      	mov	r7, r2
  4036ba:	b083      	sub	sp, #12
  4036bc:	2900      	cmp	r1, #0
  4036be:	f000 80c1 	beq.w	403844 <_realloc_r+0x190>
  4036c2:	460e      	mov	r6, r1
  4036c4:	4681      	mov	r9, r0
  4036c6:	f107 050b 	add.w	r5, r7, #11
  4036ca:	f7ff ffef 	bl	4036ac <__malloc_lock>
  4036ce:	f856 ec04 	ldr.w	lr, [r6, #-4]
  4036d2:	2d16      	cmp	r5, #22
  4036d4:	f02e 0403 	bic.w	r4, lr, #3
  4036d8:	f1a6 0808 	sub.w	r8, r6, #8
  4036dc:	d840      	bhi.n	403760 <_realloc_r+0xac>
  4036de:	2210      	movs	r2, #16
  4036e0:	4615      	mov	r5, r2
  4036e2:	42af      	cmp	r7, r5
  4036e4:	d841      	bhi.n	40376a <_realloc_r+0xb6>
  4036e6:	4294      	cmp	r4, r2
  4036e8:	da75      	bge.n	4037d6 <_realloc_r+0x122>
  4036ea:	4bc9      	ldr	r3, [pc, #804]	; (403a10 <_realloc_r+0x35c>)
  4036ec:	6899      	ldr	r1, [r3, #8]
  4036ee:	eb08 0004 	add.w	r0, r8, r4
  4036f2:	4288      	cmp	r0, r1
  4036f4:	6841      	ldr	r1, [r0, #4]
  4036f6:	f000 80d9 	beq.w	4038ac <_realloc_r+0x1f8>
  4036fa:	f021 0301 	bic.w	r3, r1, #1
  4036fe:	4403      	add	r3, r0
  403700:	685b      	ldr	r3, [r3, #4]
  403702:	07db      	lsls	r3, r3, #31
  403704:	d57d      	bpl.n	403802 <_realloc_r+0x14e>
  403706:	f01e 0f01 	tst.w	lr, #1
  40370a:	d035      	beq.n	403778 <_realloc_r+0xc4>
  40370c:	4639      	mov	r1, r7
  40370e:	4648      	mov	r0, r9
  403710:	f7ff fbc4 	bl	402e9c <_malloc_r>
  403714:	4607      	mov	r7, r0
  403716:	b1e0      	cbz	r0, 403752 <_realloc_r+0x9e>
  403718:	f856 3c04 	ldr.w	r3, [r6, #-4]
  40371c:	f023 0301 	bic.w	r3, r3, #1
  403720:	4443      	add	r3, r8
  403722:	f1a0 0208 	sub.w	r2, r0, #8
  403726:	429a      	cmp	r2, r3
  403728:	f000 8144 	beq.w	4039b4 <_realloc_r+0x300>
  40372c:	1f22      	subs	r2, r4, #4
  40372e:	2a24      	cmp	r2, #36	; 0x24
  403730:	f200 8131 	bhi.w	403996 <_realloc_r+0x2e2>
  403734:	2a13      	cmp	r2, #19
  403736:	f200 8104 	bhi.w	403942 <_realloc_r+0x28e>
  40373a:	4603      	mov	r3, r0
  40373c:	4632      	mov	r2, r6
  40373e:	6811      	ldr	r1, [r2, #0]
  403740:	6019      	str	r1, [r3, #0]
  403742:	6851      	ldr	r1, [r2, #4]
  403744:	6059      	str	r1, [r3, #4]
  403746:	6892      	ldr	r2, [r2, #8]
  403748:	609a      	str	r2, [r3, #8]
  40374a:	4631      	mov	r1, r6
  40374c:	4648      	mov	r0, r9
  40374e:	f7ff f88b 	bl	402868 <_free_r>
  403752:	4648      	mov	r0, r9
  403754:	f7ff ffac 	bl	4036b0 <__malloc_unlock>
  403758:	4638      	mov	r0, r7
  40375a:	b003      	add	sp, #12
  40375c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403760:	f025 0507 	bic.w	r5, r5, #7
  403764:	2d00      	cmp	r5, #0
  403766:	462a      	mov	r2, r5
  403768:	dabb      	bge.n	4036e2 <_realloc_r+0x2e>
  40376a:	230c      	movs	r3, #12
  40376c:	2000      	movs	r0, #0
  40376e:	f8c9 3000 	str.w	r3, [r9]
  403772:	b003      	add	sp, #12
  403774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403778:	f856 3c08 	ldr.w	r3, [r6, #-8]
  40377c:	ebc3 0a08 	rsb	sl, r3, r8
  403780:	f8da 3004 	ldr.w	r3, [sl, #4]
  403784:	f023 0c03 	bic.w	ip, r3, #3
  403788:	eb04 030c 	add.w	r3, r4, ip
  40378c:	4293      	cmp	r3, r2
  40378e:	dbbd      	blt.n	40370c <_realloc_r+0x58>
  403790:	4657      	mov	r7, sl
  403792:	f8da 100c 	ldr.w	r1, [sl, #12]
  403796:	f857 0f08 	ldr.w	r0, [r7, #8]!
  40379a:	1f22      	subs	r2, r4, #4
  40379c:	2a24      	cmp	r2, #36	; 0x24
  40379e:	60c1      	str	r1, [r0, #12]
  4037a0:	6088      	str	r0, [r1, #8]
  4037a2:	f200 8117 	bhi.w	4039d4 <_realloc_r+0x320>
  4037a6:	2a13      	cmp	r2, #19
  4037a8:	f240 8112 	bls.w	4039d0 <_realloc_r+0x31c>
  4037ac:	6831      	ldr	r1, [r6, #0]
  4037ae:	f8ca 1008 	str.w	r1, [sl, #8]
  4037b2:	6871      	ldr	r1, [r6, #4]
  4037b4:	f8ca 100c 	str.w	r1, [sl, #12]
  4037b8:	2a1b      	cmp	r2, #27
  4037ba:	f200 812b 	bhi.w	403a14 <_realloc_r+0x360>
  4037be:	3608      	adds	r6, #8
  4037c0:	f10a 0210 	add.w	r2, sl, #16
  4037c4:	6831      	ldr	r1, [r6, #0]
  4037c6:	6011      	str	r1, [r2, #0]
  4037c8:	6871      	ldr	r1, [r6, #4]
  4037ca:	6051      	str	r1, [r2, #4]
  4037cc:	68b1      	ldr	r1, [r6, #8]
  4037ce:	6091      	str	r1, [r2, #8]
  4037d0:	463e      	mov	r6, r7
  4037d2:	461c      	mov	r4, r3
  4037d4:	46d0      	mov	r8, sl
  4037d6:	1b63      	subs	r3, r4, r5
  4037d8:	2b0f      	cmp	r3, #15
  4037da:	d81d      	bhi.n	403818 <_realloc_r+0x164>
  4037dc:	f8d8 3004 	ldr.w	r3, [r8, #4]
  4037e0:	f003 0301 	and.w	r3, r3, #1
  4037e4:	4323      	orrs	r3, r4
  4037e6:	4444      	add	r4, r8
  4037e8:	f8c8 3004 	str.w	r3, [r8, #4]
  4037ec:	6863      	ldr	r3, [r4, #4]
  4037ee:	f043 0301 	orr.w	r3, r3, #1
  4037f2:	6063      	str	r3, [r4, #4]
  4037f4:	4648      	mov	r0, r9
  4037f6:	f7ff ff5b 	bl	4036b0 <__malloc_unlock>
  4037fa:	4630      	mov	r0, r6
  4037fc:	b003      	add	sp, #12
  4037fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403802:	f021 0103 	bic.w	r1, r1, #3
  403806:	4421      	add	r1, r4
  403808:	4291      	cmp	r1, r2
  40380a:	db21      	blt.n	403850 <_realloc_r+0x19c>
  40380c:	68c3      	ldr	r3, [r0, #12]
  40380e:	6882      	ldr	r2, [r0, #8]
  403810:	460c      	mov	r4, r1
  403812:	60d3      	str	r3, [r2, #12]
  403814:	609a      	str	r2, [r3, #8]
  403816:	e7de      	b.n	4037d6 <_realloc_r+0x122>
  403818:	f8d8 2004 	ldr.w	r2, [r8, #4]
  40381c:	eb08 0105 	add.w	r1, r8, r5
  403820:	f002 0201 	and.w	r2, r2, #1
  403824:	4315      	orrs	r5, r2
  403826:	f043 0201 	orr.w	r2, r3, #1
  40382a:	440b      	add	r3, r1
  40382c:	f8c8 5004 	str.w	r5, [r8, #4]
  403830:	604a      	str	r2, [r1, #4]
  403832:	685a      	ldr	r2, [r3, #4]
  403834:	f042 0201 	orr.w	r2, r2, #1
  403838:	3108      	adds	r1, #8
  40383a:	605a      	str	r2, [r3, #4]
  40383c:	4648      	mov	r0, r9
  40383e:	f7ff f813 	bl	402868 <_free_r>
  403842:	e7d7      	b.n	4037f4 <_realloc_r+0x140>
  403844:	4611      	mov	r1, r2
  403846:	b003      	add	sp, #12
  403848:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40384c:	f7ff bb26 	b.w	402e9c <_malloc_r>
  403850:	f01e 0f01 	tst.w	lr, #1
  403854:	f47f af5a 	bne.w	40370c <_realloc_r+0x58>
  403858:	f856 3c08 	ldr.w	r3, [r6, #-8]
  40385c:	ebc3 0a08 	rsb	sl, r3, r8
  403860:	f8da 3004 	ldr.w	r3, [sl, #4]
  403864:	f023 0c03 	bic.w	ip, r3, #3
  403868:	eb01 0e0c 	add.w	lr, r1, ip
  40386c:	4596      	cmp	lr, r2
  40386e:	db8b      	blt.n	403788 <_realloc_r+0xd4>
  403870:	68c3      	ldr	r3, [r0, #12]
  403872:	6882      	ldr	r2, [r0, #8]
  403874:	4657      	mov	r7, sl
  403876:	60d3      	str	r3, [r2, #12]
  403878:	609a      	str	r2, [r3, #8]
  40387a:	f857 1f08 	ldr.w	r1, [r7, #8]!
  40387e:	f8da 300c 	ldr.w	r3, [sl, #12]
  403882:	60cb      	str	r3, [r1, #12]
  403884:	1f22      	subs	r2, r4, #4
  403886:	2a24      	cmp	r2, #36	; 0x24
  403888:	6099      	str	r1, [r3, #8]
  40388a:	f200 8099 	bhi.w	4039c0 <_realloc_r+0x30c>
  40388e:	2a13      	cmp	r2, #19
  403890:	d962      	bls.n	403958 <_realloc_r+0x2a4>
  403892:	6833      	ldr	r3, [r6, #0]
  403894:	f8ca 3008 	str.w	r3, [sl, #8]
  403898:	6873      	ldr	r3, [r6, #4]
  40389a:	f8ca 300c 	str.w	r3, [sl, #12]
  40389e:	2a1b      	cmp	r2, #27
  4038a0:	f200 80a0 	bhi.w	4039e4 <_realloc_r+0x330>
  4038a4:	3608      	adds	r6, #8
  4038a6:	f10a 0310 	add.w	r3, sl, #16
  4038aa:	e056      	b.n	40395a <_realloc_r+0x2a6>
  4038ac:	f021 0b03 	bic.w	fp, r1, #3
  4038b0:	44a3      	add	fp, r4
  4038b2:	f105 0010 	add.w	r0, r5, #16
  4038b6:	4583      	cmp	fp, r0
  4038b8:	da59      	bge.n	40396e <_realloc_r+0x2ba>
  4038ba:	f01e 0f01 	tst.w	lr, #1
  4038be:	f47f af25 	bne.w	40370c <_realloc_r+0x58>
  4038c2:	f856 1c08 	ldr.w	r1, [r6, #-8]
  4038c6:	ebc1 0a08 	rsb	sl, r1, r8
  4038ca:	f8da 1004 	ldr.w	r1, [sl, #4]
  4038ce:	f021 0c03 	bic.w	ip, r1, #3
  4038d2:	44e3      	add	fp, ip
  4038d4:	4558      	cmp	r0, fp
  4038d6:	f73f af57 	bgt.w	403788 <_realloc_r+0xd4>
  4038da:	4657      	mov	r7, sl
  4038dc:	f8da 100c 	ldr.w	r1, [sl, #12]
  4038e0:	f857 0f08 	ldr.w	r0, [r7, #8]!
  4038e4:	1f22      	subs	r2, r4, #4
  4038e6:	2a24      	cmp	r2, #36	; 0x24
  4038e8:	60c1      	str	r1, [r0, #12]
  4038ea:	6088      	str	r0, [r1, #8]
  4038ec:	f200 80b4 	bhi.w	403a58 <_realloc_r+0x3a4>
  4038f0:	2a13      	cmp	r2, #19
  4038f2:	f240 80a5 	bls.w	403a40 <_realloc_r+0x38c>
  4038f6:	6831      	ldr	r1, [r6, #0]
  4038f8:	f8ca 1008 	str.w	r1, [sl, #8]
  4038fc:	6871      	ldr	r1, [r6, #4]
  4038fe:	f8ca 100c 	str.w	r1, [sl, #12]
  403902:	2a1b      	cmp	r2, #27
  403904:	f200 80af 	bhi.w	403a66 <_realloc_r+0x3b2>
  403908:	3608      	adds	r6, #8
  40390a:	f10a 0210 	add.w	r2, sl, #16
  40390e:	6831      	ldr	r1, [r6, #0]
  403910:	6011      	str	r1, [r2, #0]
  403912:	6871      	ldr	r1, [r6, #4]
  403914:	6051      	str	r1, [r2, #4]
  403916:	68b1      	ldr	r1, [r6, #8]
  403918:	6091      	str	r1, [r2, #8]
  40391a:	eb0a 0105 	add.w	r1, sl, r5
  40391e:	ebc5 020b 	rsb	r2, r5, fp
  403922:	f042 0201 	orr.w	r2, r2, #1
  403926:	6099      	str	r1, [r3, #8]
  403928:	604a      	str	r2, [r1, #4]
  40392a:	f8da 3004 	ldr.w	r3, [sl, #4]
  40392e:	f003 0301 	and.w	r3, r3, #1
  403932:	431d      	orrs	r5, r3
  403934:	4648      	mov	r0, r9
  403936:	f8ca 5004 	str.w	r5, [sl, #4]
  40393a:	f7ff feb9 	bl	4036b0 <__malloc_unlock>
  40393e:	4638      	mov	r0, r7
  403940:	e75c      	b.n	4037fc <_realloc_r+0x148>
  403942:	6833      	ldr	r3, [r6, #0]
  403944:	6003      	str	r3, [r0, #0]
  403946:	6873      	ldr	r3, [r6, #4]
  403948:	6043      	str	r3, [r0, #4]
  40394a:	2a1b      	cmp	r2, #27
  40394c:	d827      	bhi.n	40399e <_realloc_r+0x2ea>
  40394e:	f100 0308 	add.w	r3, r0, #8
  403952:	f106 0208 	add.w	r2, r6, #8
  403956:	e6f2      	b.n	40373e <_realloc_r+0x8a>
  403958:	463b      	mov	r3, r7
  40395a:	6832      	ldr	r2, [r6, #0]
  40395c:	601a      	str	r2, [r3, #0]
  40395e:	6872      	ldr	r2, [r6, #4]
  403960:	605a      	str	r2, [r3, #4]
  403962:	68b2      	ldr	r2, [r6, #8]
  403964:	609a      	str	r2, [r3, #8]
  403966:	463e      	mov	r6, r7
  403968:	4674      	mov	r4, lr
  40396a:	46d0      	mov	r8, sl
  40396c:	e733      	b.n	4037d6 <_realloc_r+0x122>
  40396e:	eb08 0105 	add.w	r1, r8, r5
  403972:	ebc5 0b0b 	rsb	fp, r5, fp
  403976:	f04b 0201 	orr.w	r2, fp, #1
  40397a:	6099      	str	r1, [r3, #8]
  40397c:	604a      	str	r2, [r1, #4]
  40397e:	f856 3c04 	ldr.w	r3, [r6, #-4]
  403982:	f003 0301 	and.w	r3, r3, #1
  403986:	431d      	orrs	r5, r3
  403988:	4648      	mov	r0, r9
  40398a:	f846 5c04 	str.w	r5, [r6, #-4]
  40398e:	f7ff fe8f 	bl	4036b0 <__malloc_unlock>
  403992:	4630      	mov	r0, r6
  403994:	e732      	b.n	4037fc <_realloc_r+0x148>
  403996:	4631      	mov	r1, r6
  403998:	f7ff fe24 	bl	4035e4 <memmove>
  40399c:	e6d5      	b.n	40374a <_realloc_r+0x96>
  40399e:	68b3      	ldr	r3, [r6, #8]
  4039a0:	6083      	str	r3, [r0, #8]
  4039a2:	68f3      	ldr	r3, [r6, #12]
  4039a4:	60c3      	str	r3, [r0, #12]
  4039a6:	2a24      	cmp	r2, #36	; 0x24
  4039a8:	d028      	beq.n	4039fc <_realloc_r+0x348>
  4039aa:	f100 0310 	add.w	r3, r0, #16
  4039ae:	f106 0210 	add.w	r2, r6, #16
  4039b2:	e6c4      	b.n	40373e <_realloc_r+0x8a>
  4039b4:	f850 3c04 	ldr.w	r3, [r0, #-4]
  4039b8:	f023 0303 	bic.w	r3, r3, #3
  4039bc:	441c      	add	r4, r3
  4039be:	e70a      	b.n	4037d6 <_realloc_r+0x122>
  4039c0:	4631      	mov	r1, r6
  4039c2:	4638      	mov	r0, r7
  4039c4:	4674      	mov	r4, lr
  4039c6:	46d0      	mov	r8, sl
  4039c8:	f7ff fe0c 	bl	4035e4 <memmove>
  4039cc:	463e      	mov	r6, r7
  4039ce:	e702      	b.n	4037d6 <_realloc_r+0x122>
  4039d0:	463a      	mov	r2, r7
  4039d2:	e6f7      	b.n	4037c4 <_realloc_r+0x110>
  4039d4:	4631      	mov	r1, r6
  4039d6:	4638      	mov	r0, r7
  4039d8:	461c      	mov	r4, r3
  4039da:	46d0      	mov	r8, sl
  4039dc:	f7ff fe02 	bl	4035e4 <memmove>
  4039e0:	463e      	mov	r6, r7
  4039e2:	e6f8      	b.n	4037d6 <_realloc_r+0x122>
  4039e4:	68b3      	ldr	r3, [r6, #8]
  4039e6:	f8ca 3010 	str.w	r3, [sl, #16]
  4039ea:	68f3      	ldr	r3, [r6, #12]
  4039ec:	f8ca 3014 	str.w	r3, [sl, #20]
  4039f0:	2a24      	cmp	r2, #36	; 0x24
  4039f2:	d01b      	beq.n	403a2c <_realloc_r+0x378>
  4039f4:	3610      	adds	r6, #16
  4039f6:	f10a 0318 	add.w	r3, sl, #24
  4039fa:	e7ae      	b.n	40395a <_realloc_r+0x2a6>
  4039fc:	6933      	ldr	r3, [r6, #16]
  4039fe:	6103      	str	r3, [r0, #16]
  403a00:	6973      	ldr	r3, [r6, #20]
  403a02:	6143      	str	r3, [r0, #20]
  403a04:	f106 0218 	add.w	r2, r6, #24
  403a08:	f100 0318 	add.w	r3, r0, #24
  403a0c:	e697      	b.n	40373e <_realloc_r+0x8a>
  403a0e:	bf00      	nop
  403a10:	20400458 	.word	0x20400458
  403a14:	68b1      	ldr	r1, [r6, #8]
  403a16:	f8ca 1010 	str.w	r1, [sl, #16]
  403a1a:	68f1      	ldr	r1, [r6, #12]
  403a1c:	f8ca 1014 	str.w	r1, [sl, #20]
  403a20:	2a24      	cmp	r2, #36	; 0x24
  403a22:	d00f      	beq.n	403a44 <_realloc_r+0x390>
  403a24:	3610      	adds	r6, #16
  403a26:	f10a 0218 	add.w	r2, sl, #24
  403a2a:	e6cb      	b.n	4037c4 <_realloc_r+0x110>
  403a2c:	6933      	ldr	r3, [r6, #16]
  403a2e:	f8ca 3018 	str.w	r3, [sl, #24]
  403a32:	6973      	ldr	r3, [r6, #20]
  403a34:	f8ca 301c 	str.w	r3, [sl, #28]
  403a38:	3618      	adds	r6, #24
  403a3a:	f10a 0320 	add.w	r3, sl, #32
  403a3e:	e78c      	b.n	40395a <_realloc_r+0x2a6>
  403a40:	463a      	mov	r2, r7
  403a42:	e764      	b.n	40390e <_realloc_r+0x25a>
  403a44:	6932      	ldr	r2, [r6, #16]
  403a46:	f8ca 2018 	str.w	r2, [sl, #24]
  403a4a:	6972      	ldr	r2, [r6, #20]
  403a4c:	f8ca 201c 	str.w	r2, [sl, #28]
  403a50:	3618      	adds	r6, #24
  403a52:	f10a 0220 	add.w	r2, sl, #32
  403a56:	e6b5      	b.n	4037c4 <_realloc_r+0x110>
  403a58:	4631      	mov	r1, r6
  403a5a:	4638      	mov	r0, r7
  403a5c:	9301      	str	r3, [sp, #4]
  403a5e:	f7ff fdc1 	bl	4035e4 <memmove>
  403a62:	9b01      	ldr	r3, [sp, #4]
  403a64:	e759      	b.n	40391a <_realloc_r+0x266>
  403a66:	68b1      	ldr	r1, [r6, #8]
  403a68:	f8ca 1010 	str.w	r1, [sl, #16]
  403a6c:	68f1      	ldr	r1, [r6, #12]
  403a6e:	f8ca 1014 	str.w	r1, [sl, #20]
  403a72:	2a24      	cmp	r2, #36	; 0x24
  403a74:	d003      	beq.n	403a7e <_realloc_r+0x3ca>
  403a76:	3610      	adds	r6, #16
  403a78:	f10a 0218 	add.w	r2, sl, #24
  403a7c:	e747      	b.n	40390e <_realloc_r+0x25a>
  403a7e:	6932      	ldr	r2, [r6, #16]
  403a80:	f8ca 2018 	str.w	r2, [sl, #24]
  403a84:	6972      	ldr	r2, [r6, #20]
  403a86:	f8ca 201c 	str.w	r2, [sl, #28]
  403a8a:	3618      	adds	r6, #24
  403a8c:	f10a 0220 	add.w	r2, sl, #32
  403a90:	e73d      	b.n	40390e <_realloc_r+0x25a>
  403a92:	bf00      	nop

00403a94 <_sbrk_r>:
  403a94:	b538      	push	{r3, r4, r5, lr}
  403a96:	4c07      	ldr	r4, [pc, #28]	; (403ab4 <_sbrk_r+0x20>)
  403a98:	2300      	movs	r3, #0
  403a9a:	4605      	mov	r5, r0
  403a9c:	4608      	mov	r0, r1
  403a9e:	6023      	str	r3, [r4, #0]
  403aa0:	f7fd fada 	bl	401058 <_sbrk>
  403aa4:	1c43      	adds	r3, r0, #1
  403aa6:	d000      	beq.n	403aaa <_sbrk_r+0x16>
  403aa8:	bd38      	pop	{r3, r4, r5, pc}
  403aaa:	6823      	ldr	r3, [r4, #0]
  403aac:	2b00      	cmp	r3, #0
  403aae:	d0fb      	beq.n	403aa8 <_sbrk_r+0x14>
  403ab0:	602b      	str	r3, [r5, #0]
  403ab2:	bd38      	pop	{r3, r4, r5, pc}
  403ab4:	204009d0 	.word	0x204009d0

00403ab8 <__sread>:
  403ab8:	b510      	push	{r4, lr}
  403aba:	460c      	mov	r4, r1
  403abc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403ac0:	f000 f9c4 	bl	403e4c <_read_r>
  403ac4:	2800      	cmp	r0, #0
  403ac6:	db03      	blt.n	403ad0 <__sread+0x18>
  403ac8:	6d23      	ldr	r3, [r4, #80]	; 0x50
  403aca:	4403      	add	r3, r0
  403acc:	6523      	str	r3, [r4, #80]	; 0x50
  403ace:	bd10      	pop	{r4, pc}
  403ad0:	89a3      	ldrh	r3, [r4, #12]
  403ad2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  403ad6:	81a3      	strh	r3, [r4, #12]
  403ad8:	bd10      	pop	{r4, pc}
  403ada:	bf00      	nop

00403adc <__swrite>:
  403adc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403ae0:	4616      	mov	r6, r2
  403ae2:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  403ae6:	461f      	mov	r7, r3
  403ae8:	05d3      	lsls	r3, r2, #23
  403aea:	460c      	mov	r4, r1
  403aec:	4605      	mov	r5, r0
  403aee:	d507      	bpl.n	403b00 <__swrite+0x24>
  403af0:	2200      	movs	r2, #0
  403af2:	2302      	movs	r3, #2
  403af4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403af8:	f000 f992 	bl	403e20 <_lseek_r>
  403afc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  403b00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  403b04:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  403b08:	81a2      	strh	r2, [r4, #12]
  403b0a:	463b      	mov	r3, r7
  403b0c:	4632      	mov	r2, r6
  403b0e:	4628      	mov	r0, r5
  403b10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  403b14:	f000 b8a2 	b.w	403c5c <_write_r>

00403b18 <__sseek>:
  403b18:	b510      	push	{r4, lr}
  403b1a:	460c      	mov	r4, r1
  403b1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403b20:	f000 f97e 	bl	403e20 <_lseek_r>
  403b24:	89a3      	ldrh	r3, [r4, #12]
  403b26:	1c42      	adds	r2, r0, #1
  403b28:	bf0e      	itee	eq
  403b2a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  403b2e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  403b32:	6520      	strne	r0, [r4, #80]	; 0x50
  403b34:	81a3      	strh	r3, [r4, #12]
  403b36:	bd10      	pop	{r4, pc}

00403b38 <__sclose>:
  403b38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403b3c:	f000 b8f6 	b.w	403d2c <_close_r>

00403b40 <__swbuf_r>:
  403b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403b42:	460e      	mov	r6, r1
  403b44:	4614      	mov	r4, r2
  403b46:	4607      	mov	r7, r0
  403b48:	b110      	cbz	r0, 403b50 <__swbuf_r+0x10>
  403b4a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  403b4c:	2b00      	cmp	r3, #0
  403b4e:	d04a      	beq.n	403be6 <__swbuf_r+0xa6>
  403b50:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  403b54:	69a3      	ldr	r3, [r4, #24]
  403b56:	60a3      	str	r3, [r4, #8]
  403b58:	b291      	uxth	r1, r2
  403b5a:	0708      	lsls	r0, r1, #28
  403b5c:	d538      	bpl.n	403bd0 <__swbuf_r+0x90>
  403b5e:	6923      	ldr	r3, [r4, #16]
  403b60:	2b00      	cmp	r3, #0
  403b62:	d035      	beq.n	403bd0 <__swbuf_r+0x90>
  403b64:	0489      	lsls	r1, r1, #18
  403b66:	b2f5      	uxtb	r5, r6
  403b68:	d515      	bpl.n	403b96 <__swbuf_r+0x56>
  403b6a:	6822      	ldr	r2, [r4, #0]
  403b6c:	6961      	ldr	r1, [r4, #20]
  403b6e:	1ad3      	subs	r3, r2, r3
  403b70:	428b      	cmp	r3, r1
  403b72:	da1c      	bge.n	403bae <__swbuf_r+0x6e>
  403b74:	3301      	adds	r3, #1
  403b76:	68a1      	ldr	r1, [r4, #8]
  403b78:	1c50      	adds	r0, r2, #1
  403b7a:	3901      	subs	r1, #1
  403b7c:	60a1      	str	r1, [r4, #8]
  403b7e:	6020      	str	r0, [r4, #0]
  403b80:	7016      	strb	r6, [r2, #0]
  403b82:	6962      	ldr	r2, [r4, #20]
  403b84:	429a      	cmp	r2, r3
  403b86:	d01a      	beq.n	403bbe <__swbuf_r+0x7e>
  403b88:	89a3      	ldrh	r3, [r4, #12]
  403b8a:	07db      	lsls	r3, r3, #31
  403b8c:	d501      	bpl.n	403b92 <__swbuf_r+0x52>
  403b8e:	2d0a      	cmp	r5, #10
  403b90:	d015      	beq.n	403bbe <__swbuf_r+0x7e>
  403b92:	4628      	mov	r0, r5
  403b94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403b96:	6e61      	ldr	r1, [r4, #100]	; 0x64
  403b98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  403b9c:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  403ba0:	81a2      	strh	r2, [r4, #12]
  403ba2:	6822      	ldr	r2, [r4, #0]
  403ba4:	6661      	str	r1, [r4, #100]	; 0x64
  403ba6:	6961      	ldr	r1, [r4, #20]
  403ba8:	1ad3      	subs	r3, r2, r3
  403baa:	428b      	cmp	r3, r1
  403bac:	dbe2      	blt.n	403b74 <__swbuf_r+0x34>
  403bae:	4621      	mov	r1, r4
  403bb0:	4638      	mov	r0, r7
  403bb2:	f7fe fcfb 	bl	4025ac <_fflush_r>
  403bb6:	b940      	cbnz	r0, 403bca <__swbuf_r+0x8a>
  403bb8:	6822      	ldr	r2, [r4, #0]
  403bba:	2301      	movs	r3, #1
  403bbc:	e7db      	b.n	403b76 <__swbuf_r+0x36>
  403bbe:	4621      	mov	r1, r4
  403bc0:	4638      	mov	r0, r7
  403bc2:	f7fe fcf3 	bl	4025ac <_fflush_r>
  403bc6:	2800      	cmp	r0, #0
  403bc8:	d0e3      	beq.n	403b92 <__swbuf_r+0x52>
  403bca:	f04f 30ff 	mov.w	r0, #4294967295
  403bce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403bd0:	4621      	mov	r1, r4
  403bd2:	4638      	mov	r0, r7
  403bd4:	f7fe fbd2 	bl	40237c <__swsetup_r>
  403bd8:	2800      	cmp	r0, #0
  403bda:	d1f6      	bne.n	403bca <__swbuf_r+0x8a>
  403bdc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  403be0:	6923      	ldr	r3, [r4, #16]
  403be2:	b291      	uxth	r1, r2
  403be4:	e7be      	b.n	403b64 <__swbuf_r+0x24>
  403be6:	f7fe fd75 	bl	4026d4 <__sinit>
  403bea:	e7b1      	b.n	403b50 <__swbuf_r+0x10>

00403bec <_wcrtomb_r>:
  403bec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403bf0:	4605      	mov	r5, r0
  403bf2:	b086      	sub	sp, #24
  403bf4:	461e      	mov	r6, r3
  403bf6:	460c      	mov	r4, r1
  403bf8:	b1a1      	cbz	r1, 403c24 <_wcrtomb_r+0x38>
  403bfa:	4b10      	ldr	r3, [pc, #64]	; (403c3c <_wcrtomb_r+0x50>)
  403bfc:	4617      	mov	r7, r2
  403bfe:	f8d3 8000 	ldr.w	r8, [r3]
  403c02:	f7ff f8c5 	bl	402d90 <__locale_charset>
  403c06:	9600      	str	r6, [sp, #0]
  403c08:	4603      	mov	r3, r0
  403c0a:	463a      	mov	r2, r7
  403c0c:	4621      	mov	r1, r4
  403c0e:	4628      	mov	r0, r5
  403c10:	47c0      	blx	r8
  403c12:	1c43      	adds	r3, r0, #1
  403c14:	d103      	bne.n	403c1e <_wcrtomb_r+0x32>
  403c16:	2200      	movs	r2, #0
  403c18:	238a      	movs	r3, #138	; 0x8a
  403c1a:	6032      	str	r2, [r6, #0]
  403c1c:	602b      	str	r3, [r5, #0]
  403c1e:	b006      	add	sp, #24
  403c20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403c24:	4b05      	ldr	r3, [pc, #20]	; (403c3c <_wcrtomb_r+0x50>)
  403c26:	681f      	ldr	r7, [r3, #0]
  403c28:	f7ff f8b2 	bl	402d90 <__locale_charset>
  403c2c:	9600      	str	r6, [sp, #0]
  403c2e:	4603      	mov	r3, r0
  403c30:	4622      	mov	r2, r4
  403c32:	a903      	add	r1, sp, #12
  403c34:	4628      	mov	r0, r5
  403c36:	47b8      	blx	r7
  403c38:	e7eb      	b.n	403c12 <_wcrtomb_r+0x26>
  403c3a:	bf00      	nop
  403c3c:	20400868 	.word	0x20400868

00403c40 <__ascii_wctomb>:
  403c40:	b121      	cbz	r1, 403c4c <__ascii_wctomb+0xc>
  403c42:	2aff      	cmp	r2, #255	; 0xff
  403c44:	d804      	bhi.n	403c50 <__ascii_wctomb+0x10>
  403c46:	700a      	strb	r2, [r1, #0]
  403c48:	2001      	movs	r0, #1
  403c4a:	4770      	bx	lr
  403c4c:	4608      	mov	r0, r1
  403c4e:	4770      	bx	lr
  403c50:	238a      	movs	r3, #138	; 0x8a
  403c52:	6003      	str	r3, [r0, #0]
  403c54:	f04f 30ff 	mov.w	r0, #4294967295
  403c58:	4770      	bx	lr
  403c5a:	bf00      	nop

00403c5c <_write_r>:
  403c5c:	b570      	push	{r4, r5, r6, lr}
  403c5e:	460d      	mov	r5, r1
  403c60:	4c08      	ldr	r4, [pc, #32]	; (403c84 <_write_r+0x28>)
  403c62:	4611      	mov	r1, r2
  403c64:	4606      	mov	r6, r0
  403c66:	461a      	mov	r2, r3
  403c68:	4628      	mov	r0, r5
  403c6a:	2300      	movs	r3, #0
  403c6c:	6023      	str	r3, [r4, #0]
  403c6e:	f7fc fc9d 	bl	4005ac <_write>
  403c72:	1c43      	adds	r3, r0, #1
  403c74:	d000      	beq.n	403c78 <_write_r+0x1c>
  403c76:	bd70      	pop	{r4, r5, r6, pc}
  403c78:	6823      	ldr	r3, [r4, #0]
  403c7a:	2b00      	cmp	r3, #0
  403c7c:	d0fb      	beq.n	403c76 <_write_r+0x1a>
  403c7e:	6033      	str	r3, [r6, #0]
  403c80:	bd70      	pop	{r4, r5, r6, pc}
  403c82:	bf00      	nop
  403c84:	204009d0 	.word	0x204009d0

00403c88 <__register_exitproc>:
  403c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403c8c:	4c25      	ldr	r4, [pc, #148]	; (403d24 <__register_exitproc+0x9c>)
  403c8e:	6825      	ldr	r5, [r4, #0]
  403c90:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  403c94:	4606      	mov	r6, r0
  403c96:	4688      	mov	r8, r1
  403c98:	4692      	mov	sl, r2
  403c9a:	4699      	mov	r9, r3
  403c9c:	b3c4      	cbz	r4, 403d10 <__register_exitproc+0x88>
  403c9e:	6860      	ldr	r0, [r4, #4]
  403ca0:	281f      	cmp	r0, #31
  403ca2:	dc17      	bgt.n	403cd4 <__register_exitproc+0x4c>
  403ca4:	1c43      	adds	r3, r0, #1
  403ca6:	b176      	cbz	r6, 403cc6 <__register_exitproc+0x3e>
  403ca8:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  403cac:	2201      	movs	r2, #1
  403cae:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  403cb2:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  403cb6:	4082      	lsls	r2, r0
  403cb8:	4311      	orrs	r1, r2
  403cba:	2e02      	cmp	r6, #2
  403cbc:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  403cc0:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  403cc4:	d01e      	beq.n	403d04 <__register_exitproc+0x7c>
  403cc6:	3002      	adds	r0, #2
  403cc8:	6063      	str	r3, [r4, #4]
  403cca:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  403cce:	2000      	movs	r0, #0
  403cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403cd4:	4b14      	ldr	r3, [pc, #80]	; (403d28 <__register_exitproc+0xa0>)
  403cd6:	b303      	cbz	r3, 403d1a <__register_exitproc+0x92>
  403cd8:	f44f 70c8 	mov.w	r0, #400	; 0x190
  403cdc:	f7ff f8d6 	bl	402e8c <malloc>
  403ce0:	4604      	mov	r4, r0
  403ce2:	b1d0      	cbz	r0, 403d1a <__register_exitproc+0x92>
  403ce4:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  403ce8:	2700      	movs	r7, #0
  403cea:	e880 0088 	stmia.w	r0, {r3, r7}
  403cee:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  403cf2:	4638      	mov	r0, r7
  403cf4:	2301      	movs	r3, #1
  403cf6:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  403cfa:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  403cfe:	2e00      	cmp	r6, #0
  403d00:	d0e1      	beq.n	403cc6 <__register_exitproc+0x3e>
  403d02:	e7d1      	b.n	403ca8 <__register_exitproc+0x20>
  403d04:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  403d08:	430a      	orrs	r2, r1
  403d0a:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  403d0e:	e7da      	b.n	403cc6 <__register_exitproc+0x3e>
  403d10:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  403d14:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  403d18:	e7c1      	b.n	403c9e <__register_exitproc+0x16>
  403d1a:	f04f 30ff 	mov.w	r0, #4294967295
  403d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403d22:	bf00      	nop
  403d24:	0040420c 	.word	0x0040420c
  403d28:	00402e8d 	.word	0x00402e8d

00403d2c <_close_r>:
  403d2c:	b538      	push	{r3, r4, r5, lr}
  403d2e:	4c07      	ldr	r4, [pc, #28]	; (403d4c <_close_r+0x20>)
  403d30:	2300      	movs	r3, #0
  403d32:	4605      	mov	r5, r0
  403d34:	4608      	mov	r0, r1
  403d36:	6023      	str	r3, [r4, #0]
  403d38:	f7fd f9a8 	bl	40108c <_close>
  403d3c:	1c43      	adds	r3, r0, #1
  403d3e:	d000      	beq.n	403d42 <_close_r+0x16>
  403d40:	bd38      	pop	{r3, r4, r5, pc}
  403d42:	6823      	ldr	r3, [r4, #0]
  403d44:	2b00      	cmp	r3, #0
  403d46:	d0fb      	beq.n	403d40 <_close_r+0x14>
  403d48:	602b      	str	r3, [r5, #0]
  403d4a:	bd38      	pop	{r3, r4, r5, pc}
  403d4c:	204009d0 	.word	0x204009d0

00403d50 <_fclose_r>:
  403d50:	2900      	cmp	r1, #0
  403d52:	d03d      	beq.n	403dd0 <_fclose_r+0x80>
  403d54:	b570      	push	{r4, r5, r6, lr}
  403d56:	4605      	mov	r5, r0
  403d58:	460c      	mov	r4, r1
  403d5a:	b108      	cbz	r0, 403d60 <_fclose_r+0x10>
  403d5c:	6b83      	ldr	r3, [r0, #56]	; 0x38
  403d5e:	b37b      	cbz	r3, 403dc0 <_fclose_r+0x70>
  403d60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403d64:	b90b      	cbnz	r3, 403d6a <_fclose_r+0x1a>
  403d66:	2000      	movs	r0, #0
  403d68:	bd70      	pop	{r4, r5, r6, pc}
  403d6a:	4621      	mov	r1, r4
  403d6c:	4628      	mov	r0, r5
  403d6e:	f7fe fb79 	bl	402464 <__sflush_r>
  403d72:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  403d74:	4606      	mov	r6, r0
  403d76:	b133      	cbz	r3, 403d86 <_fclose_r+0x36>
  403d78:	69e1      	ldr	r1, [r4, #28]
  403d7a:	4628      	mov	r0, r5
  403d7c:	4798      	blx	r3
  403d7e:	2800      	cmp	r0, #0
  403d80:	bfb8      	it	lt
  403d82:	f04f 36ff 	movlt.w	r6, #4294967295
  403d86:	89a3      	ldrh	r3, [r4, #12]
  403d88:	061b      	lsls	r3, r3, #24
  403d8a:	d41c      	bmi.n	403dc6 <_fclose_r+0x76>
  403d8c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  403d8e:	b141      	cbz	r1, 403da2 <_fclose_r+0x52>
  403d90:	f104 0340 	add.w	r3, r4, #64	; 0x40
  403d94:	4299      	cmp	r1, r3
  403d96:	d002      	beq.n	403d9e <_fclose_r+0x4e>
  403d98:	4628      	mov	r0, r5
  403d9a:	f7fe fd65 	bl	402868 <_free_r>
  403d9e:	2300      	movs	r3, #0
  403da0:	6323      	str	r3, [r4, #48]	; 0x30
  403da2:	6c61      	ldr	r1, [r4, #68]	; 0x44
  403da4:	b121      	cbz	r1, 403db0 <_fclose_r+0x60>
  403da6:	4628      	mov	r0, r5
  403da8:	f7fe fd5e 	bl	402868 <_free_r>
  403dac:	2300      	movs	r3, #0
  403dae:	6463      	str	r3, [r4, #68]	; 0x44
  403db0:	f7fe fc96 	bl	4026e0 <__sfp_lock_acquire>
  403db4:	2300      	movs	r3, #0
  403db6:	81a3      	strh	r3, [r4, #12]
  403db8:	f7fe fc94 	bl	4026e4 <__sfp_lock_release>
  403dbc:	4630      	mov	r0, r6
  403dbe:	bd70      	pop	{r4, r5, r6, pc}
  403dc0:	f7fe fc88 	bl	4026d4 <__sinit>
  403dc4:	e7cc      	b.n	403d60 <_fclose_r+0x10>
  403dc6:	6921      	ldr	r1, [r4, #16]
  403dc8:	4628      	mov	r0, r5
  403dca:	f7fe fd4d 	bl	402868 <_free_r>
  403dce:	e7dd      	b.n	403d8c <_fclose_r+0x3c>
  403dd0:	2000      	movs	r0, #0
  403dd2:	4770      	bx	lr

00403dd4 <_fstat_r>:
  403dd4:	b538      	push	{r3, r4, r5, lr}
  403dd6:	460b      	mov	r3, r1
  403dd8:	4c07      	ldr	r4, [pc, #28]	; (403df8 <_fstat_r+0x24>)
  403dda:	4605      	mov	r5, r0
  403ddc:	4611      	mov	r1, r2
  403dde:	4618      	mov	r0, r3
  403de0:	2300      	movs	r3, #0
  403de2:	6023      	str	r3, [r4, #0]
  403de4:	f7fd f956 	bl	401094 <_fstat>
  403de8:	1c43      	adds	r3, r0, #1
  403dea:	d000      	beq.n	403dee <_fstat_r+0x1a>
  403dec:	bd38      	pop	{r3, r4, r5, pc}
  403dee:	6823      	ldr	r3, [r4, #0]
  403df0:	2b00      	cmp	r3, #0
  403df2:	d0fb      	beq.n	403dec <_fstat_r+0x18>
  403df4:	602b      	str	r3, [r5, #0]
  403df6:	bd38      	pop	{r3, r4, r5, pc}
  403df8:	204009d0 	.word	0x204009d0

00403dfc <_isatty_r>:
  403dfc:	b538      	push	{r3, r4, r5, lr}
  403dfe:	4c07      	ldr	r4, [pc, #28]	; (403e1c <_isatty_r+0x20>)
  403e00:	2300      	movs	r3, #0
  403e02:	4605      	mov	r5, r0
  403e04:	4608      	mov	r0, r1
  403e06:	6023      	str	r3, [r4, #0]
  403e08:	f7fd f94a 	bl	4010a0 <_isatty>
  403e0c:	1c43      	adds	r3, r0, #1
  403e0e:	d000      	beq.n	403e12 <_isatty_r+0x16>
  403e10:	bd38      	pop	{r3, r4, r5, pc}
  403e12:	6823      	ldr	r3, [r4, #0]
  403e14:	2b00      	cmp	r3, #0
  403e16:	d0fb      	beq.n	403e10 <_isatty_r+0x14>
  403e18:	602b      	str	r3, [r5, #0]
  403e1a:	bd38      	pop	{r3, r4, r5, pc}
  403e1c:	204009d0 	.word	0x204009d0

00403e20 <_lseek_r>:
  403e20:	b570      	push	{r4, r5, r6, lr}
  403e22:	460d      	mov	r5, r1
  403e24:	4c08      	ldr	r4, [pc, #32]	; (403e48 <_lseek_r+0x28>)
  403e26:	4611      	mov	r1, r2
  403e28:	4606      	mov	r6, r0
  403e2a:	461a      	mov	r2, r3
  403e2c:	4628      	mov	r0, r5
  403e2e:	2300      	movs	r3, #0
  403e30:	6023      	str	r3, [r4, #0]
  403e32:	f7fd f937 	bl	4010a4 <_lseek>
  403e36:	1c43      	adds	r3, r0, #1
  403e38:	d000      	beq.n	403e3c <_lseek_r+0x1c>
  403e3a:	bd70      	pop	{r4, r5, r6, pc}
  403e3c:	6823      	ldr	r3, [r4, #0]
  403e3e:	2b00      	cmp	r3, #0
  403e40:	d0fb      	beq.n	403e3a <_lseek_r+0x1a>
  403e42:	6033      	str	r3, [r6, #0]
  403e44:	bd70      	pop	{r4, r5, r6, pc}
  403e46:	bf00      	nop
  403e48:	204009d0 	.word	0x204009d0

00403e4c <_read_r>:
  403e4c:	b570      	push	{r4, r5, r6, lr}
  403e4e:	460d      	mov	r5, r1
  403e50:	4c08      	ldr	r4, [pc, #32]	; (403e74 <_read_r+0x28>)
  403e52:	4611      	mov	r1, r2
  403e54:	4606      	mov	r6, r0
  403e56:	461a      	mov	r2, r3
  403e58:	4628      	mov	r0, r5
  403e5a:	2300      	movs	r3, #0
  403e5c:	6023      	str	r3, [r4, #0]
  403e5e:	f7fc fb87 	bl	400570 <_read>
  403e62:	1c43      	adds	r3, r0, #1
  403e64:	d000      	beq.n	403e68 <_read_r+0x1c>
  403e66:	bd70      	pop	{r4, r5, r6, pc}
  403e68:	6823      	ldr	r3, [r4, #0]
  403e6a:	2b00      	cmp	r3, #0
  403e6c:	d0fb      	beq.n	403e66 <_read_r+0x1a>
  403e6e:	6033      	str	r3, [r6, #0]
  403e70:	bd70      	pop	{r4, r5, r6, pc}
  403e72:	bf00      	nop
  403e74:	204009d0 	.word	0x204009d0

00403e78 <__aeabi_uldivmod>:
  403e78:	b953      	cbnz	r3, 403e90 <__aeabi_uldivmod+0x18>
  403e7a:	b94a      	cbnz	r2, 403e90 <__aeabi_uldivmod+0x18>
  403e7c:	2900      	cmp	r1, #0
  403e7e:	bf08      	it	eq
  403e80:	2800      	cmpeq	r0, #0
  403e82:	bf1c      	itt	ne
  403e84:	f04f 31ff 	movne.w	r1, #4294967295
  403e88:	f04f 30ff 	movne.w	r0, #4294967295
  403e8c:	f000 b97e 	b.w	40418c <__aeabi_idiv0>
  403e90:	f1ad 0c08 	sub.w	ip, sp, #8
  403e94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  403e98:	f000 f806 	bl	403ea8 <__udivmoddi4>
  403e9c:	f8dd e004 	ldr.w	lr, [sp, #4]
  403ea0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  403ea4:	b004      	add	sp, #16
  403ea6:	4770      	bx	lr

00403ea8 <__udivmoddi4>:
  403ea8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403eac:	468c      	mov	ip, r1
  403eae:	460e      	mov	r6, r1
  403eb0:	4604      	mov	r4, r0
  403eb2:	9d08      	ldr	r5, [sp, #32]
  403eb4:	2b00      	cmp	r3, #0
  403eb6:	d150      	bne.n	403f5a <__udivmoddi4+0xb2>
  403eb8:	428a      	cmp	r2, r1
  403eba:	4617      	mov	r7, r2
  403ebc:	d96c      	bls.n	403f98 <__udivmoddi4+0xf0>
  403ebe:	fab2 fe82 	clz	lr, r2
  403ec2:	f1be 0f00 	cmp.w	lr, #0
  403ec6:	d00b      	beq.n	403ee0 <__udivmoddi4+0x38>
  403ec8:	f1ce 0420 	rsb	r4, lr, #32
  403ecc:	fa20 f404 	lsr.w	r4, r0, r4
  403ed0:	fa01 f60e 	lsl.w	r6, r1, lr
  403ed4:	ea44 0c06 	orr.w	ip, r4, r6
  403ed8:	fa02 f70e 	lsl.w	r7, r2, lr
  403edc:	fa00 f40e 	lsl.w	r4, r0, lr
  403ee0:	ea4f 4917 	mov.w	r9, r7, lsr #16
  403ee4:	0c22      	lsrs	r2, r4, #16
  403ee6:	fbbc f0f9 	udiv	r0, ip, r9
  403eea:	fa1f f887 	uxth.w	r8, r7
  403eee:	fb09 c610 	mls	r6, r9, r0, ip
  403ef2:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
  403ef6:	fb00 f308 	mul.w	r3, r0, r8
  403efa:	42b3      	cmp	r3, r6
  403efc:	d909      	bls.n	403f12 <__udivmoddi4+0x6a>
  403efe:	19f6      	adds	r6, r6, r7
  403f00:	f100 32ff 	add.w	r2, r0, #4294967295
  403f04:	f080 8122 	bcs.w	40414c <__udivmoddi4+0x2a4>
  403f08:	42b3      	cmp	r3, r6
  403f0a:	f240 811f 	bls.w	40414c <__udivmoddi4+0x2a4>
  403f0e:	3802      	subs	r0, #2
  403f10:	443e      	add	r6, r7
  403f12:	1af6      	subs	r6, r6, r3
  403f14:	b2a2      	uxth	r2, r4
  403f16:	fbb6 f3f9 	udiv	r3, r6, r9
  403f1a:	fb09 6613 	mls	r6, r9, r3, r6
  403f1e:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
  403f22:	fb03 f808 	mul.w	r8, r3, r8
  403f26:	45a0      	cmp	r8, r4
  403f28:	d909      	bls.n	403f3e <__udivmoddi4+0x96>
  403f2a:	19e4      	adds	r4, r4, r7
  403f2c:	f103 32ff 	add.w	r2, r3, #4294967295
  403f30:	f080 810a 	bcs.w	404148 <__udivmoddi4+0x2a0>
  403f34:	45a0      	cmp	r8, r4
  403f36:	f240 8107 	bls.w	404148 <__udivmoddi4+0x2a0>
  403f3a:	3b02      	subs	r3, #2
  403f3c:	443c      	add	r4, r7
  403f3e:	ebc8 0404 	rsb	r4, r8, r4
  403f42:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  403f46:	2100      	movs	r1, #0
  403f48:	2d00      	cmp	r5, #0
  403f4a:	d062      	beq.n	404012 <__udivmoddi4+0x16a>
  403f4c:	fa24 f40e 	lsr.w	r4, r4, lr
  403f50:	2300      	movs	r3, #0
  403f52:	602c      	str	r4, [r5, #0]
  403f54:	606b      	str	r3, [r5, #4]
  403f56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403f5a:	428b      	cmp	r3, r1
  403f5c:	d907      	bls.n	403f6e <__udivmoddi4+0xc6>
  403f5e:	2d00      	cmp	r5, #0
  403f60:	d055      	beq.n	40400e <__udivmoddi4+0x166>
  403f62:	2100      	movs	r1, #0
  403f64:	e885 0041 	stmia.w	r5, {r0, r6}
  403f68:	4608      	mov	r0, r1
  403f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403f6e:	fab3 f183 	clz	r1, r3
  403f72:	2900      	cmp	r1, #0
  403f74:	f040 8090 	bne.w	404098 <__udivmoddi4+0x1f0>
  403f78:	42b3      	cmp	r3, r6
  403f7a:	d302      	bcc.n	403f82 <__udivmoddi4+0xda>
  403f7c:	4282      	cmp	r2, r0
  403f7e:	f200 80f8 	bhi.w	404172 <__udivmoddi4+0x2ca>
  403f82:	1a84      	subs	r4, r0, r2
  403f84:	eb66 0603 	sbc.w	r6, r6, r3
  403f88:	2001      	movs	r0, #1
  403f8a:	46b4      	mov	ip, r6
  403f8c:	2d00      	cmp	r5, #0
  403f8e:	d040      	beq.n	404012 <__udivmoddi4+0x16a>
  403f90:	e885 1010 	stmia.w	r5, {r4, ip}
  403f94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403f98:	b912      	cbnz	r2, 403fa0 <__udivmoddi4+0xf8>
  403f9a:	2701      	movs	r7, #1
  403f9c:	fbb7 f7f2 	udiv	r7, r7, r2
  403fa0:	fab7 fe87 	clz	lr, r7
  403fa4:	f1be 0f00 	cmp.w	lr, #0
  403fa8:	d135      	bne.n	404016 <__udivmoddi4+0x16e>
  403faa:	1bf3      	subs	r3, r6, r7
  403fac:	ea4f 4817 	mov.w	r8, r7, lsr #16
  403fb0:	fa1f fc87 	uxth.w	ip, r7
  403fb4:	2101      	movs	r1, #1
  403fb6:	fbb3 f0f8 	udiv	r0, r3, r8
  403fba:	0c22      	lsrs	r2, r4, #16
  403fbc:	fb08 3610 	mls	r6, r8, r0, r3
  403fc0:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
  403fc4:	fb0c f300 	mul.w	r3, ip, r0
  403fc8:	42b3      	cmp	r3, r6
  403fca:	d907      	bls.n	403fdc <__udivmoddi4+0x134>
  403fcc:	19f6      	adds	r6, r6, r7
  403fce:	f100 32ff 	add.w	r2, r0, #4294967295
  403fd2:	d202      	bcs.n	403fda <__udivmoddi4+0x132>
  403fd4:	42b3      	cmp	r3, r6
  403fd6:	f200 80ce 	bhi.w	404176 <__udivmoddi4+0x2ce>
  403fda:	4610      	mov	r0, r2
  403fdc:	1af6      	subs	r6, r6, r3
  403fde:	b2a2      	uxth	r2, r4
  403fe0:	fbb6 f3f8 	udiv	r3, r6, r8
  403fe4:	fb08 6613 	mls	r6, r8, r3, r6
  403fe8:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
  403fec:	fb0c fc03 	mul.w	ip, ip, r3
  403ff0:	45a4      	cmp	ip, r4
  403ff2:	d907      	bls.n	404004 <__udivmoddi4+0x15c>
  403ff4:	19e4      	adds	r4, r4, r7
  403ff6:	f103 32ff 	add.w	r2, r3, #4294967295
  403ffa:	d202      	bcs.n	404002 <__udivmoddi4+0x15a>
  403ffc:	45a4      	cmp	ip, r4
  403ffe:	f200 80b5 	bhi.w	40416c <__udivmoddi4+0x2c4>
  404002:	4613      	mov	r3, r2
  404004:	ebcc 0404 	rsb	r4, ip, r4
  404008:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  40400c:	e79c      	b.n	403f48 <__udivmoddi4+0xa0>
  40400e:	4629      	mov	r1, r5
  404010:	4628      	mov	r0, r5
  404012:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404016:	f1ce 0120 	rsb	r1, lr, #32
  40401a:	fa06 f30e 	lsl.w	r3, r6, lr
  40401e:	fa07 f70e 	lsl.w	r7, r7, lr
  404022:	fa20 f901 	lsr.w	r9, r0, r1
  404026:	ea4f 4817 	mov.w	r8, r7, lsr #16
  40402a:	40ce      	lsrs	r6, r1
  40402c:	ea49 0903 	orr.w	r9, r9, r3
  404030:	fbb6 faf8 	udiv	sl, r6, r8
  404034:	ea4f 4419 	mov.w	r4, r9, lsr #16
  404038:	fb08 661a 	mls	r6, r8, sl, r6
  40403c:	fa1f fc87 	uxth.w	ip, r7
  404040:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
  404044:	fb0a f20c 	mul.w	r2, sl, ip
  404048:	429a      	cmp	r2, r3
  40404a:	fa00 f40e 	lsl.w	r4, r0, lr
  40404e:	d90a      	bls.n	404066 <__udivmoddi4+0x1be>
  404050:	19db      	adds	r3, r3, r7
  404052:	f10a 31ff 	add.w	r1, sl, #4294967295
  404056:	f080 8087 	bcs.w	404168 <__udivmoddi4+0x2c0>
  40405a:	429a      	cmp	r2, r3
  40405c:	f240 8084 	bls.w	404168 <__udivmoddi4+0x2c0>
  404060:	f1aa 0a02 	sub.w	sl, sl, #2
  404064:	443b      	add	r3, r7
  404066:	1a9b      	subs	r3, r3, r2
  404068:	fa1f f989 	uxth.w	r9, r9
  40406c:	fbb3 f1f8 	udiv	r1, r3, r8
  404070:	fb08 3311 	mls	r3, r8, r1, r3
  404074:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
  404078:	fb01 f60c 	mul.w	r6, r1, ip
  40407c:	429e      	cmp	r6, r3
  40407e:	d907      	bls.n	404090 <__udivmoddi4+0x1e8>
  404080:	19db      	adds	r3, r3, r7
  404082:	f101 32ff 	add.w	r2, r1, #4294967295
  404086:	d26b      	bcs.n	404160 <__udivmoddi4+0x2b8>
  404088:	429e      	cmp	r6, r3
  40408a:	d969      	bls.n	404160 <__udivmoddi4+0x2b8>
  40408c:	3902      	subs	r1, #2
  40408e:	443b      	add	r3, r7
  404090:	1b9b      	subs	r3, r3, r6
  404092:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
  404096:	e78e      	b.n	403fb6 <__udivmoddi4+0x10e>
  404098:	f1c1 0e20 	rsb	lr, r1, #32
  40409c:	fa22 f40e 	lsr.w	r4, r2, lr
  4040a0:	408b      	lsls	r3, r1
  4040a2:	4323      	orrs	r3, r4
  4040a4:	fa20 f70e 	lsr.w	r7, r0, lr
  4040a8:	fa06 f401 	lsl.w	r4, r6, r1
  4040ac:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  4040b0:	fa26 f60e 	lsr.w	r6, r6, lr
  4040b4:	433c      	orrs	r4, r7
  4040b6:	fbb6 f9fc 	udiv	r9, r6, ip
  4040ba:	0c27      	lsrs	r7, r4, #16
  4040bc:	fb0c 6619 	mls	r6, ip, r9, r6
  4040c0:	fa1f f883 	uxth.w	r8, r3
  4040c4:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
  4040c8:	fb09 f708 	mul.w	r7, r9, r8
  4040cc:	42b7      	cmp	r7, r6
  4040ce:	fa02 f201 	lsl.w	r2, r2, r1
  4040d2:	fa00 fa01 	lsl.w	sl, r0, r1
  4040d6:	d908      	bls.n	4040ea <__udivmoddi4+0x242>
  4040d8:	18f6      	adds	r6, r6, r3
  4040da:	f109 30ff 	add.w	r0, r9, #4294967295
  4040de:	d241      	bcs.n	404164 <__udivmoddi4+0x2bc>
  4040e0:	42b7      	cmp	r7, r6
  4040e2:	d93f      	bls.n	404164 <__udivmoddi4+0x2bc>
  4040e4:	f1a9 0902 	sub.w	r9, r9, #2
  4040e8:	441e      	add	r6, r3
  4040ea:	1bf6      	subs	r6, r6, r7
  4040ec:	b2a0      	uxth	r0, r4
  4040ee:	fbb6 f4fc 	udiv	r4, r6, ip
  4040f2:	fb0c 6614 	mls	r6, ip, r4, r6
  4040f6:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
  4040fa:	fb04 f808 	mul.w	r8, r4, r8
  4040fe:	45b8      	cmp	r8, r7
  404100:	d907      	bls.n	404112 <__udivmoddi4+0x26a>
  404102:	18ff      	adds	r7, r7, r3
  404104:	f104 30ff 	add.w	r0, r4, #4294967295
  404108:	d228      	bcs.n	40415c <__udivmoddi4+0x2b4>
  40410a:	45b8      	cmp	r8, r7
  40410c:	d926      	bls.n	40415c <__udivmoddi4+0x2b4>
  40410e:	3c02      	subs	r4, #2
  404110:	441f      	add	r7, r3
  404112:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
  404116:	ebc8 0707 	rsb	r7, r8, r7
  40411a:	fba0 8902 	umull	r8, r9, r0, r2
  40411e:	454f      	cmp	r7, r9
  404120:	4644      	mov	r4, r8
  404122:	464e      	mov	r6, r9
  404124:	d314      	bcc.n	404150 <__udivmoddi4+0x2a8>
  404126:	d029      	beq.n	40417c <__udivmoddi4+0x2d4>
  404128:	b365      	cbz	r5, 404184 <__udivmoddi4+0x2dc>
  40412a:	ebba 0304 	subs.w	r3, sl, r4
  40412e:	eb67 0706 	sbc.w	r7, r7, r6
  404132:	fa07 fe0e 	lsl.w	lr, r7, lr
  404136:	40cb      	lsrs	r3, r1
  404138:	40cf      	lsrs	r7, r1
  40413a:	ea4e 0303 	orr.w	r3, lr, r3
  40413e:	e885 0088 	stmia.w	r5, {r3, r7}
  404142:	2100      	movs	r1, #0
  404144:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404148:	4613      	mov	r3, r2
  40414a:	e6f8      	b.n	403f3e <__udivmoddi4+0x96>
  40414c:	4610      	mov	r0, r2
  40414e:	e6e0      	b.n	403f12 <__udivmoddi4+0x6a>
  404150:	ebb8 0402 	subs.w	r4, r8, r2
  404154:	eb69 0603 	sbc.w	r6, r9, r3
  404158:	3801      	subs	r0, #1
  40415a:	e7e5      	b.n	404128 <__udivmoddi4+0x280>
  40415c:	4604      	mov	r4, r0
  40415e:	e7d8      	b.n	404112 <__udivmoddi4+0x26a>
  404160:	4611      	mov	r1, r2
  404162:	e795      	b.n	404090 <__udivmoddi4+0x1e8>
  404164:	4681      	mov	r9, r0
  404166:	e7c0      	b.n	4040ea <__udivmoddi4+0x242>
  404168:	468a      	mov	sl, r1
  40416a:	e77c      	b.n	404066 <__udivmoddi4+0x1be>
  40416c:	3b02      	subs	r3, #2
  40416e:	443c      	add	r4, r7
  404170:	e748      	b.n	404004 <__udivmoddi4+0x15c>
  404172:	4608      	mov	r0, r1
  404174:	e70a      	b.n	403f8c <__udivmoddi4+0xe4>
  404176:	3802      	subs	r0, #2
  404178:	443e      	add	r6, r7
  40417a:	e72f      	b.n	403fdc <__udivmoddi4+0x134>
  40417c:	45c2      	cmp	sl, r8
  40417e:	d3e7      	bcc.n	404150 <__udivmoddi4+0x2a8>
  404180:	463e      	mov	r6, r7
  404182:	e7d1      	b.n	404128 <__udivmoddi4+0x280>
  404184:	4629      	mov	r1, r5
  404186:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40418a:	bf00      	nop

0040418c <__aeabi_idiv0>:
  40418c:	4770      	bx	lr
  40418e:	bf00      	nop
  404190:	41202d2d 	.word	0x41202d2d
  404194:	20434546 	.word	0x20434546
  404198:	706d6554 	.word	0x706d6554
  40419c:	74617265 	.word	0x74617265
  4041a0:	20657275 	.word	0x20657275
  4041a4:	736e6553 	.word	0x736e6553
  4041a8:	4520726f 	.word	0x4520726f
  4041ac:	706d6178 	.word	0x706d6178
  4041b0:	2d20656c 	.word	0x2d20656c
  4041b4:	2d0a0d2d 	.word	0x2d0a0d2d
  4041b8:	4153202d 	.word	0x4153202d
  4041bc:	3037454d 	.word	0x3037454d
  4041c0:	4c50582d 	.word	0x4c50582d
  4041c4:	2d2d2044 	.word	0x2d2d2044
  4041c8:	2d2d0a0d 	.word	0x2d2d0a0d
  4041cc:	6d6f4320 	.word	0x6d6f4320
  4041d0:	656c6970 	.word	0x656c6970
  4041d4:	4d203a64 	.word	0x4d203a64
  4041d8:	20207961 	.word	0x20207961
  4041dc:	30322033 	.word	0x30322033
  4041e0:	31203731 	.word	0x31203731
  4041e4:	34313a39 	.word	0x34313a39
  4041e8:	2039323a 	.word	0x2039323a
  4041ec:	000d2d2d 	.word	0x000d2d2d
  4041f0:	706d6554 	.word	0x706d6554
  4041f4:	74617265 	.word	0x74617265
  4041f8:	20657275 	.word	0x20657275
  4041fc:	203a7369 	.word	0x203a7369
  404200:	0d643425 	.word	0x0d643425
  404204:	00000000 	.word	0x00000000
  404208:	00000043 	.word	0x00000043

0040420c <_global_impure_ptr>:
  40420c:	20400008 0000000a                       ..@ ....

00404214 <zeroes.6993>:
  404214:	30303030 30303030 30303030 30303030     0000000000000000
  404224:	33323130 37363534 42413938 46454443     0123456789ABCDEF
  404234:	00000000 33323130 37363534 62613938     ....0123456789ab
  404244:	66656463 00000000 6c756e28 0000296c     cdef....(null)..

00404254 <blanks.6992>:
  404254:	20202020 20202020 20202020 20202020                     

00404264 <_init>:
  404264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404266:	bf00      	nop
  404268:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40426a:	bc08      	pop	{r3}
  40426c:	469e      	mov	lr, r3
  40426e:	4770      	bx	lr

00404270 <__init_array_start>:
  404270:	00402445 	.word	0x00402445

00404274 <__frame_dummy_init_array_entry>:
  404274:	00400165                                e.@.

00404278 <_fini>:
  404278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40427a:	bf00      	nop
  40427c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40427e:	bc08      	pop	{r3}
  404280:	469e      	mov	lr, r3
  404282:	4770      	bx	lr

00404284 <__fini_array_start>:
  404284:	00400141 	.word	0x00400141
